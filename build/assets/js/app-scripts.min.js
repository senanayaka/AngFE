(function () {
    'use strict';

    angular.module('orangeTrax', [

        //third party
        'ui.router',
        'toastr',
        'ui.bootstrap',
        'angularUtils.directives.uiBreadcrumbs',
        'ngStorage',
        'angular-flot',
        'angular.morris-chart',
        'checklist-model',
        'ngAnimate',
        'ngMessages',
        'angular-loading-bar',
        'angularMoment',
        'ui.select',
        'ngSanitize',
        'ngFileUpload',
        'checklist-model',

        //app
        'module.snapshot',
        'module.orders',
        'module.gallery',
        'module.reminders',
        'module.login',
        'module.faqs',
        'module.users',
        'module.adminSettings',
        'module.customerService',
        'module.productsCatalogue',
        'module.notifications',
        'module.customers',
        'module.analytics',
        'module.messages',
        'module.groupView',
        'module.delivery',



    ]);

    //Configuration
    angular.module('orangeTrax').config([
        '$stateProvider', '$urlRouterProvider', '$httpProvider', '$locationProvider', 'toastrConfig',
        config]);

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider, toastrConfig) {

        $locationProvider.hashPrefix('!');

        //default state

        $urlRouterProvider.otherwise(function($injector, $location){
            var $state = $injector.get("$state");
            $state.go('snapshot');
        });

        //$urlRouterProvider.otherwise('/snapshot');

        //for :: handle backend error 401/500
        $httpProvider.interceptors.push('interceptorFactory');

        //for trailing slash issue fix
        // $resourceProvider.defaults.stripTrailingSlashes = false;

        //Toastr customization
        angular.extend(toastrConfig, {
            preventOpenDuplicates: true,
            closeButton: true
        });


    }


    //Run
    angular.module('orangeTrax').run([
        '$window', '$rootScope', '$state', 'authService', '$location', '$interval', '$modalStack', '$document', 'toastr', 'socketIO', '$timeout',
        run]);

    function run($window, $rootScope, $state, authService, $location, $interval, $modalStack, $document, toastr, socketIO, $timeout) {


        //$stateChangeStart
        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {

            // Change page title
            if (toState.data.pageTitle) {
                $rootScope.title = ' | ' + toState.data.pageTitle;
            }

            // redirect to login page if not logged in and trying to access a restricted page
            if (toState.private == true && authService.isLoggedIn() == false) {
                // no logged user, redirect to /login
                event.preventDefault(); // stop current execution
                $state.go('login'); // go to login
            }
            //Redirect users to order page if they already logged in
            /*var status = authService.watchMe($location.$$path);
             if (status == true) {
             $location.path("/orders");
             }*/

        });

        /* Auto logout idle user
         * http://stackoverflow.com/questions/19168330/auto-logout-with-angularjs-based-on-idle-user
         * https://github.com/HackedByChinese/ng-idle
         * */

        $rootScope.idleEndTime = Date.now() + (10 * 60 * 1000); //set end time to 10 min from now
        $document.find('body').on('mousemove keydown DOMMouseScroll mousewheel mousedown touchstart', function () {
            checkAndResetIdle(true);
        }); //monitor events


        /*
         * AngularJS UI Router - $state.current.name is empty when using templateUrl
         * http://stackoverflow.com/questions/29940616/angularjs-ui-router-state-current-name-is-empty-when-using-templateurl
         * */
        $rootScope.currState = $state;

        function checkAndResetIdle(status) {

            $rootScope.$watch('currState.current.private', function (newValue, oldValue) {
                $rootScope.currStatePrivat = newValue;
            });

            var now = Date.now();
            if (status == true) {
                $rootScope.idleEndTime = now + (10 * 60 * 1000); //reset end time
            } else if ((now > $rootScope.idleEndTime && $rootScope.currStatePrivat === true && authService.getExpire() !== undefined)) {
                socketIO.disconnect();
                authService.logout();
                toastr.warning('You\'ve been logged out due to inactivity', '', {
                    "timeOut": 0
                });
                $location.path('/login');
            } else if ($rootScope.currStatePrivat === true && authService.isLoggedIn() == false) {
                socketIO.disconnect();
                authService.logout();
                toastr.warning('You\'ve been logged out due to inactivity', '', {
                    "timeOut": 0
                });
                $location.path('/login');
            }
        }


        /**
         * Check if the app is open in another tabs
         *http://stackoverflow.com/questions/23690666/check-if-my-website-is-open-in-another-tab
         *
         **/
        //Private variables
        var _LOCALSTORAGE_KEY = 'WINDOW_VALIDATION';
        var RECHECK_WINDOW_DELAY_MS = 100;
        var _initialized = false;
        var _isMainWindow = false;
        var _unloaded = false;
        var _windowArray;
        var _windowId;
        var _isNewWindowPromotedToMain = false;
        var _onWindowUpdated;


        function WindowStateManager(isNewWindowPromotedToMain, onWindowUpdated) {
            //this.resetWindows();
            _onWindowUpdated = onWindowUpdated;
            _isNewWindowPromotedToMain = isNewWindowPromotedToMain;
            _windowId = {
                'id': Date.now().toString(),
                'status': 0
            };

            bindUnload();

            determineWindowState.call(this);

            _initialized = true;

            _onWindowUpdated.call(this);
        }

        //Determine the state of the window
        //If its a main or child window
        function determineWindowState() {
            var self = this;
            var _previousState = _isMainWindow;

            _windowArray = localStorage.getItem(_LOCALSTORAGE_KEY);

            if (_windowArray === 'null' || _windowArray === null || _windowArray === "NaN" || _windowArray === "" || _windowArray === "[]") {
                _windowArray = [];
            }
            else {
                _windowArray = JSON.parse(_windowArray);
            }


            if (_initialized) {
                //Determine if this window should be promoted
                if (_windowArray.length <= 1 ||
                    (_isNewWindowPromotedToMain ? _windowArray[_windowArray.length - 1] : _windowArray[0]) === _windowId) {
                    _isMainWindow = true;
                }
                else {
                    _isMainWindow = false;
                }
            }
            else {
                if (_windowArray.length === 0) {
                    _isMainWindow = true;
                    _windowId.status = 1;
                    _windowArray[0] = _windowId;
                    localStorage.setItem(_LOCALSTORAGE_KEY, JSON.stringify(_windowArray));
                }
                else {
                    _isMainWindow = false;
                    _windowArray.push(_windowId);
                    localStorage.setItem(_LOCALSTORAGE_KEY, JSON.stringify(_windowArray));
                }
            }

            //If the window state has been updated invoke callback
            if (_previousState !== _isMainWindow) {
                _onWindowUpdated.call(this);
            }

            //Perform a recheck of the window on a delay
            setTimeout(function () {
                determineWindowState.call(self);
            }, RECHECK_WINDOW_DELAY_MS);
        }

        //Remove the window from the global count
        function removeWindow() {
            var __windowArray = JSON.parse(localStorage.getItem(_LOCALSTORAGE_KEY));
            for (var i = 0, length = __windowArray.length; i < length; i++) {
                if (__windowArray[i].id === _windowId.id) {
                    __windowArray.splice(i, 1);
                    break;
                }
            }
            //Update the local storage with the new array
            localStorage.setItem(_LOCALSTORAGE_KEY, JSON.stringify(__windowArray));
        }

        //Bind unloading events
        function bindUnload() {
            $window.addEventListener('beforeunload', function () {
                if (!_unloaded) {
                    removeWindow();
                }
            });
            $window.addEventListener('unload', function () {
                if (!_unloaded) {
                    removeWindow();
                }
            });
        }

        WindowStateManager.prototype.isMainWindow = function () {
            return _isMainWindow;
        };

        WindowStateManager.prototype.resetWindows = function () {
            localStorage.removeItem(_LOCALSTORAGE_KEY);
        };

        $window.WindowStateManager = WindowStateManager;


        var WindowStateManager = new WindowStateManager(false, windowUpdated);

        function windowUpdated() {
            //"this" is a reference to the WindowStateManager
            //statusWindow.className = (this.isMainWindow() ? 'main' : 'child');

        }

        angular.element($window).bind('focus', function () {
            setTabStatus();
        }).bind('blur', function () {
            setTabStatus(1);
        }).bind('mouseenter', function () {
            setTabStatus();
        }).bind('mouseleave', function () {
            setTabStatus(2);
        });

        function setTabStatus(extc) {
            var __windowArray = JSON.parse(localStorage.getItem(_LOCALSTORAGE_KEY));

            if (__windowArray.length !== 0 && (__windowArray !== null || _windowArray !== 'null')) {
                for (var i = 0, length = __windowArray.length; i < length; i++) {

                    if (extc == 1) {
                        if (__windowArray[i].id === _windowId.id) {
                            __windowArray[i].status = 0;
                        }
                    } else if (extc == 2) {
                        /*if (__windowArray[i].id === _windowId.id && _windowId.status != 1) {
                         __windowArray[i].status = 0;
                         }*/
                    } else {
                        if (__windowArray[i].id === _windowId.id) {
                            __windowArray[i].status = 1;
                        } else {
                            __windowArray[i].status = 0;
                        }
                    }
                }
            }

            localStorage.setItem(_LOCALSTORAGE_KEY, JSON.stringify(__windowArray));
        }


        //Resets the count in case something goes wrong in code
        //WindowStateManager.resetWindows()
        /**
         * End check if the app is open in another tabs
         *
         **/


        /**
         *
         * Check inactivity
         * **/


        $interval(function () {
            var __windowArray = JSON.parse(localStorage.getItem(_LOCALSTORAGE_KEY));
            var checkStatus = true;

            if (__windowArray.length !== 0 && (__windowArray !== null || _windowArray !== 'null')) {

                for (var i = 0, length = __windowArray.length; i < length; i++) {
                    if (__windowArray[i].status == 1) {
                        checkStatus = false;
                        break;
                    }
                }

                if (checkStatus == true) {
                    //checkAndResetIdle();
                } else {

                    var match;
                    for (var i = 0, length = __windowArray.length; i < length; i++) {
                        if (__windowArray[i].id === _windowId.id) {
                            match = __windowArray[i];
                        }
                    }
                    if (match && match.status == 1) {
                        //checkAndResetIdle();
                    }
                }
            }

        }, 60 * 1000);

        //$routeChangeStart
        $rootScope.$on("$routeChangeStart", function (event, next, current) {

        });

        //$locationChangeStart
        $rootScope.$on('$locationChangeStart', function (event, next, current) {

        });

        //$viewContentLoaded
        $rootScope.$on('$viewContentLoaded', function () {

            // Calculate view height and apply after the view has been loaded
            $timeout(function () {
                var height = $('.vd_navbar-left .navbar-tabs-menu').height() + $('.vd_navbar-left .navbar-menu').height() + $('.vd_navbar-left .navbar-spacing').height() + 8;
                var height_right = $('.vd_navbar-right .navbar-tabs-menu').height() + $('.vd_navbar-right .navbar-menu').height() + $('.vd_navbar-right .navbar-spacing').height() + 8;
                $('.vd_content-wrapper, .vd_content-wrapper > .vd_container').css('min-height', (height > height_right ) ? height : height_right);
            }, 100);

        });

        //$stateChangeSuccess
        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
            //Automatically close Angular UI Bootstrap modal when route changes
            $modalStack.dismissAll();
        });

    }


})
();

/**
 * Created by ab on 11/4/15.
 */

(function () {
    'use strict';

    angular.module('module.analytics', []);

    //Routing
    angular.module("module.analytics").config(
        ["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            .state('analytics', {
                url: '/analytics',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@analytics': {
                        templateUrl: 'app/analytics/analyticsView.html',
                        controller: 'analyticsController'
                    }
                },
                data: {
                    pageTitle: 'Analytics',
                    pageName: 'Analytics'
                },
                private: true
            });
    }


})();

/**
 * Created by ab on 11/4/15.
 */


(function () {
    'use strict';

    angular.module("module.analytics").controller('analyticsController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'analyticsService', '$window', controller
    ]);


    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, analyticsService, $window) {

        $scope.analytics = {};
        $scope.getStatesDate = getStatesDate;
        var reagionObj = {};
        $scope.showUsaMpa = false;
        $rootScope.spinnerTrax = true;
        analyticsService.getMapData('').then(function success(response) {
                $rootScope.spinnerTrax = false;
                $scope.showUsaMpa = true;
                reagionObj =   response.data.states;
            },
            function error(error) {
                $rootScope.spinnerTrax = false;
            });

        function getStatesDate(analyticsSearch) {
            $rootScope.spinnerTrax = true;
            analyticsService.getMapData(analyticsSearch).then(function success(response) {
                    $rootScope.spinnerTrax = false;
                    $scope.showUsaMpa = true;
                    reagionObj =   response.data.states;
            },
            function error(error) {
                $rootScope.spinnerTrax = false;
            });
        }

        analyticsService.analyticsCount().then(function success(response) {
                $scope.analytics = response.data.data;
            },
            function error(error) {
            }
        );

        //DatePicker
        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };

        //map
        $('#vmap').vectorMap({
            map: 'usa_en',
            enableZoom: true,
            showTooltip: true,
            selectedRegion: 'MO',
            onRegionOver : function (event, code, region) {
                $("#vmap-data .name").html(region);
                $("#vmap-data .revenue").html('$ '+reagionObj[code].revenue);
                $("#vmap-data .unit").html(reagionObj[code].unit);
                $("#vmap-data .open_order").html(reagionObj[code].open_order);
                $("#vmap-data .no_open_order").html('$ '+reagionObj[code].no_open_order);
            }
        });


    }

})();
/**
 * Created by ab on 11/4/15.
 */

(function () {
    'use strict';

    angular.module("module.analytics").service('analyticsService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {
        return {
            analyticsCount : analyticsCount,
            getMapData: getMapData
        };

        function analyticsCount() {
            var count = $http.post($global.API_URL + 'api/analytics/main/',{});
            return count;
        }

        function getMapData(analyticsSearch) {
            var getData = $http.post($global.API_URL + 'api/analytics/map/usa/',analyticsSearch
            );
            return getData;
        }


    }


})();


/**
 * Created by yasith on 9/14/15.
 */
(function () {

    angular.module('module.adminSettings', []);

    //Routing
    angular.module("module.adminSettings").config([
        "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider",
        config]);

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider
            //Retailer Management
            .state('adminSettings', {
                url: '/admin-settings',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/retailerManagement.html'
                       // controller: 'retailerController',
                    }
                },
                data: {
                    pageTitle: 'Retailer Management',
                    pageName: false
                },
                private: true
            })
            .state('adminSettings.retailerManagement', {
                url: '/retailer-management',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/retailerManagement.html',
                        controller: 'retailerController'
                    }
                },
                data: {
                    pageTitle: 'Retailer Management',
                    pageName: 'Retailer Management'
                },
                private: true
            })
            .state('adminSettings.vendorManagement', {
                url: '/vendor-management',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/vendorManagement.html',
                        controller: 'vendorController'
                    }
                },
                data: {
                    pageTitle: 'Vendor Management',
                    pageName: 'Vendor Management'
                },
                private: true
            })
            .state('adminSettings.daManagement', {
                url: '/da-management',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/daManagement.html',
                        controller: 'daController'
                    }
                },
                data: {
                    pageTitle: 'DA Management',
                    pageName: 'DA Management'
                },
                private: true
            })
            .state('adminSettings.carrierManagement', {
                url: '/carrier-management',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/carrierManagement.html',
                        controller: 'carrierController'
                    }
                },
                data: {
                    pageTitle: 'Carrier Management',
                    pageName: 'Carrier Management'
                },
                private: true
            })
            .state('adminSettings.medicManagement', {
                url: '/medic-management',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/medicManagement.html',
                        controller: 'medicController'
                    }
                },
                data: {
                    pageTitle: 'Medic Management',
                    pageName: 'Medic Management'
                },
                private: true
            })

            .state('adminSettings.userManagement', {
                url: '/user-management',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html',
                    },
                    'content@adminSettings': {
                        templateUrl: 'app/admin-settings/user-management/user.html',
                        controller: 'userController',
                    },
                },
                data: {
                    pageTitle: 'User Management',
                    pageName: 'Platform User Management',
                },
                private: true
            })


    }


})();



/**
 * Created by gayani on 9/17/15.
 */
/**
 * Created by gayani on 9/17/15.
 */


(function () {
    'use strict';

    angular.module("module.adminSettings").controller('carrierController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'carrierService','$window','modalService',     controller
    ]);


    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, carrierService, $window,modalService) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 20;

        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.pageSize = 20;
        $scope.carrier = [];

        $scope.viewCarrier = viewCarrier;
        $scope.addCarrier = addCarrier;
        $scope.editCarrier = editCarrier;

        getRl(); // Load data first time.

        function getRl() {
            $rootScope.spinnerTrax = true;
            carrierService.getCarrierList().then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.carrier =response.data;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function viewCarrier(carrierID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/viewCarrierModal.html',
                controller: 'viewCarrierModalController',
                size: 'lg',
                resolve: {
                    carrierID: function () {
                        return carrierID;
                    }
                }
            });

        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        function addCarrier() {
            formOpenModal()
        }

        function editCarrier(carrierID) {
            if (carrierID) {
                formOpenModal(carrierID)
            } else {
                toastr.error('Carrier ID!', 'Missing row id...');
            }
        }


        function formOpenModal(carrierID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/newCarrierModal.html',
                controller: 'formCarrierModalController',
                size: 'lg',
                resolve: {
                    carrierID: function () {
                        return carrierID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                getRl();
            });

        }

        // User settings modal Cancel
        $scope.settingsCancel = function () {
            if (angular.isDefined($scope.modalInstance)) {
                if ($window.confirm("Do you want to close the window?")) {
                    $scope.modalInstance.close();
                }
                else {}
            }
        };

    }

    /**
     * VIEW MODAL
     * */
    angular.module('module.adminSettings').controller('viewCarrierModalController',
        ['modalService','$scope', '$global', '$modalInstance', 'carrierID', 'carrierService', '$rootScope', viewCarrierModalController]);
    function viewCarrierModalController(modalService,$scope, $global, $modalInstance, carrierID, carrierService, $rootScope) {

        carrierService.getCarrierDetails(carrierID).then(function (response) {
            $scope.carrierForm = response.data.company;
            $scope.API_URL = $global.API_URL;

            for (var i = 0; i < $scope.carrierForm.admins.length; i++) {
                $scope.carrierForm['displayName' + (i + 1)] = $scope.carrierForm.admins[i]['displayName'];
                $scope.carrierForm['adminEmail' + (i + 1)] = $scope.carrierForm.admins[i]['email'];
            }
        }, function (error) {

        });

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


    }//

    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.adminSettings').controller('formCarrierModalController',
        ['$scope', '$global', '$modalInstance', 'carrierID', 'carrierService', 'toastr', '$window', '$rootScope','modalService', formCarrierModalController]);
    function formCarrierModalController($scope, $global, $modalInstance, carrierID, carrierService, toastr, $window, $rootScope,modalService) {

        $scope.pageStatus = carrierID ? 'EDIT' : 'CREATE';
        $scope.carrierForm = {};
        $scope.countryArr = {};
        $scope.stateArr = {};
        $scope.carrierForm.recordStatus = true;
        $scope.save = carrierSave;
        $scope.title = "Create";
        $scope.showimage1 = true;
        $scope.showimage2 = false;
        $scope.showimage3 = false;

        carrierService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {
        });

         //Load data when carrierID is available (Edit mode)
        if ($scope.pageStatus === "EDIT") {
            carrierService.getCarrierDetails(carrierID).then(function (response) {
                $scope.carrierForm = response.data.company;
                $scope.carrierForm.state_id = $scope.carrierForm.recordStatus;
                $scope.title = "Edit";
                $scope.API_URL = $global.API_URL;
                $scope.stateArr = $scope.carrierForm.stateArr;
                $scope.carrierForm.compCountry = _.findWhere($scope.countryArr, {code: $scope.carrierForm.compCountry});
                $scope.carrierForm.compState = _.findWhere($scope.stateArr, {code: $scope.carrierForm.compState});

                //@TODO: Change API call to return same type of status
                if ($scope.carrierForm.recordStatus == "1") {
                    $scope.carrierForm.state_id = true;
                } else if ($scope.carrierForm.recordStatus == "2") {
                    $scope.carrierForm.state_id = false;
                }

                if ($scope.carrierForm.phone_2){
                    $scope.showphone2 = true;
                }
                if ($scope.carrierForm.phone_3) {
                    $scope.showphone3 = true;
                }

                $scope.showimage1 = true;
                if($scope.carrierForm.contracts[1]) {
                    $scope.showimage2 = true;
                }
                if($scope.carrierForm.contracts[2]) {
                    $scope.showimage3 = true;
                }
/*
                for (var i = 0; i < $scope.carrierForm.admins.length; i++) {
                    $scope.carrierForm['displayName' + (i + 1)] = $scope.carrierForm.admins[i]['displayName'];
                    $scope.carrierForm['adminEmail' + (i + 1)] = $scope.carrierForm.admins[i]['email'];
                }*/
            }, function (error) {

            });
        }

        function carrierSave() {
            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {

                    $scope.carrierForm.record_status = $scope.carrierForm.state_id;
                    //@TODO:
                    if ($scope.carrierForm.state_id) {
                        $scope.carrierForm.record_status = "1";
                    } else {
                        $scope.carrierForm.record_status = "2";
                    }
                    $scope.isProcessing = true;
                    carrierService.updateCarrier($scope.carrierForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Carrier has been updated successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Carrier update failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Carrier update failed.');
                    });
                } else {
                    $scope.isProcessing = true;
                    carrierService.createCarrier($scope.carrierForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Carrier has been created successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Carrier create failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Carrier create failed.');
                    });
                }
            });
        }


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.addPhoneNumber = function () {

            if ($scope.phoneCount == 0 || !$scope.phoneCount) {
                $scope.showphone2 = true;
            } else if ($scope.phoneCount == 3) {
                $scope.showphone3 = true;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.removePhoneNumber = function (num) {
            if (num == 2) {
                $scope.carrierForm.phone_2 = '';
                $scope.showphone2 = false;
            } else if (num == 3) {
                $scope.carrierForm.phone_3 = '';
                $scope.showphone3 = false;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.addAdmin = function () {

            if ($scope.adminCount == 0 || !$scope.adminCount) {
                $scope.showadmin2 = true;
            } else if ($scope.adminCount == 3) {
                $scope.showadmin3 = true;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
            /*console.log($scope.showadmin2 + ' | ' + $scope.showadmin3 + ' | ' + $scope.adminCount);*/
        };

        $scope.removeAdmin = function (num) {
            //alert(num);
            if (num == 2) {
                $scope.admin_2 = '';
                $scope.showadmin2 = false;
            } else if (num == 3) {
                $scope.admin_3 = '';
                $scope.showadmin3 = false;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
            /*console.log($scope.showadmin2 + ' | ' + $scope.showphone3 + ' | ' + $scope.adminCount);*/
        };


        $scope.addImage = function () {

            if ($scope.showimage1 == false) {
                $scope.showimage1 = true;
                $scope.carrierForm.file1 = false;
            } else if ($scope.showimage2 == false) {
                $scope.showimage2 = true;
                $scope.carrierForm.file2 = false;
            } else if ($scope.showimage3 == false) {
                $scope.showimage3 = true;
                $scope.carrierForm.file3 = false;
            }
        };

        $scope.removeImage = function (num) {
            if (angular.isUndefined($scope.carrierForm.contracts)) {
                $scope.carrierForm.contracts = {};
            }

            if (num == 1) {
                $scope.carrierForm.contract1 = '';
                $scope.carrierForm.file1 = true;
                if ($scope.carrierForm.contracts[0] !== undefined) {
                    $scope.carrierForm.contracts[0] = '';
                }
                $scope.showimage1 = false;
            } else if (num == 2) {
                $scope.carrierForm.contract2 = '';
                $scope.carrierForm.file2 = true;
                if ($scope.carrierForm.contracts[1] !== undefined) {
                    $scope.carrierForm.contracts[1] = '';
                }
                $scope.showimage2 = false;
            } else if (num == 3) {
                $scope.carrierForm.contract3 = '';
                $scope.carrierForm.file3 = true;
                if ($scope.carrierForm.contracts[2] !== undefined) {
                    $scope.carrierForm.contracts[2] = '';
                }
                $scope.showimage3 = false;
            }
        };

        $scope.getCountry = function () {
            carrierService.getState($scope.carrierForm.compCountry.code)
                .then(function success(response) {
                    $scope.stateArr = response.data.stateArr;
                }, function error() {
                });
        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////

        $scope.preve1 = false;
        $scope.preve2 = true;
        $scope.preve3 = false;

        $scope.tabs1 = true;

        $scope.tabPanal = function(tabNum) {
            if(tabNum == 1){
                //console.log('yyyy');
                $scope.tabs1 = true;
                $scope.tabs2 = false;

                $scope.preve1 = false;
                $scope.preve2 = true;
                $scope.preve3 = false;
            }

            else if(tabNum == 2){
                //console.log('xxxx');
                $scope.tabs1 = false;
                $scope.tabs2 = true;

                $scope.preve1 = true;
                $scope.preve2 = false;
                $scope.preve3 = true;
            }

        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////


    }


})();

/**
 * Created by gayani on 9/17/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").service('carrierService', [
        '$http', '$global', 'multipartForm', service
    ]);


    function service($http, $global, multipartForm) {

        return {
            getCarrierList: getCarrierList,
            getCarrierDetails : getCarrierDetails,
            createCarrier: createCarrier,
            updateCarrier: updateCarrier,
            getCountries: getCountries,
            getState: getState
        };

        function getCarrierList() {
            var carrierData = $http.post(
                $global.API_URL + 'api/platform/companies/list/',
                {
                    token: "12345671",
                    company_type: "CARRIER"
                }
            );

            return carrierData;
        }

        function getCarrierDetails(id){
            var carrierDetails = $http.post($global.API_URL + 'api/platform/companies/detail/', {
                vendorid: id
            });
            return carrierDetails;
        }

        function createCarrier(company) {
            company.companyType = 'CARRIER';
            company.country = JSON.stringify(company.compCountry);
            company.states = JSON.stringify(company.compState);
            return multipartForm.post($global.API_URL + 'api/platform/companies/create/', company);

        }

        function updateCarrier(company){
            return createCarrier(company);
        }

        function getCountries() {
            var countryCode = $http.post($global.API_URL + 'api/crm/country/',{});
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post($global.API_URL + 'api/crm/state/', {
                countryCode: countryCode
            });
            return stateCode;
        }

    }

})();
/**
 * Created by gayani on 9/17/15.
 */

/**
 * Created by yasith on 9/14/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").controller('daController', [
        '$scope', 'toastr', '$rootScope', '$modal', 'daService', controller
    ]);


    function controller($scope, toastr, $rootScope, $modal, daService) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 20;

        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };

        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.pageSize = 20;
        $scope.da = [];

        $scope.viewDa = viewDa;
        $scope.addDa = addDa;
        $scope.editDa = editDa;

        getDal(); // Load data first time.

        function getDal() {
            $rootScope.spinnerTrax = true;
            daService.getDaList().then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.da = response.data;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function viewDa(daID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/viewDaModal.html',
                controller: 'viewDAModalController',
                size: 'lg',
                resolve: {
                    daID: function () {
                        return daID;
                    }
                }
            });

        }

        function addDa() {
            formOpenModal()
        }

        function editDa(daID) {
            if (daID) {
                formOpenModal(daID)
            } else {
                toastr.error('DA ID!', 'Missing row id...');
            }
        }

        function formOpenModal(daID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/newDaModal.html',
                controller: 'formDaModalController',
                size: 'lg',
                resolve: {
                    daID: function () {
                        return daID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                getDal();
            });

        }


    }


    /**
     * VIEW MODAL
     * */
    angular.module('module.adminSettings').controller('viewDAModalController',
        ['$scope', '$global', '$modalInstance', 'daID', 'daService', '$rootScope','modalService', viewDAModalController]);
    function viewDAModalController($scope, $global, $modalInstance, daID, daService, $rootScope,modalService) {

        daService.getDaDetails(daID).then(function (response) {
            $scope.daForm = response.data.company;
            $scope.API_URL = $global.API_URL;

            for (var i = 0; i < $scope.daForm.admins.length; i++) {
                $scope.daForm['displayName' + (i + 1)] = $scope.daForm.admins[i]['displayName'];
                $scope.daForm['adminEmail' + (i + 1)] = $scope.daForm.admins[i]['email'];
            }
        }, function (error) {

        });

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };
    }


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.adminSettings').controller('formDaModalController',
        ['$scope', '$global', '$modalInstance', 'daID', 'daService', 'toastr', '$window','$rootScope','modalService', formDaModalController]);
    function formDaModalController($scope, $global, $modalInstance, daID, daService, toastr, $window,$rootScope,modalService) {

        $scope.pageStatus = daID ? 'EDIT' : 'CREATE';
        $scope.daForm = {};
        $scope.countryArr = {};
        $scope.stateArr = {};
        $scope.daForm.recordStatus = true;
        $scope.saveDa = daSave;
        $scope.title = "Create";
        $scope.showimage1 = true;
        $scope.showimage2 = false;
        $scope.showimage3 = false;

        daService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {
        });

        // Load data when retailer id is available (Edit mode)
        if ($scope.pageStatus === "EDIT") {
            $rootScope.spinnerTrax = true;
            daService.getDaDetails(daID).then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.daForm = response.data.company;
                $scope.daForm.state_id = $scope.daForm.recordStatus;
                $scope.title = "Edit";
                $scope.API_URL = $global.API_URL;
                $scope.stateArr = $scope.daForm.stateArr;
                $scope.daForm.compCountry = _.findWhere($scope.countryArr, {code: $scope.daForm.compCountry});
                $scope.daForm.compState = _.findWhere($scope.stateArr, {code: $scope.daForm.compState});

                //@TODO: Change API call to return same type of status
                if ($scope.daForm.recordStatus == "1") {
                    $scope.daForm.state_id = true;
                } else if ($scope.daForm.recordStatus == "2") {
                    $scope.daForm.state_id = false;
                }
                if ($scope.daForm.phone_2){
                    $scope.showphone2 = true;
                }
                if ($scope.daForm.phone_3) {
                    $scope.showphone3 = true;
                }

                $scope.showimage1 = true;
                if($scope.daForm.contracts[1]) {
                    $scope.showimage2 = true;
                }
                if($scope.daForm.contracts[2]) {
                    $scope.showimage3 = true;
                }

                for (var i = 0; i < $scope.daForm.admins.length; i++) {
                    $scope.daForm['displayName' + (i + 1)] = $scope.daForm.admins[i]['displayName'];
                    $scope.daForm['adminEmail' + (i + 1)] = $scope.daForm.admins[i]['email'];
                }
            }, function (error) {

            });
        }

        function daSave() {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {

                    $scope.daForm.record_status = $scope.daForm.state_id;
                    //@TODO:
                    if ($scope.daForm.state_id) {
                        $scope.daForm.record_status = "1";
                    } else {
                        $scope.daForm.record_status = "2";
                    }
                    $scope.isProcessing = true;
                    daService.updateDa($scope.daForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('DA has been updated successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'DA update failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'DA update failed.');
                    });
                } else {
                    $scope.isProcessing = true;
                    daService.createDa($scope.daForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('DA has been created successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'DA create failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'DA create failed.');
                    });
                }
            });
        }


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.addPhoneNumber = function () {

            if ($scope.phoneCount == 0 || !$scope.phoneCount) {
                $scope.showphone2 = true;
            } else if ($scope.phoneCount == 3) {
                $scope.showphone3 = true;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
            /*console.log($scope.showphone2 + ' | ' + $scope.showphone3 + ' | ' + $scope.phoneCount);*/
        };

        $scope.removePhoneNumber = function (num) {
            if (num == 2) {
                $scope.newDa.phone_2 = '';
                $scope.showphone2 = false;
            } else if (num == 3) {
                $scope.newDa.phone_3 = '';
                $scope.showphone3 = false;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
            /*console.log($scope.showphone2 + ' | ' + $scope.showphone3 + ' | ' + $scope.phoneCount);*/
        };

        $scope.addAdmin = function () {

            if ($scope.adminCount == 0 || !$scope.adminCount) {
                $scope.showadmin2 = true;
            } else if ($scope.adminCount == 3) {
                $scope.showadmin3 = true;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
            /*console.log($scope.showphone2 + ' | ' + $scope.showphone3 + ' | ' + $scope.phoneCount);*/
        };

        $scope.removeAdmin = function (num) {
            if (num == 2) {
                $scope.daForm.admin_2 = '';
                $scope.showadmin2 = false;
            } else if (num == 3) {
                $scope.daForm.admin_3 = '';
                $scope.showadmin3 = false;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
            /*console.log($scope.showphone2 + ' | ' + $scope.showphone3 + ' | ' + $scope.phoneCount);*/
        };

        $scope.addImage = function () {

            if ($scope.showimage1 == false) {
                $scope.showimage1 = true;
                $scope.daForm.file1 = false;
            } else if ($scope.showimage2 == false) {
                $scope.showimage2 = true;
                $scope.daForm.file2 = false;
            } else if ($scope.showimage3 == false) {
                $scope.showimage3 = true;
                $scope.daForm.file3 = false;
            }
        };

        $scope.removeImage = function (num) {

            if (angular.isUndefined($scope.daForm.contracts)) {
                $scope.daForm.contracts = {};
            }

            if (num == 1) {
                $scope.daForm.contract1 = '';
                $scope.daForm.file1 = true;
                if ($scope.daForm.contracts[0] !== undefined) {
                    $scope.daForm.contracts[0] = '';
                }
                $scope.showimage1 = false;
            } else if (num == 2) {
                $scope.daForm.contract2 = '';
                $scope.daForm.file2 = true;
                if ($scope.daForm.contracts[1] !== undefined) {
                    $scope.daForm.contracts[1] = '';
                }
                $scope.showimage2 = false;
            } else if (num == 3) {
                $scope.daForm.contract3 = '';
                $scope.daForm.file3 = true;
                if ($scope.daForm.contracts[2] !== undefined) {
                    $scope.daForm.contracts[2] = '';
                }
                $scope.showimage3 = false;
            }
        };

        daService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {
        });

        $scope.getCountry = function () {
            daService.getState($scope.daForm.compCountry.code)
                .then(function success(response) {
                    $scope.stateArr = response.data.stateArr;
                }, function error() {
                });
        };



///////////////////////////////////// tab panel ///////////////////////////////////////////////////

        $scope.preve1 = false;
        $scope.preve2 = true;
        $scope.preve3 = false;
        $scope.preve4 = false;
        $scope.preve5 = false;

        $scope.tabs1 = true;

        $scope.tabPanal = function(tabNum) {
            if(tabNum == 1){
                //console.log('yyyy');
                $scope.tabs1 = true;
                $scope.tabs2 = false;
                $scope.tabs3 = false;

                $scope.preve1 = false;
                $scope.preve2 = true;
                $scope.preve3 = false;
                $scope.preve4 = false;
                $scope.preve5 = false;
            }

            else if(tabNum == 2){
                //console.log('xxxx');
                $scope.tabs1 = false;
                $scope.tabs2 = true;
                $scope.tabs3 = false;

                $scope.preve1 = true;
                $scope.preve2 = false;
                $scope.preve3 = false;
                $scope.preve4 = true;
                $scope.preve5 = false;
            }

            else if(tabNum == 3){
                $scope.tabs1 = false;
                $scope.tabs2 = false;
                $scope.tabs3 = true;

                $scope.preve1 = false;
                $scope.preve2 = false;
                $scope.preve3 = true;
                $scope.preve4 = false;
                $scope.preve5 = true;
            }
        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////



    }


})();












///////////////////////////////////////






/**
 * Created by gayani on 9/17/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").service('daService', [
        '$http', '$global', 'multipartForm', service
    ]);


    function service($http, $global, multipartForm) {

        return {
            getDaList: getDaList,
            getDaDetails : getDaDetails,
            createDa: createDa,
            updateDa:updateDa,
            getValidationList: getValidationList,
            getCountries: getCountries,
            getState: getState
        };

        function getDaList() {
            var daData = $http.post(
                $global.API_URL + 'api/platform/companies/list/',
                {
                    token: "1234567",
                    company_type: "DA"
                }
            );
            return daData;
        }

        function getDaDetails(id){

            var daDetails = $http.post($global.API_URL + 'api/platform/companies/detail/', {
                vendorid: id
            });
            return daDetails;
        }

        function createDa(company) {
            company.companyType = 'DA';
            company.country = JSON.stringify(company.compCountry);
            company.states = JSON.stringify(company.compState);
            return multipartForm.post($global.API_URL + 'api/platform/companies/create/', company);
        }

        function updateDa(company){
            return createDa(company);
        }

        function getValidationList() {
            var daData = $http.post(
                $global.API_URL + 'api/platform/companies/validate/',
                {
                    company_type: "DA"
                }
            );
            return daData;
        }

        function getCountries() {
            var countryCode = $http.post($global.API_URL + 'api/crm/country/',{});
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post($global.API_URL + 'api/crm/state/', {
                countryCode: countryCode
            });
            return stateCode;
        }


    }

})();
/**
 * Created by yasith on 10/25/15.
 */
(function () {
    'use strict';

    angular.module("module.adminSettings").controller('medicController', [
        '$scope', 'toastr', '$rootScope', '$modal', 'medicService', controller
    ]);

    function controller($scope, toastr, $rootScope, $modal, medicService) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 20;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.addMedic = addMedic;
        $scope.editMedic = editMedic;
        $scope.viewMedic = viewMedic;
        $scope.pageSize = 20;
        $scope.medicList = {};

        getRl(); // Load data first time.

        function getRl() {
            $rootScope.spinnerTrax = true;
            medicService.getMedicList().then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.medicList = response.data;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function addMedic() {
            formOpenModal()
        }

        function editMedic(medicID) {
            if (medicID) {
                formOpenModal(medicID)
            } else {
                toastr.error('Medic ID!', 'Missing row id...');
            }
        }

        function formOpenModal(medicID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/newMedicModal.html',
                controller: 'MedicModalController',
                size: 'lg',
                resolve: {
                    medicID: function () {
                        return medicID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                getRl();
                /*if(result.newMedic) {
                 $scope.medicList.retailers.unshift(result.newMedic.new_company);
                 }*/

            });

        }

        /*view modal*/
        function viewMedic(medicID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/viewMedicModal.html',
                controller: 'viewMedicModalController',
                size: 'lg',
                resolve: {
                    medicID: function () {
                        return medicID;
                    }
                }
            });

        }

    } //end main controller

    /**
     * VIEW MODAL
     * */
    angular.module('module.adminSettings').controller('viewMedicModalController',
        ['$scope', '$global', '$modalInstance', 'medicID', 'medicService', '$rootScope', 'modalService', viewMedicModalController]);
    function viewMedicModalController($scope, $global, $modalInstance, medicID, medicService, $rootScope, modalService) {

        medicService.getMedicDetails(medicID).then(function (response) {
            $scope.medicForm = response.data.company;
            $scope.API_URL = $global.API_URL;

            /* for (var i = 0; i < $scope.medicForm.admins.length; i++) {
             $scope.medicForm['displayName' + (i + 1)] = $scope.medicForm.admins[i]['displayName'];
             $scope.medicForm['adminEmail' + (i + 1)] = $scope.medicForm.admins[i]['email'];
             }*/
        }, function (error) {

        });

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };
    }


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.adminSettings').controller('MedicModalController',
        ['$scope', '$global', '$modalInstance', 'medicID', 'medicService', 'toastr', '$window', '$rootScope', 'modalService', MedicModalController]);
    function MedicModalController($scope, $global, $modalInstance, medicID, medicService, toastr, $window, $rootScope, modalService) {

        $scope.pageStatus = medicID ? 'EDIT' : 'CREATE';
        $scope.title = "Create";
        $scope.medicForm = {};
        $scope.medicForm.recordStatus = true;
        $scope.saveMedic = saveMedic;
        $scope.countryArr = {};
        $scope.stateArr = {};

        $scope.showimage1 = true;
        $scope.showimage2 = false;
        $scope.showimage3 = false;

        medicService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {
        });

        //Load data when retailer id is available (Edit mode)
        if ($scope.pageStatus === "EDIT") {
            medicService.getMedicDetails(medicID).then(function (response) {
                $scope.medicForm = response.data.company;
                $scope.medicForm.state_id = $scope.medicForm.recordStatus;
                $scope.medicForm.state_id = $scope.medicForm.recordStatus;
                $scope.title = "Edit";
                $scope.API_URL = $global.API_URL;
                $scope.stateArr = $scope.medicForm.stateArr;
                $scope.medicForm.compCountry = _.findWhere($scope.countryArr, {code: $scope.medicForm.compCountry});
                $scope.medicForm.compState = _.findWhere($scope.stateArr, {code: $scope.medicForm.compState});

                //@TODO: Change API call to return same type of status
                if ($scope.medicForm.recordStatus == "1") {
                    $scope.medicForm.recordStatus = true;
                } else if ($scope.medicForm.recordStatus == "2") {
                    $scope.medicForm.recordStatus = false;
                }

                if ($scope.medicForm.phone2) {
                    $scope.showphone2 = true;
                }
                if ($scope.medicForm.phone3) {
                    $scope.showphone3 = true;
                }

                $scope.showimage1 = true;
                if ($scope.medicForm.contracts[1]) {
                    $scope.showimage2 = true;
                }
                if ($scope.medicForm.contracts[2]) {
                    $scope.showimage3 = true;
                }
            }, function (error) {

            });
        }

        function saveMedic() {
            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === 'EDIT') {
                    $scope.medicForm.recordStatus = $scope.medicForm.state_id;
                    //@TODO:
                    if ($scope.medicForm.state_id) {
                        $scope.medicForm.recordStatus = "1";
                    } else {
                        $scope.medicForm.recordStatus = "2";
                    }
                    $scope.isProcessing = true;
                    medicService.updateMedic($scope.medicForm).then(function success(response) {

                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Medic has been updated successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Medic update failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Medic update failed.');
                    });
                }

                else {
                    $scope.isProcessing = true;
                    medicService.createMedic($scope.medicForm).then(function success(response) {
                            if (response.data.name_validate == false) { //check name is exist
                                $scope.isNameExist = true;
                                $scope.isProcessing = false;
                                $scope.tabs1 = true;
                                $scope.tabs2 = false;
                                $scope.tabs3 = false;

                                $scope.preve1 = false;
                                $scope.preve2 = true;
                                $scope.preve3 = false;
                                $scope.preve4 = false;
                                $scope.preve5 = false;
                                toastr.error('ERROR!', 'Name is already in the system.');
                            }
                            else if (response.data.state == 'error') {
                                $scope.isProcessing = false;
                                $scope.isEmailExist = response.data.type;
                                toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                                $scope.tabs1 = false;
                                $scope.tabs2 = true;
                                $scope.tabs3 = false;

                                $scope.preve1 = true;
                                $scope.preve2 = false;
                                $scope.preve3 = false;
                                $scope.preve4 = true;
                                $scope.preve5 = false;
                            }
                            else {
                                if (response.data.status_message) {
                                    $modalInstance.close();
                                    toastr.success('Medic has been created successfully.');
                                } else {
                                    if (response.data.type) {
                                        toastr.error('ERROR!', response.data.type);
                                    } else {
                                        toastr.error('ERROR!', 'Medic create failed.');
                                    }
                                }
                            }
                        },
                        function error(error) {
                            toastr.error('ERROR!', 'Medic create failed.');
                        });
                }
            });
        }


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.addPhoneNumber = function () {
            if ($scope.phoneCount == 0 || !$scope.phoneCount) {
                $scope.showphone2 = true;
            } else if ($scope.phoneCount == 3) {
                $scope.showphone3 = true;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
            //   console.log($scope.showphone2 + ' | ' + $scope.showphone3 + ' | ' + $scope.phoneCount);
        };

        $scope.removePhoneNumber = function (num) {
            if (num == 2) {
                $scope.medicForm.phone_2 = '';
                $scope.showphone2 = false;
            } else if (num == 3) {
                $scope.medicForm.phone_3 = '';
                $scope.showphone3 = false;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.addAdmin = function () {

            if ($scope.adminCount == 0 || !$scope.adminCount) {
                $scope.showadmin2 = true;
            } else if ($scope.adminCount == 3) {
                $scope.showadmin3 = true;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
            /*console.log($scope.showadmin2 + ' | ' + $scope.showadmin3 + ' | ' + $scope.adminCount);*/
        };

        $scope.removeAdmin = function (num) {
            //alert(num);
            if (num == 2) {
                $scope.admin_2 = '';
                $scope.showadmin2 = false;
            } else if (num == 3) {
                $scope.admin_3 = '';
                $scope.showadmin3 = false;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
            /*console.log($scope.showadmin2 + ' | ' + $scope.showphone3 + ' | ' + $scope.adminCount);*/
        };

        $scope.addImage = function () {
            if ($scope.showimage1 == false) {
                $scope.showimage1 = true;
                $scope.medicForm.file1 = false;
            } else if ($scope.showimage2 == false) {
                $scope.showimage2 = true;
                $scope.medicForm.file2 = false;
            } else if ($scope.showimage3 == false) {
                $scope.showimage3 = true;
                $scope.medicForm.file3 = false;
            }
        };

        $scope.removeImage = function (num) {

            if (angular.isUndefined($scope.medicForm.contracts)) {
                $scope.medicForm.contracts = {};
            }

            if (num == 1) {
                $scope.medicForm.contract1 = '';
                $scope.medicForm.file1 = true;
                if ($scope.medicForm.contracts[0] !== undefined) {
                    $scope.medicForm.contracts[0] = '';
                }
                $scope.showimage1 = false;
            } else if (num == 2) {
                $scope.medicForm.contract2 = '';
                $scope.medicForm.file2 = true;
                if ($scope.medicForm.contracts[1] !== undefined) {
                    $scope.medicForm.contracts[1] = '';
                }
                $scope.showimage2 = false;
            } else if (num == 3) {
                $scope.medicForm.contract3 = '';
                $scope.medicForm.file3 = true;
                if ($scope.medicForm.contracts[2] !== undefined) {
                    $scope.medicForm.contracts[2] = '';
                }
                $scope.showimage3 = false;
            }

        };


        $scope.getCountry = function () {
            medicService.getState($scope.medicForm.compCountry.code)
                .then(function success(response) {
                    $scope.stateArr = response.data.stateArr;
                }, function error() {
                });
        };


///////////////////////////////////// tab panel ///////////////////////////////////////////////////

        $scope.preve1 = false;
        $scope.preve2 = true;
        $scope.preve3 = false;

        $scope.tabs1 = true;

        $scope.tabPanal = function (tabNum) {
            if (tabNum == 1) {
                //console.log('yyyy');
                $scope.tabs1 = true;
                $scope.tabs2 = false;

                $scope.preve1 = false;
                $scope.preve2 = true;
                $scope.preve3 = false;
            }

            else if (tabNum == 2) {
                //console.log('xxxx');
                $scope.tabs1 = false;
                $scope.tabs2 = true;

                $scope.preve1 = true;
                $scope.preve2 = false;
                $scope.preve3 = true;
            }

        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////

    }


})();
/**
 * Created by yasith on 10/25/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").service('medicService', [
        '$http', '$global', 'multipartForm', service
    ]);

    function service($http, $global, multipartForm) {

        return {
            createMedic: createMedic,
            getMedicList: getMedicList,
            getMedicDetails: getMedicDetails,
            updateMedic: updateMedic,
            getCountries: getCountries,
            getState: getState

        };

        function createMedic(company) {
            company.companyType = 'MEDIC';
            company.country = JSON.stringify(company.compCountry);
            company.states = JSON.stringify(company.compState);
            return multipartForm.post($global.API_URL + 'api/platform/companies/create/', company);
        }

        function updateMedic(company){
            return createMedic(company);
        }

        function getMedicList() {
            var medicData = $http.post(
                $global.API_URL + 'api/platform/companies/list/',
                {
                    token: "1234567",
                    company_type: "MEDIC"
                }
            );
            return medicData;
        }

        function getMedicDetails(id){
            var medicDetails = $http.post($global.API_URL + 'api/platform/companies/detail/', {
                vendorid: id
            });
            return medicDetails;
        }

        function getCountries() {
            var countryCode = $http.post($global.API_URL + 'api/crm/country/',{});
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post($global.API_URL + 'api/crm/state/', {
                countryCode: countryCode
            });
            return stateCode;
        }

    }

})();
/**
 * Created by yasith on 9/14/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").controller('retailerController', [
        '$scope', 'toastr', '$rootScope', '$modal', 'retailerService', controller
    ]);


    function controller($scope, toastr, $rootScope, $modal, retailerService) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 20;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };

        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.pageSize = 20;
        $scope.retailer = [];

        $scope.viewRetailer = viewRetailer;
        $scope.addRetailer = addRetailer;
        $scope.editRetailer = editRetailer;

        getRl(); // Load data first time.

        function getRl() {
            $rootScope.spinnerTrax = true;
            retailerService.getRetailerList().then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.retailer = response.data;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function viewRetailer(retailerID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/viewRetailerModal.html',
                controller: 'viewRetailerModalController',
                size: 'lg',
                resolve: {
                    retailerID: function () {
                        return retailerID;
                    }
                }
            });

        }

        function addRetailer() {
            formOpenModal()
        }

        function editRetailer(retailerID) {
            if (retailerID) {
                formOpenModal(retailerID)
            } else {
                toastr.error('Retailer ID!', 'Missing row id...');
            }
        }

        function formOpenModal(retailerID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/newReatailerModal.html',
                controller: 'formRetailerModalController',
                size: 'lg',
                resolve: {
                    retailerID: function () {
                        return retailerID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                getRl();
            });

        }

    }


    /**
     * VIEW MODAL
     * */
    angular.module('module.adminSettings').controller('viewRetailerModalController',
        ['modalService', '$scope', '$global', '$modalInstance', 'retailerID', 'retailerService', '$rootScope', viewRetailerModalController]);
    function viewRetailerModalController(modalService, $scope, $global, $modalInstance, retailerID, retailerService, $rootScope) {

        retailerService.getRetailerDetails(retailerID).then(function (response) {
            $scope.retailerForm = response.data.company;
            $scope.API_URL = $global.API_URL;

            for (var i = 0; i < $scope.retailerForm.admins.length; i++) {
                $scope.retailerForm['displayName' + (i + 1)] = $scope.retailerForm.admins[i]['displayName'];
                $scope.retailerForm['adminEmail' + (i + 1)] = $scope.retailerForm.admins[i]['email'];
            }
        }, function (error) {

        });

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };
    }


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.adminSettings').controller('formRetailerModalController',
        ['$scope', '$global', '$modalInstance', 'retailerID', 'retailerService', 'toastr', '$window', '$rootScope', 'modalService', formRetailerModalController]);
    function formRetailerModalController($scope, $global, $modalInstance, retailerID, retailerService, toastr, $window, $rootScope, modalService) {

        $scope.pageStatus = retailerID ? 'EDIT' : 'CREATE';
        $scope.retailerForm = {};
        $scope.countryArr = {};
        $scope.stateArr = {};
        $scope.retailerForm.recordStatus = true;
        $scope.save = retailerSave;
        $scope.showimage1 = true;
        $scope.showimage2 = false;
        $scope.showimage3 = false;

        retailerService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {
        });
        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Retailer";
            $scope.buttonLabel = "Update";
        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Retailer";
            $scope.buttonLabel = "Create";
        }
        //$rootScope.spinnerTrax = true;
        //Load data when retailer id is available (Edit mode)
        if ($scope.pageStatus === "EDIT") {
            retailerService.getRetailerDetails(retailerID).then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.retailerForm = response.data.company;
                $scope.stateArr = $scope.retailerForm.stateArr;
                $scope.retailerForm.compCountry = _.findWhere($scope.countryArr, {code: $scope.retailerForm.compCountry});
                $scope.retailerForm.compState = _.findWhere($scope.stateArr, {code: $scope.retailerForm.compState});
                $scope.retailerForm.state_id = $scope.retailerForm.recordStatus;
                $scope.API_URL = $global.API_URL;

                //@TODO: Change API call to return same type of status
                if ($scope.retailerForm.recordStatus == "1") {
                    $scope.retailerForm.state_id = true;
                } else if ($scope.retailerForm.recordStatus == "2") {
                    $scope.retailerForm.state_id = false;
                }
                if ($scope.retailerForm.phone_2) {
                    $scope.showphone2 = true;
                }
                if ($scope.retailerForm.phone_3) {
                    $scope.showphone3 = true;
                }

                $scope.showimage1 = true;
                if ($scope.retailerForm.contracts[1]) {
                    $scope.showimage2 = true;
                }
                if ($scope.retailerForm.contracts[2]) {
                    $scope.showimage3 = true;
                }
                for (var i = 0; i < $scope.retailerForm.admins.length; i++) {
                    $scope.retailerForm['displayName' + (i + 1)] = $scope.retailerForm.admins[i]['displayName'];
                    $scope.retailerForm['adminEmail' + (i + 1)] = $scope.retailerForm.admins[i]['email'];
                }
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function retailerSave() {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    $scope.retailerForm.record_status = $scope.retailerForm.state_id;
                    //@TODO:
                    if ($scope.retailerForm.state_id) {
                        $scope.retailerForm.record_status = "1";
                    } else {
                        $scope.retailerForm.record_status = "2";
                    }
                    $scope.isProcessing = true;
                    retailerService.updateRetailer($scope.retailerForm).then(function success(response) {

                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Retailer has been updated successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Retailer update failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Retailer update failed.');
                    });
                } else {
                    $scope.isProcessing = true;
                    retailerService.createRetailer($scope.retailerForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Retailer has been created successfully.');
                            } else {
                                if (response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Retailer create failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Retailer create failed.');
                    });
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.addPhoneNumber = function () {
            if ($scope.phoneCount == 0 || !$scope.phoneCount) {
                $scope.showphone2 = true;
            } else if ($scope.phoneCount == 3) {
                $scope.showphone3 = true;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.removePhoneNumber = function (num) {
            if (num == 2) {
                $scope.retailerForm.phone_2 = '';
                $scope.showphone2 = false;
            } else if (num == 3) {
                $scope.retailerForm.phone_3 = '';
                $scope.showphone3 = false;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.addAdmin = function () {
            if ($scope.adminCount == 0 || !$scope.adminCount) {
                $scope.showadmin2 = true;
            } else if ($scope.adminCount == 3) {
                $scope.showadmin3 = true;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
        };

        $scope.removeAdmin = function (num) {
            if (num == 2) {
                $scope.retailerForm.phone_2 = '';
                $scope.showadmin2 = false;
            } else if (num == 3) {
                $scope.retailerForm.admin_3 = '';
                $scope.showadmin3 = false;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
        };

        $scope.addImage = function () {
            if ($scope.showimage1 == false) {
                $scope.showimage1 = true;
                $scope.retailerForm.file1 = false;
            } else if ($scope.showimage2 == false) {
                $scope.showimage2 = true;
                $scope.retailerForm.file2 = false;
            } else if ($scope.showimage3 == false) {
                $scope.showimage3 = true;
                $scope.retailerForm.file3 = false;
            }
        };

        $scope.removeImage = function (num) {

            if (angular.isUndefined($scope.retailerForm.contracts)) {
                $scope.retailerForm.contracts = {};
            }

            if (num == 1) {
                $scope.retailerForm.contract1 = '';
                $scope.retailerForm.file1 = true;
                if ($scope.retailerForm.contracts[0] !== undefined) {
                    $scope.retailerForm.contracts[0] = '';
                }
                $scope.showimage1 = false;
            } else if (num == 2) {
                $scope.retailerForm.contract2 = '';
                $scope.retailerForm.file2 = true;
                if ($scope.retailerForm.contracts[1] !== undefined) {
                    $scope.retailerForm.contracts[1] = '';
                }
                $scope.showimage2 = false;
            } else if (num == 3) {
                $scope.retailerForm.contract3 = '';
                $scope.retailerForm.file3 = true;
                if ($scope.retailerForm.contracts[2] !== undefined) {
                    $scope.retailerForm.contracts[2] = '';
                }
                $scope.showimage3 = false;
            }

        }


        $scope.getCountry = function () {
            retailerService.getState($scope.retailerForm.compCountry.code)
                .then(function success(response) {
                    $scope.stateArr = response.data.stateArr;
                }, function error() {
                });
        };


///////////////////////////////////// tab panel ///////////////////////////////////////////////////

        $scope.preve1 = false;
        $scope.preve2 = true;
        $scope.preve3 = false;
        $scope.preve4 = false;
        $scope.preve5 = false;

        $scope.tabs1 = true;

        $scope.tabPanal = function (tabNum) {
            if (tabNum == 1) {
                //console.log('yyyy');
                $scope.tabs1 = true;
                $scope.tabs2 = false;
                $scope.tabs3 = false;

                $scope.preve1 = false;
                $scope.preve2 = true;
                $scope.preve3 = false;
                $scope.preve4 = false;
                $scope.preve5 = false;
            }

            else if (tabNum == 2) {
                //console.log('xxxx');
                $scope.tabs1 = false;
                $scope.tabs2 = true;
                $scope.tabs3 = false;

                $scope.preve1 = true;
                $scope.preve2 = false;
                $scope.preve3 = false;
                $scope.preve4 = true;
                $scope.preve5 = false;
            }

            else if (tabNum == 3) {
                $scope.tabs1 = false;
                $scope.tabs2 = false;
                $scope.tabs3 = true;

                $scope.preve1 = false;
                $scope.preve2 = false;
                $scope.preve3 = true;
                $scope.preve4 = false;
                $scope.preve5 = true;
            }
        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////


    }


})();

/**
 * Created by yasith on 9/14/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").service('retailerService', [
        '$http', '$global', 'multipartForm', service
    ]);

    function service($http, $global, multipartForm) {

        return {
            getRetailerList: getRetailerList,
            createRetailer: createRetailer,
            updateRetailer: updateRetailer,
            getRetailerDetails:getRetailerDetails,
            getCountries: getCountries,
            getState: getState
        };

        function getRetailerList() {

            var retailerData = $http.post(
                $global.API_URL + 'api/platform/companies/list/',
                {
                    token: "1234567",
                    company_type: "RETAILER"
                }
            );
            return retailerData;
        }

        function createRetailer(company) {
            company.companyType = 'RETAILER';
            company.country = JSON.stringify(company.compCountry);
            company.states = JSON.stringify(company.compState);
           return multipartForm.post($global.API_URL + 'api/platform/companies/create/', company);
        }

        function updateRetailer(company){
            return createRetailer(company);
        }

        function getRetailerDetails(id){
            var retailerDetails = $http.post($global.API_URL + 'api/platform/companies/detail/', {
                vendorid: id
            });
            return retailerDetails;
        }

        function getCountries() {
            var countryCode = $http.post($global.API_URL + 'api/crm/country/',{});
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post($global.API_URL + 'api/crm/state/', {
                countryCode: countryCode
            });
            return stateCode;
        }

    }

})();
/**
 * Created by gayani on 9/16/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").controller('vendorController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'vendorService', '$window', controller
    ]);


    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, vendorService, $window) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 20;

        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };

        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.pageSize = 20;
        $scope.vendor = [];

        $scope.viewVendor = viewVendor;
        $scope.addVendor = addVendor;
        $scope.editVendor = editVendor;

        getRl(); // Load data first time.

        function getRl() {
            $rootScope.spinnerTrax = true;
            vendorService.getVendorList().then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.vendor = response.data;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function viewVendor(vendorID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/viewVendorModal.html',
                controller: 'viewVendorModalController',
                size: 'lg',
                resolve: {
                    vendorID: function () {
                        return vendorID;
                    }
                }
            });

        }

        function addVendor() {
            formOpenModal()
        }

        function editVendor(vendorID) {
            if (vendorID) {
                formOpenModal(vendorID)
            } else {
                toastr.error('Vendor ID!', 'Missing row id...');
            }
        }

        function formOpenModal(vendorID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/newVendorModal.html',
                controller: 'formVendorModalController',
                size: 'lg',
                resolve: {
                    vendorID: function () {
                        return vendorID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                getRl();
            });

        }//

    }//end of controller

    /**
     * VIEW MODAL
     * */
    angular.module('module.adminSettings').controller('viewVendorModalController',
        ['$scope', '$global', '$modalInstance', 'vendorID', 'vendorService','$rootScope', viewVendorModalController]);
    function viewVendorModalController($scope, $global, $modalInstance, vendorID, vendorService,$rootScope) {

        vendorService.getVendorDetails(vendorID).then(function (response) {
            $scope.vendorForm = response.data.company;
            $scope.API_URL = $global.API_URL;
            if ($scope.vendorForm.admins) {
                for (var i = 0; i < $scope.vendorForm.admins.length; i++) {
                    $scope.vendorForm['displayName' + (i + 1)] = $scope.vendorForm.admins[i]['displayName'];
                    $scope.vendorForm['adminEmail' + (i + 1)] = $scope.vendorForm.admins[i]['email'];
                }
            }
        }, function (error) {

        });

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }

    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.adminSettings').controller('formVendorModalController',
        ['$scope', '$global', '$modalInstance', 'vendorID', 'vendorService', 'toastr', '$window','$rootScope','modalService', formVendorModalController]);
    function formVendorModalController($scope, $global, $modalInstance, vendorID, vendorService, toastr, $window,$rootScope,modalService) {

        $scope.pageStatus = vendorID ? 'EDIT' : 'CREATE';
        $scope.vendorForm = {};
        $scope.countryArr = {};
        $scope.stateArr = {};
        $scope.vendorForm.recordStatus = true;
        $scope.save = vendorSave;
        $scope.retailersX = {};
        $scope.showimage1 = true;
        $scope.showimage2 = false;
        $scope.showimage3 = false;

        vendorService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {
        });
        vendorService.getRetailerList().then(function(response) {
            $scope.retailersX = response.data.retailers;
            }, function (error) {
        });

         // Load data when vendor id is available (Edit mode)
        if($scope.pageStatus == "EDIT")
        {
            $scope.modalTitle = "Edit Vendor";
            $scope.buttonLabel = "Update";
        }
        else if($scope.pageStatus == "CREATE"){
            $scope.modalTitle = "Create Vendor";
            $scope.buttonLabel = "Create";
        }

         // Load data when vendor id is available (Edit mode)
        if ($scope.pageStatus === "EDIT") {
            vendorService.getVendorDetails(vendorID).then(function (response) {
                $scope.vendorForm = response.data.company;
                $scope.vendorForm.state_id = $scope.vendorForm.recordStatus;
                $scope.title = "Edit";
                $scope.API_URL = $global.API_URL;
                $scope.stateArr = $scope.vendorForm.stateArr;
                $scope.vendorForm.compCountry = _.findWhere($scope.countryArr, {code: $scope.vendorForm.compCountry});
                $scope.vendorForm.compState = _.findWhere($scope.stateArr, {code: $scope.vendorForm.compState});
                $scope.vendorForm.retailersId = _.findWhere($scope.retailers, {code: $scope.vendorForm.retailersMap});

                var xSelectedRets = [];
                _.each($scope.vendorForm.retailersMap,function(v){
                    xSelectedRets.push(Number(v.id));
                });
                $scope.vendorForm.retailersMap = xSelectedRets;

                //@TODO: Change API call to return same type of status
                if ($scope.vendorForm.recordStatus == "1") {
                    $scope.vendorForm.state_id = true;
                } else if ($scope.vendorForm.recordStatus == "2") {
                    $scope.vendorForm.state_id = false;
                }

                if ($scope.vendorForm.phone_2){
                    $scope.showphone2 = true;
                }

                if ($scope.vendorForm.phone_3) {
                    $scope.showphone3 = true;
                }

                $scope.showimage1 = true;
                if($scope.vendorForm.contracts[1]) {
                    $scope.showimage2 = true;
                }
                if($scope.vendorForm.contracts[2]) {
                    $scope.showimage3 = true;
                }

                if($scope.vendorForm.admins) {
                    for (var i = 0; i < $scope.vendorForm.admins.length; i++) {
                        $scope.vendorForm['displayName' + (i + 1)] = $scope.vendorForm.admins[i]['displayName'];
                        $scope.vendorForm['adminEmail' + (i + 1)] = $scope.vendorForm.admins[i]['email'];
                    }
                }
            }, function (error) {

            });
        } else {
            /*vendorService.getRetailerList().then(function(response) {
                $scope.retailers = response.data.retailers;
            }, function (error) {

            });*/
        }

        function vendorSave(form) {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {

                    $scope.vendorForm.record_status = $scope.vendorForm.state_id;
                    //@TODO:
                    if ($scope.vendorForm.state_id) {
                        $scope.vendorForm.record_status = "1";
                    } else {
                        $scope.vendorForm.record_status = "2";
                    }
                    $scope.isProcessing = true;
                    vendorService.updateVendor($scope.vendorForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;
                            $scope.tabs4 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            $scope.preve6 = false;
                            $scope.preve7 = false;
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;
                            $scope.tabs4 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                            $scope.preve6 = false;
                            $scope.preve7 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Vendor has been updated successfully.');
                            } else {
                                if(response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Vendor update failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Vendor update failed.');
                    });
                } else {
                    $scope.isProcessing = true;
                    console.log($scope.vendorForm);
                    vendorService.createVendor($scope.vendorForm).then(function success(response) {
                        if (response.data.name_validate == false) { //check name is exist
                            $scope.isNameExist = true;
                            $scope.isProcessing = false;
                            toastr.error('ERROR!', 'Name is already in the system.');
                            $scope.tabs1 = true;
                            $scope.tabs2 = false;
                            $scope.tabs3 = false;
                            $scope.tabs4 = false;

                            $scope.preve1 = false;
                            $scope.preve2 = true;
                            $scope.preve3 = false;
                            $scope.preve4 = false;
                            $scope.preve5 = false;
                            $scope.preve6 = false;
                            $scope.preve7 = false;
                        }
                        else if (response.data.state == 'error') {
                            $scope.isProcessing = false;
                            $scope.isEmailExist = response.data.type;
                            toastr.error('ERROR!', 'Admin Access Email address is already in the system.');
                            $scope.tabs1 = false;
                            $scope.tabs2 = true;
                            $scope.tabs3 = false;
                            $scope.tabs4 = false;

                            $scope.preve1 = true;
                            $scope.preve2 = false;
                            $scope.preve3 = false;
                            $scope.preve4 = true;
                            $scope.preve5 = false;
                            $scope.preve6 = false;
                            $scope.preve7 = false;
                        }
                        else {
                            if (response.data.status_message) {
                                $modalInstance.close();
                                toastr.success('Vendor has been created successfully.');
                            } else {
                                if(response.data.type) {
                                    toastr.error('ERROR!', response.data.type);
                                } else {
                                    toastr.error('ERROR!', 'Vendor create failed.');
                                }
                            }
                        }
                    }, function error(error) {
                        toastr.error('ERROR!', 'Vendor create failed.');
                    });
                }
            });
            //}
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.addPhoneNumber = function () {

            if ($scope.phoneCount == 0 || !$scope.phoneCount) {
                $scope.showphone2 = true;
            } else if ($scope.phoneCount == 3) {
                $scope.showphone3 = true;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.removePhoneNumber = function (num) {
            if (num == 2) {
                $scope.vendorForm.phone_2 = '';
                $scope.showphone2 = false;
            } else if (num == 3) {
                $scope.vendorForm.phone_3 = '';
                $scope.showphone3 = false;
            }
            if ($scope.showphone2 == false && $scope.showphone3 == false) {
                $scope.phoneCount = 0;
            } else {
                $scope.phoneCount = 3;
            }
        };

        $scope.addAdmin = function () {

            if ($scope.adminCount == 0 || !$scope.adminCount) {
                $scope.showadmin2 = true;
            } else if ($scope.adminCount == 3) {
                $scope.showadmin3 = true;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
        };

        $scope.removeAdmin = function (num) {
            //alert(num);
            if (num == 2) {
                $scope.vendorForm.admin_2 = '';
                $scope.showadmin2 = false;
            } else if (num == 3) {
                $scope.vendorForm.admin_3 = '';
                $scope.showadmin3 = false;
            }
            if ($scope.showadmin2 == false && $scope.showadmin3 == false) {
                $scope.adminCount = 0;
            } else {
                $scope.adminCount = 3;
            }
        };

        $scope.addImage = function () {
            if ($scope.showimage1 == false) {
                $scope.showimage1 = true;
                $scope.vendorForm.file1 = false;
            } else if ($scope.showimage2 == false) {
                $scope.showimage2 = true;
                $scope.vendorForm.file2 = false;
            } else if ($scope.showimage3 == false) {
                $scope.showimage3 = true;
                $scope.vendorForm.file3 = false;
            }
        };

        $scope.removeImage = function (num) {

            if (angular.isUndefined($scope.vendorForm.contracts)) {
                $scope.vendorForm.contracts = {};
            }

            if (num == 1) {
                $scope.vendorForm.contract1 = '';
                $scope.vendorForm.file1 = true;
                if ($scope.vendorForm.contracts[0] !== undefined) {
                    $scope.vendorForm.contracts[0] = '';
                }
                $scope.showimage1 = false;
            } else if (num == 2) {
                $scope.vendorForm.contract2 = '';
                $scope.vendorForm.file2 = true;
                if ($scope.vendorForm.contracts[1] !== undefined) {
                    $scope.vendorForm.contracts[1] = '';
                }
                $scope.showimage2 = false;
            } else if (num == 3) {
                $scope.vendorForm.contract3 = '';
                $scope.vendorForm.file3 = true;
                if ($scope.vendorForm.contracts[2] !== undefined) {
                    $scope.vendorForm.contracts[2] = '';
                }
                $scope.showimage3 = false;
            }


        };

        $scope.getCountry = function () {
            vendorService.getState($scope.vendorForm.compCountry.code)
                .then(function success(response) {
                    $scope.stateArr = response.data.stateArr;
                }, function error() {
                });
        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////

        $scope.preve1 = false;
        $scope.preve2 = true;
        $scope.preve3 = false;
        $scope.preve4 = false;
        $scope.preve5 = false;
        $scope.preve6 = false;
        $scope.preve7 = false;

        $scope.tabs1 = true;

        $scope.tabPanal = function(tabNum) {
            if(tabNum == 1){
                //console.log('yyyy');
                $scope.tabs1 = true;
                $scope.tabs2 = false;
                $scope.tabs3 = false;
                $scope.tabs4 = false;


                $scope.preve1 = false;
                $scope.preve2 = true;
                $scope.preve3 = false;
                $scope.preve4 = false;
                $scope.preve5 = false;
                $scope.preve6 = false;
                $scope.preve7 = false;
            }

            else if(tabNum == 2){
                //console.log('xxxx');
                $scope.tabs1 = false;
                $scope.tabs2 = true;
                $scope.tabs3 = false;
                $scope.tabs4 = false;

                $scope.preve1 = true;
                $scope.preve2 = false;
                $scope.preve3 = false;
                $scope.preve4 = true;
                $scope.preve5 = false;
                $scope.preve6 = false;
                $scope.preve7 = false;
            }

            else if(tabNum == 3){
                $scope.tabs1 = false;
                $scope.tabs2 = false;
                $scope.tabs3 = true;
                $scope.tabs4 = false;

                $scope.preve1 = false;
                $scope.preve2 = false;
                $scope.preve3 = true;
                $scope.preve4 = false;
                $scope.preve5 = false;
                $scope.preve6 = true;
                $scope.preve7 = false;
            }

            else if(tabNum == 4){
                $scope.tabs1 = false;
                $scope.tabs2 = false;
                $scope.tabs3 = false;
                $scope.tabs4 = true;

                $scope.preve1 = false;
                $scope.preve2 = false;
                $scope.preve3 = false;
                $scope.preve4 = false;
                $scope.preve5 = true;
                $scope.preve6 = false;
                $scope.preve7 = true;
            }
        };

///////////////////////////////////// tab panel ///////////////////////////////////////////////////


    }

})();

/**
 * Created by gayani on 9/16/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").service('vendorService', [
        '$http', '$global', 'multipartForm', service
    ]);


    function service($http, $global, multipartForm) {

        return {
            getVendorList: getVendorList,
            getRetailerList: getRetailerList,
            getVendorDetails : getVendorDetails,
            createVendor: createVendor,
            editVendor:editVendor,
            updateVendor:updateVendor,
            getCountries: getCountries,
            getState: getState
        };

        function getVendorList() {

            var vendorData = $http.post(
                $global.API_URL + 'api/platform/companies/list/',
                {
                    token: "1234567",
                    company_type: "VENDOR"
                }
            );

            return vendorData;

        }

        function getVendorDetails(id){

            var vendorDetails = $http.post($global.API_URL + 'api/platform/companies/detail/', {
                vendorid: id
            });
            return vendorDetails;
        }

        function createVendor(company) {
           /* var retailers = [];
            for(var key in company.retailersId){
                retailers.push(key);
            }
            company.retailersId = retailers;*/
            company.country = JSON.stringify(company.compCountry);
            company.states = JSON.stringify(company.compState);
            company.companyType = 'VENDOR';
            return multipartForm.post($global.API_URL + 'api/platform/companies/create/', company);
        }

        function updateVendor(company){
            return createVendor(company);
        }

        function editVendor(id) {
            var retailerEdits = [];
            var retailerEdit = $http.post(
                $global.API_URL + 'api/platform/companies/edit/',
                {
                    retailerID: id
                }
            );
            return retailerEdit;
        }

        function getRetailerList() {
            var retailerData = $http.post(
                $global.API_URL + 'api/platform/companies/mapping/',
                {
                    //company_type: "RETAILER"
                }
            );
            return retailerData;
        }

        function getCountries() {
            var countryCode = $http.post($global.API_URL + 'api/crm/country/',{});
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post($global.API_URL + 'api/crm/state/', {
                countryCode: countryCode
            });
            return stateCode;
        }

        function getMppping() {
            
        }

    }

})();
(function () {
    'use strict';
    angular.module("orangeTrax").service('alertService', [
        '$http', '$global', '$q', 'authService', service
    ]);

    /**
     * Alert service
     */
    function service($http, $global, $q, authService) {

        return {
            headerAlert: headerAlert,
            clickNotification: clickNotification,
            clickReminder: clickReminder
        };

        function headerAlert() {

            var deferred = $q.defer();
            var userId = null;
            if (authService.isLoggedIn()) {
                userId = authService.getUser().userId;
            }

            $http.post($global.API_URL + 'api/common/top-alerts/', {
                user_id: userId
            }).then(function success(response) {
                deferred.resolve({data: response.data});
            }, function error(error) {
                deferred.reject({data: error});
            });

            return deferred.promise;
        }

        function clickNotification(id, userId) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/notification/set-read/', {
                id: id,
                userId: authService.getUser().userId
            }).then(function success(response) {
                deferred.resolve({data: response.data.data});
            }, function error(error) {
                deferred.reject({data: error});
            });

            return deferred.promise;
        }

        function clickReminder(id) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/reminders/set-read/', {
                id: id,
                userId: authService.getUser().userId
            }).then(function success(response) {
                deferred.resolve({data: response.data.data});
            }, function error(error) {
                deferred.reject({data: error});
            });

            return deferred.promise;
        }


    }

})();
(function () {
    'use strict';
    angular.module("orangeTrax").service('authService', [
        '$localStorage', service
    ]);

    /**
     * Auth service
     */
    function service($localStorage) {

        return {
            isLoggedIn: isLoggedIn,
            setUser: setUser,
            getUser: getUser,
            getToken: getToken,
            setToken: setToken,
            watchMe: watchMe,
            setExpire: setExpire,
            getExpire: getExpire,
            checkExpire: checkExpire,
            logout: logout,
            userHasPermission: userHasPermission,
            setUserPermissions: setUserPermissions,
            getUserMenu: getUserMenu,
            getUserFeatures: getUserFeatures,
            setAppCommonFeatures: setAppCommonFeatures,
            getAppCommonFeatures: getAppCommonFeatures,
            getPlatFormViews: getPlatFormViews,
            getCompany:getCompany,
            setCompany:setCompany
        };

        //check logged in or not
        function isLoggedIn() {
            return ($localStorage.user) ? $localStorage.user : false;
        }

        //set user info after logged in
        function setUser(userObj,menuObj,featuresObj) {
            if (userObj) {
                $localStorage.user = userObj;


                /*if(menuObj){
                    $localStorage.user.menu = [];
                    $localStorage.user.menu = menuObj;
                }

                if(featuresObj){
                    $localStorage.user.features = [];
                    $localStorage.user.features.push("CR");
                    $localStorage.user.features.push("UP");
                    $localStorage.user.features.push("RD");
                    $localStorage.user.features.push("DE");
                }*/

            } else {
                delete  $localStorage.user;
            }
        }

        //set user info after logged in
        function getUser() {
            return $localStorage.user;
        }

        function setUserMainMenu(menuObj){


        }

        function setUserFeatures(featuresObj){

        }

        function getPlatFormViews(){

            return $localStorage.platFormViews;
        }

        function setPlatFormViews(views){
            if(views){
                $localStorage.platFormViews=views;
            }else{
                delete $localStorage.platFormViews;
            }

        }
        function getAppCommonFeatures(){

            return  $localStorage.userCommonFeatures;
        }

        function setAppCommonFeatures(commonFeatures){

            if(commonFeatures){

                $localStorage.userCommonFeatures = commonFeatures;
                setPlatFormViews(commonFeatures.viewAs);

            }else{

                delete  $localStorage.userCommonFeatures;
            }
        }




        function setUserPermissions(menuObj,featureObj){

            //var user =getUser();
            if(menuObj){
                $localStorage.userMenu = menuObj;
            }else{
                delete  $localStorage.userMenu;
            }

            if(featureObj){
                $localStorage.userFeatures = featureObj;
            }else{
                delete  $localStorage.userFeatures;
            }

        }

        function getUserMenu(){

            return $localStorage.userMenu;
        }

        function getUserFeatures(){

            return $localStorage.userFeatures;
        }


        /**
         * Check whether user has privilages.
         * @param permissionCode
         * @returns {boolean}
         */
        function userHasPermission(pathObj,fieldObj) {
            var status = false;

            if(pathObj){

                status = getPermission(pathObj,fieldObj);
            }

            return status;
        }

        /**
         * this method used to check whether permitted or not.
         * @param pathObj
         * @param fieldObj
         * @returns {boolean}
         */
        function getPermission(pathObj,fieldObj){
            var isAllowed = false;
            var toFindObj = '';
            var toFindObjItem = '';
            var obj = '';

            if(pathObj.subMenu){

                        //toFindObj =  _.find(getUserFeatures(),pathObj.subMenu);
                //toFindObj = _.propertyOf(getUserFeatures())(pathObj.subMenu);
                //        obj = _.propertyOf(toFindObj)(pathObj.subMenu);
                //var xbj = _.where(obj, {id: fieldObj.actionType});
                //        var xbj  = findDeep(obj,{id: fieldObj.actionType});
                //toFindObjItem =  _.find(subMenu,pathObj.subMenuItem);
                //obj = _.propertyOf(toFindObjItem)(pathObj.subMenuItem);
                var tofindMenu = _.propertyOf(getUserFeatures())(pathObj.menu);
                toFindObj = _.propertyOf(tofindMenu)(pathObj.subMenu);
                obj = _.propertyOf(toFindObj)(pathObj.subMenuItem);

            }else{

                toFindObj = _.propertyOf(getUserFeatures())(pathObj.menu);
                obj = _.propertyOf(toFindObj)(pathObj.subMenuItem);
            }

            if(obj){
                var actionObj = _.propertyOf(obj)(fieldObj.actionType);
                isAllowed = isExist(actionObj,fieldObj);
                //isAllowed = false;
            }
            return isAllowed;

        }



        /**
         * Check that this permission is exist.
         * @param permissinObj
         * @param fieldObj
         * @returns {boolean}
         */
        function isExist(permissinObj,fieldObj){
            var isAllowed = false;
            if(permissinObj.isAllowed){

                if(fieldObj.field.length>0){
                    //if(permissinObj.fields.length>0){
                        var isExsist =  _.contains(permissinObj.fields,fieldObj.field);
                    if(isExsist){
                        isAllowed = true;
                    }
                }else{
                    isAllowed = true;
                }

            }

            return isAllowed;
        }


        //get token
        function getToken() {
            return $localStorage.token;
        }

        //set token
        function setToken(token) {
            if (token) {
                $localStorage.token = token
            } else {
                delete $localStorage.token;
            }
        }

        //set expire
        function setExpire(set) {
            if (set == true) {
                var expires = (1000 * 7 * 24 * 60 * 60);  // 1000 * 7 * 24 * 60 * 60 default: 7 days
                var now = Date.now();  //epoch time, lets deal only with integer
                //var schedule = now + expires; //TODO refac
                $localStorage.expiresIn = now + expires;
            } else {
                delete $localStorage.expiresIn;
            }
        }

        //get Expire
        function getExpire() {
            return $localStorage.expiresIn;
        }

        //check expire
        function checkExpire() {

            var now = Date.now();  //epoch time, lets deal only with integer
            // set expiration for storage
            var expiresIn = $localStorage.expiresIn;
            if (expiresIn === undefined || expiresIn === null) {
                return null;
            } else {
                if (expiresIn < now) {// Expired
                    setUser();
                    setToken();
                    setExpire();
                    setUserPermissions();
                    return null;
                }
            }

        }

        //get token
        function getCompany() {
            return {id: $localStorage.companyId, name: $localStorage.companyName};
        }

        //set token
        function setCompany(companyId, name) {
            if (companyId) {
                $localStorage.companyId = companyId;
                $localStorage.companyName = name;
            } else {
                delete $localStorage.companyId;
                delete $localStorage.companyName;
            }
        }


        function watchMe(state) {
            checkExpire();
            if (state === '/login' && isLoggedIn()) {
                return true;
            } else {
                return false;
            }

        }

        function logout() {
            setUser();
            setToken();
            setExpire();
            setUserPermissions();
        }
    }

})();
/**
 * Created by maduka on 9/11/15.
 */

//Constant variables : cannot modify
angular.module('orangeTrax').constant('$global', {
    'API_URL': 'http://service.orangetrax.dev/app_dev.php/',
    'SOCKET_IO_URL': 'http://lifestyle.efserver.net:3000'
});

/*angular.module('orangeTrax').constant('angularMomentConfig', {
    preprocess: 'utc',
    timezone: 'Europe/Berlin'
});*/

/**
 * Created by maduka on 9/4/15.
 */

(function () {
    'use strict';
    angular.module("orangeTrax").service('interceptorFactory', [
        'authService', '$q', '$location', interceptor
    ]);

    /**
     * Interceptor factory
     */
    function interceptor(authService, $q, $location) {
        return {
            request: addToken,
            requestError: reqError,
            response: setToken,
            responseError: resError

        };

        // automatically attach Authorization header
        function addToken(config) {
            var token = authService.getToken();
            if (token) {
                config.headers = config.headers || {};
                config.headers.Token = token;
            }
            var company = authService.getCompany();
            if (company) {
                config.headers = config.headers || {};
                config.headers.CompanyId = company.id;
            }
            return config;
        }

        // Handle request error
        function reqError(config) {
            return config
        }

        // If a token was sent back, save it
        function setToken(res) {
            var token = authService.getToken();
            if (!token && res.data.token) {
                authService.setToken(res.data.token);
            }

            return res;
        }

        // Handle response error
        function resError(response) {
            if ((typeof response !== 'undefined' && response !== null) && (response.status === 401 || response.status === 403)) {
                $location.path('/login');
            }
            return $q.reject(response);
        }



    }


})();
(function () {
    'use strict';

    angular.module('orangeTrax').controller('mainCtrl', ['$scope', '$rootScope', '$modal', 'authService', '$state', '$location', '$global', '$window', 'socketIO', 'alertService', controller]);

    function controller($scope, $rootScope, $modal, authService, $state, $location, $global, $window, socketIO, alertService) {

        //TODO: selected menu, page effect, etc...

        //TODO auth


        // http://stackoverflow.com/questions/14206492/how-do-i-store-a-current-user-context-in-angular
        $scope.$watch(authService.isLoggedIn, function () {
            $scope.userInfo = authService.getUser();
            $scope.API_URL = $global.API_URL;
            $scope.userMenu = authService.getUserMenu();
            $scope.platformDropdown = authService.getPlatFormViews();
            $scope.selectedPlatform = authService.getCompany().name;
            $scope.selectedPlatformType = null;

            if (angular.isDefined($scope.userInfo)) {
                $scope.labelGroup = $scope.userInfo.group;
            }

            if ($scope.labelGroup == 1) {
                $scope.filterLabel = 'View As';
                $scope.mainLabel = 'Platform';
            }
            else if ($scope.labelGroup == 2) {
                $scope.filterLabel = 'Filter By';
                $scope.mainLabel = 'All';
            }
            else if ($scope.labelGroup == 3) {
                $scope.filterLabel = 'Filter By';
                $scope.mainLabel = 'All';
            }
            $scope.id = authService.getCompany().id;

            $scope.setPlatform = function (selectedPlatform, type) {
                $scope.selectedPlatform = selectedPlatform.name;
                $scope.selectedPlatformType = type;
                $scope.id = selectedPlatform.id;
                authService.setCompany($scope.id, $scope.selectedPlatform);
                $scope.platformFilter = '';
                $state.go($state.$current, null, {reload: true});
            };

            if (angular.isDefined($scope.userInfo)) {
                alertService.headerAlert().then(function (response) {
                    var alerts = response.data;
                    $rootScope.headerNotificationCount = alerts.notifications.count;
                    $rootScope.headerNotifications = alerts.notifications.data;
                    $rootScope.headerMessageCount = alerts.messages.count;
                    $rootScope.headerMessages = alerts.messages.data;
                    $rootScope.headerReminderCount = alerts.reminders.count;
                    $rootScope.headerReminders = alerts.reminders.data;
                }, function (error) {

                });
            }

        });

        // Connect to the socketIO
        if (authService.isLoggedIn()) {
            socketIO.connect(authService.getUser().userId);
        }

        // User settings modal
        $scope.userSettingsModal = function () {

            var modalScope = $rootScope.$new();

            modalScope.modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/users/usersSettings.html',
                controller: 'usersController',
                size: 'lg',
                scope: modalScope,
                resolve: {
                    /*items: function () {
                     return $scope.items;
                     }*/
                }
            });

            modalScope.modalInstance.result.then(function (/*selectedItem*/) {
                //$scope.selected = selectedItem;
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        // User logout modal
        $scope.userLogoutModal = function () {

            var modalScope = $rootScope.$new();

            modalScope.modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/users/usersLogout.html',
                controller: 'loginController',
                size: 's',
                scope: modalScope,
                resolve: {
                    /*items: function () {
                     return $scope.items;
                     }*/
                }
            });

            modalScope.modalInstance.result.then(function (/*selectedItem*/) {
                //$scope.selected = selectedItem;
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.changeRoute = function (url, forceReload) {
            $scope = $scope || angular.element(document).scope();
            if (forceReload || $scope.$$phase) { // that's right TWO dollar signs: $$phase
                window.location = url;
            } else {
                $location.path(url);
                $scope.$apply();
            }
        };

        //Redirect users to order page if they already logged in
        $scope.watchMe = function () {
            var status = authService.watchMe($location.$$path);
            if (status == true) {
                $location.path("/orders");
            }
        }

        //Click notification
        $scope.clickNotification = function (id, link, status) {


            if (status === 0) {
                alertService.clickNotification(id).then(function success(response) {
                    /*if (angular.isDefined($rootScope.headerNotifications) && $rootScope.headerNotifications.length > 0) {
                     var obj = _.findWhere($rootScope.headerNotifications, {id: id});
                     _.extend(obj, {status: 1});
                     $rootScope.headerNotifications = _.without($rootScope.headerNotifications, _.findWhere($rootScope.headerNotifications, {id: id}));
                     }

                     if (parseInt($rootScope.headerNotificationCount) > 0) {
                     $rootScope.headerNotificationCount = parseInt($rootScope.headerNotificationCount) - 1;
                     }*/

                    if (angular.isDefined($rootScope.headerNotifications)) {
                        $rootScope.headerNotifications = response.data.notifications;
                    }

                    if (angular.isDefined($rootScope.headerNotificationCount)) {
                        $rootScope.headerNotificationCount = parseInt(response.data.count);
                    }


                    if (angular.isDefined($rootScope.pageNotifications) && $rootScope.pageNotifications.length > 0) {
                        var obj = _.findWhere($rootScope.pageNotifications, {id: id});
                        _.extend(obj, {status: 1});
                    }
                }, function error(error) {

                });
            }
            if (link !== '' && link !== '#') {
                //$window.location.href = '/#!' + link;
                $location.path('/' + link);
                jQuery('.mega-link').removeClass('open');
                jQuery('.vd_mega-menu-content').slideUp('fast');
            }
        }

        //Click reminder
        $scope.clickReminder = function (id, parentId, type, isRead, readOnly) {
            if (isRead == false) {
                alertService.clickReminder(id).then(function success(response) {
                    /*if (angular.isDefined($rootScope.headerReminders) && $rootScope.headerReminders.length > 0) {
                     var obj = _.findWhere($rootScope.headerReminders, {id: id});
                     _.extend(obj, {isRead: true});
                     $rootScope.headerReminders = _.without($rootScope.headerReminders, _.findWhere($rootScope.headerReminders, {id: id}));
                     }
                     if (parseInt($rootScope.headerReminderCount) > 0) {
                     $rootScope.headerReminderCount = parseInt($rootScope.headerReminderCount) - 1;
                     }*/

                    if (angular.isDefined($rootScope.headerReminders)) {
                        $rootScope.headerReminders = response.data.reminders;
                    }
                    if (angular.isDefined($rootScope.headerReminderCount)) {
                        $rootScope.headerReminderCount = parseInt(response.data.count);
                    }

                    if (angular.isDefined($rootScope.pageReminders) && $rootScope.pageReminders.length > 0) {
                        var obj = _.findWhere($rootScope.pageReminders, {id: id});
                        _.extend(obj, {isRead: true});
                    }
                }, function error(error) {

                });
            }
            if (readOnly == 0) {
                if (type == 1) {
                    $location.path('/orders/list/view/' + parentId + '/5/2');
                } else if (type == 2) {
                    $location.path('/customer-service/compensation-cases/view/' + parentId + '/5/2');
                } else if (type == 3) {
                    $location.path('/customer-service/replacement-cases/view/' + parentId + '/5/2');
                } else if (type == 4) {
                    $location.path('/customer-service/return-cases/view/' + parentId + '/5/2');
                } else if (type == 5) {
                    $location.path('/customer-service/cancellation-cases/view/' + parentId + '/5/2');
                } else if (type == 6) {
                    $location.path('/customer-service/other-cases/view/' + parentId + '/5/2');
                }

                jQuery('.mega-link').removeClass('open');
                jQuery('.vd_mega-menu-content').slideUp('fast');
            }
        }

        $rootScope.globalSearch = {"criteria": null, "keyword": null};
        $rootScope.globalSearchCriteria = [{"id": 1, "name": 'Order ID'}, {
            "id": 5,
            "name": 'PO ID'
        }, {"id": 2, "name": 'Confirmation ID'}, {"id": 3, "name": 'Tracking ID'},
            {"id": 4, "name": 'Case ID'}, {"id": 6, "name": 'Customer Name'}, {"id": 8, "name": 'Product Name'}];
        $rootScope.globalSearch.criteria = _.findWhere($rootScope.globalSearchCriteria, {id: 1});
        $rootScope.triggeredGlobalSearch = false;
        $rootScope.directGlobalSearch = false;

        $scope.triggerGlobalSearch = function () {

            if ($rootScope.globalSearch.criteria != null) {
                $rootScope.triggeredGlobalSearch = true;

                var searchCriteria = $rootScope.globalSearch.criteria.id;
                switch (searchCriteria) {
                    case 1:
                        $location.path('/orders/list/' + 1 + '');
                        $rootScope.$broadcast("globalSearchByOrderIdEvent");
                        break;
                    case 4:

                        $location.path('/customer-service/compensation-cases');
                        $rootScope.$broadcast("globalSearchByCaseIdEvent");
                        break;
                    case 5:
                        $location.path('/orders/list/' + 1 + '');
                        $rootScope.$broadcast("globalSearchByPurchaseOrderIdEvent");
                        break;

                    default:
                        $rootScope.directGlobalSearch = true;
                        $location.path('/orders/list/' + 1 + '');
                        $rootScope.$broadcast("directOrdersGlobalSearchEvent");
                }

            }
        };


        // Message modal
        $scope.sendMessage = function () {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/messages/messageModal.html',
                controller: 'formMessageModalController',
                size: 'md',
                resolve: {
                    userId: function () {
                        return authService.getUser().userId;
                    },
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                }
            });

        }

        $scope.$on('Company_ID_Change', function (event, args) {
            $scope.selectedPlatform = authService.getCompany().name;
            $scope.id = authService.getCompany().id;
        });

    }


})();

(function () {
    'use strict';
    angular.module("orangeTrax").service('modalService', [
        '$modal', modalService
    ]);

    function modalService($modal) {

        var modalDefaults = {
            backdrop: true,
            keyboard: true,
            modalFade: true,
            templateUrl: '/app/common/modal.html'
        };

        var modalOptions = {
            closeButtonText: 'Close',
            actionButtonText: 'OK',
            headerText: 'Proceed?',
            bodyText: 'Perform this action?'
        };

        this.showModal = function (customModalDefaults, customModalOptions) {
            if (!customModalDefaults) customModalDefaults = {};
            customModalDefaults.backdrop = 'static';
            return this.show(customModalDefaults, customModalOptions);
        };

        this.show = function (customModalDefaults, customModalOptions) {
            //Create temp objects to work with since we're in a singleton service
            var tempModalDefaults = {};
            var tempModalOptions = {};

            //Map angular-ui modal custom defaults to modal defaults defined in service
            angular.extend(tempModalDefaults, modalDefaults, customModalDefaults);

            //Map modal.html $scope custom properties to defaults defined in service
            angular.extend(tempModalOptions, modalOptions, customModalOptions);

            if (!tempModalDefaults.controller) {
                tempModalDefaults.controller = tempModalDefaultsCtrl;
            }

            tempModalDefaultsCtrl.$inject = ['$scope', '$modalInstance'];

            function tempModalDefaultsCtrl($scope, $modalInstance) {
                $scope.modalOptions = tempModalOptions;
                $scope.modalOptions.ok = function(result) {
                    $modalInstance.close(result);
                };
                $scope.modalOptions.close = function(result) {
                    $modalInstance.dismiss('cancel');
                };
            }


            return $modal.open(tempModalDefaults).result;
        };

    }


})();
/**
 * Created by maduka on 9/18/15.
 */

(function () {
    'use strict';
    angular.module("orangeTrax").service('multipartForm', [
        '$http', '$q', '$global', service
    ]);

    function service($http, $q) {


        this.post = function (uploadUrl, data) {
            var deferred = $q.defer();
            var fd = new FormData();
            for (var key in data)
                fd.append(key, data[key]);
            $http.post(uploadUrl, fd, {
                transformRequest: angular.indentity,
                headers: {'Content-Type': undefined}
            }).then(function success(response) {
                deferred.resolve(response);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }
    }

})();

/**
 * Created by jeyachanthuruj on 6/11/15.
 */

(function () {
    'use strict';

    angular.module("orangeTrax").factory('socketIO', ['$rootScope', '$global', '$injector', 'toastr', 'alertService',
        function ($rootScope, $global, $injector, toastr, alertService) {

            var isConnected = false,
                socketIO;
            $rootScope.headerNotificationCount = 0;
            $rootScope.headerNotifications = [];
            $rootScope.headerMassageCount = 0;
            $rootScope.headerMessages = [];
            $rootScope.headerReminderCount = 0;
            $rootScope.headerReminders = [];

            alertService.headerAlert().then(function (response) {
                var alerts = response.data;
                $rootScope.headerNotificationCount = alerts.notifications.count;
                $rootScope.headerNotifications = alerts.notifications.data;
                $rootScope.headerMessageCount = alerts.messages.count;
                $rootScope.headerMessages = alerts.messages.data;
                $rootScope.headerReminderCount = alerts.reminders.count;
                $rootScope.headerReminders = alerts.reminders.data;
            }, function (error) {

            });

            /**
             * COMMON
             * */
            function start(userId) {

                if (userId === undefined) {
                    console.log("Session ID is not found....");
                    return;
                }

                if (isConnected) {
                    console.log("SocketIO is already connected...");
                    return;
                } else {
                    isConnected = true;
                }

                /**
                 * Connect real-time (socket.io)
                 * */
                connectIO(userId);

            }

            function connectIO(userId) {

                socketIO = io($global.SOCKET_IO_URL);
                if (!socketIO.connected) {
                    socketIO.connect();
                }

                socketIO.on('connect', function () {
                    console.log("Connected...");
                    socketIO.emit('nickname', userId);

                    socketIO.on('disconnect', function () {
                        console.log('Disconnect...');
                        isConnected = false;
                    });
                });

                socketIO.on('chat message', read);
            }

            function disconnectIO() {
                isConnected = false;
                if (socketIO) {
                    socketIO.disconnect();
                }
            }


            function checkConnected() {
                return isConnected;
            }


            function read(data) {

                if (data === undefined) {
                    return;
                }

                var data = JSON.parse(window.decodeURIComponent(data.replace(/\+/g, ' ')));

                if (data.notification) {
                    $rootScope.headerNotifications.unshift(data.notification);
                    if (angular.isDefined($rootScope.pageNotifications)) {
                        $rootScope.pageNotifications.unshift(data.notification);
                    }
                    if ($rootScope.headerNotifications.length > 5) {
                        $rootScope.headerNotifications.pop();
                    }
                    $rootScope.headerNotificationCount = parseInt($rootScope.headerNotificationCount) + 1;
                }

                if (data.reminder) {
                    $rootScope.headerReminders.unshift(data.reminder);
                    if (angular.isDefined($rootScope.pageReminders)) {
                        $rootScope.pageReminders.unshift(data.reminder);
                    }
                    if ($rootScope.headerReminders.length > 5) {
                        $rootScope.headerReminders.pop();
                    }
                    $rootScope.headerReminderCount = parseInt($rootScope.headerReminderCount) + 1;
                }

                if (data.message) {
                    $rootScope.headerMessages.unshift(data.message);
                    if (angular.isDefined($rootScope.pageMessages)) {
                        $rootScope.pageMessages.unshift(data.message);
                    }
                    if ($rootScope.headerMessages.length > 5) {
                        $rootScope.headerMessages.pop();
                    }
                    $rootScope.headerMessageCount = parseInt($rootScope.headerMessageCount) + 1;
                }

                $rootScope.$digest();
            }

            return {
                isConnected: checkConnected,
                connect: start,
                disconnect: disconnectIO,
                read: read
            };

        }]);

})();
/**
 * Created by maduka on 9/6/15.
 */

(function () {
    'use strict';


    angular.module("orangeTrax").directive('a', [
        a
    ]);

    /**
     * preventDefault on anchor tags
     * http://stackoverflow.com/questions/10931315/how-to-preventdefault-on-anchor-tags
     */
    function a() {
        return {
            restrict: 'E',
            link: function (scope, elem, attrs) {
                if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                    elem.on('click', function (e) {
                        e.preventDefault();
                    });
                }
            }
        }
    }


    angular.module("orangeTrax").directive('fileModel', [
        '$parse', fileModel
    ]);

    function fileModel($parse) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function () {
                    scope.$apply(function () {
                        modelSetter(scope, element[0].files[0]);
                    })
                })
            }
        }
    }


    /**
     file required validation
     */

    angular.module("orangeTrax").directive('validFile', [
        validFile
    ]);

    function validFile() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, el, attrs, ngModel) {
                ngModel.$render = function () {
                    ngModel.$setViewValue(el.val());
                };

                el.bind('change', function () {
                    scope.$apply(function () {
                        ngModel.$render();
                    });
                });
            }
        }
    }

    /*
     *
     * Magnific Popup
     * */

    angular.module("orangeTrax").directive('magnificPopup', [
        magnificPopup
    ]);

    function magnificPopup() {
        return {
            restrict: 'A',
            link: function (scope, el, attrs) {
                $(el).magnificPopup({
                    items: {
                        src: attrs.href
                    },
                    type: 'image' // this is default type
                });
            }
        }
    }


    angular.module("orangeTrax").directive('UseTooltip', [function () {
        var previousPoint = null;
        return {
            restrict: 'C',
            link: function (scope, elem, attrs) {
                elem.bind('plothover', function (event, pos, item) {

                    if (item) {
                        if (previousPoint != item.dataIndex) {

                            previousPoint = item.dataIndex;

                            //$("#tooltip").remove();
                            angular.element("#tooltip").remove();
                            var x = item.datapoint[0].toFixed(2),
                                y = item.datapoint[1].toFixed(2);

                            showTooltip(item.pageX, item.pageY,
                                "<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" + Math.round(x) + " NOV 2013 </strong></p>" +
                                "<div style='padding: 0 10px 10px;'>" +
                                "<div>" + item.series.label + ": <strong>" + Math.round(y) + "</strong></div>" +
                                "<div> Profit: <strong>$" + Math.round(y) * 7 + "</strong></div>" +
                                "</div>"
                            );
                        }
                    } else {
                        //$("#tooltip").remove();
                        angular.element("#tooltip").remove();
                        previousPoint = null;
                    }

                    //var src = elem.find('img').attr('src');

                    // call your SmoothZoom here
                    //angular.element(attrs.options).css({'background-image':'url('+ src +')'});
                });
            }
        }

        function showTooltip(x, y, contents) {
            $('<div id="tooltip">' + contents + '</div>').css({
                position: 'absolute',
                display: 'none',
                top: y + 5,
                left: x + 20,
                size: '10',
//              'border-top' : '3px solid #1FAE66',
                'background-color': '#111111',
                color: "#FFFFFF",
                opacity: 0.85
            }).appendTo("body").fadeIn(200);
        }
    }]);


    //Set login background height
    angular.module("orangeTrax").directive('loginHeight', [
        '$parse', loginHeight
    ]);

    function loginHeight() {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var winHeight = $(window).height();
                element.css('height', winHeight + 'px');
            }
        }
    }


    // FORM SET DIRTY
    window.common = {
        //Function for make all input fields to dirty (for visible error messages);
        setDirty: setDirty,
        SPLITTER_PIPE: "|",
        SPLITTER_COMMA: ",",
        findArrayInArray: findArrayInArray,
        getSafeDate: getSafeDate,
        getCloseMsgOptions: getCloseMsgOptions,
        getSaveMsgOptions: getSaveMsgOptions,
        isHidegraphByuserType: isHidegraphByuserType

    };

    function isHidegraphByuserType(userType,authuser_type){

        if (userType == authuser_type) {
            return true;
        } else{
            return false;
        }

    }



    function getSaveMsgOptions() {

        var modalOptions = {
            closeButtonText: 'Cancel',
            actionButtonText: 'OK',
            headerText: 'Confirmation',
            bodyText: 'Are you sure you want to submit?'
        };

        return modalOptions;
    }

    function getCloseMsgOptions() {

        var modalOptions = {
            closeButtonText: 'Cancel',
            actionButtonText: 'OK',
            headerText: 'Cancel',
            bodyText: 'Are you sure you want to close this form?'
        };

        return modalOptions;
    }

    function getSafeDate(dateObj) {
        if (dateObj) {
            return new Date(dateObj.date);
        } else {
            return '';
        }
    }

    function findArrayInArray(haystack, arr) {
        return arr.some(function (v) {
            return haystack.indexOf(v) >= 0;
        })
    }

    /*
     * Make form fields dirty service
     * ------------------------------
     * */
    function setDirty(form) {
        if (!form) {
            throw "argument is missing.";
        }
        angular.forEach(form.$error.required, function (field) {
            field.$setDirty();
        });
    }

    //Convert a UNIX timestamp to user's local time via JavaScript
    angular.module("orangeTrax").directive('convertTimestamp', [
        convertTimestamp
    ]);

    function convertTimestamp() {

        return {
            restrict: 'A',
            link: function (scope, element, attributes) {

                var timestamp = attributes.convertTimestamp;

                var d = new Date(timestamp * 1000),	// Convert the passed timestamp to milliseconds
                    yyyy = d.getFullYear(),
                    mm = ('0' + (d.getMonth() + 1)).slice(-2),	// Months are zero based. Add leading 0.
                    dd = ('0' + d.getDate()).slice(-2),			// Add leading 0.
                    hh = d.getHours(),
                    h = hh,
                    min = ('0' + d.getMinutes()).slice(-2),		// Add leading 0.
                    ampm = 'AM',
                    time;

                if (hh > 12) {
                    h = hh - 12;
                    ampm = 'PM';
                } else if (hh === 12) {
                    h = 12;
                    ampm = 'PM';
                } else if (hh == 0) {
                    h = 12;
                }

                // ie: 02/18/2013 8:35am
                time = mm + '/' + dd + '/' + yyyy + ' ' + h + ':' + min + ampm;
                element.html(time);
                //return time;
            }
        }
    }

    //Format time for case to user's local time via JavaScript
    angular.module("orangeTrax").directive('formatDate', [
        formatDate
    ]);

    function formatDate() {

        return {
            restrict: 'A',
            link: function (scope, element, attributes) {

                var time;
                var timePara = attributes.formatDate;

                var d = moment(timePara, "YYYY-MM-DD HH:mm:ss");
                // To get the date as 'Friday 25th January 2013'
                var datestring = d.format("MM/DD/YYYY");
                // To get the time as '09:30'
                var timestring = d.format("h:mmA");

                // ie: 02/18/2013 8:35am
                time = '<b>' + datestring + '</b> @ <span class="red">' + timestring + '</span>';
                element.html(time);
                //return time;
            }
        }
    }

    //Format time for case to user's local time via JavaScript
    angular.module("orangeTrax").directive('formatDateWithoutTime', [
        formatDateWithoutTime
    ]);

    function formatDateWithoutTime() {

        return {
            restrict: 'A',
            link: function (scope, element, attributes) {

                var timePara = attributes.formatDateWithoutTime;

                var d = moment(timePara, "YYYY-MM-DD HH:mm:ss");
                // To get the date as 'Friday 25th January 2013'
                var datestring = d.format("MM/DD/YYYY");

                element.html(datestring);
                //return time;
            }
        }
    }

    //Format time for case to user's local time via JavaScript
    angular.module("orangeTrax").directive('formatDateWithoutTimeForPromo', [
        formatDateWithoutTimeForPromo
    ]);

    function formatDateWithoutTimeForPromo() {

        return {
            restrict: 'A',
            link: function (scope, element, attributes) {

                var timePara = attributes.formatDateWithoutTimeForPromo;

                var d = moment(timePara, "DD-MM-YYYY");
                // To get the date as 'Friday 25th January 2013'
                var datestring = d.format("MM/DD/YYYY");

                element.html(datestring);
                //return time;
            }
        }
    }

    /**
     * This directive used handle profile image when it is not available.
     */
    angular.module("orangeTrax").directive('checkImage', [
        '$http', checkImage
    ]);
    function checkImage($http) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                attrs.$observe('ngSrc', function (ngSrc) {
                    if (ngSrc) {
                        $http.get(ngSrc).success(function () {
                            element.attr('src', ngSrc); // set default image
                        }).error(function () {
                            //alert('image not exist');
                            element.attr('src', 'assets/img/blank_profile.png'); // set default image
                        });
                    }
                });
            }
        };
    }

    angular.module("orangeTrax").directive('checkImageOrder', [
        '$http', checkImageOrder
    ]);
    function checkImageOrder($http) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                attrs.$observe('ngSrc', function (ngSrc) {
                    if (ngSrc) {
                        $http.get(ngSrc).success(function () {
                            element.attr('src', ngSrc); // set default image
                        }).error(function () {
                            element.attr('src', 'assets/img/No_image_available.jpg'); // set default image
                        });
                    }
                });
            }
        };
    }

    /*angular.module('orangeTrax').config(function($provide) {
     $provide.decorator('uiSrefDirective',
     function ($delegate, $log) {
     var directive = $delegate[0];

     directive.compile = function() {
     return function(scope, element, attrs) {
     var stateName = attrs.uiSref.replace(/\(.+\)$/g, ''); // strip out the state params
     var injector = element.injector();
     var state = injector && injector.get('$state').get(stateName);

     // Watch for null (abstract) states and warn about them rather than erroring.
     if (!state) {
     $log.warn('Could not find state:', attrs.uiSref);

     } else if (state.permission) {
     var Session = injector.get('Session');

     // If the user lacks sufficient permissions, hide this state from them.
     if (!Session.userHasPermission(state.permission)) {
     element.remove();
     }
     }

     // Otherwise pass through and let uiSref handle the rest
     directive.link.apply(this, arguments);
     };
     };

     return $delegate;
     });
     });

     /!*
     *
     * Magnific Popup
     * *!/

     angular.module("orangeTrax").directive('ifAuthenticated', [
     ifAuthenticated
     ]);

     function ifAuthenticated() {
     return {
     restrict: 'A',
     link: function (scope, el, attrs) {
     $(el).magnificPopup({
     items: {
     src: attrs.href
     },
     type: 'image' // this is default type
     });
     }
     }
     }*/

    /**
     * This directive used to validate fields.
     */
    angular.module('orangeTrax').directive('isAllowed', function (authService) {
        return {
            restrict: 'EA',
            link: function ($scope, $element, $attributes, toastr) {


                var pathObj = {};
                var fieldObj = {};

                if ($attributes.isAllowed) {
                    //console.log("permission: "+ $attributes.isAllowed);

                    var strArr = $attributes.isAllowed.split(common.SPLITTER_PIPE);

                    if (strArr.length > 0) {

                        var pathArr = strArr[0].split(common.SPLITTER_COMMA);

                        if (pathArr.length == 3) {
                            pathObj.menu = pathArr[0];
                            pathObj.subMenu = pathArr[1];
                            pathObj.subMenuItem = pathArr[2];

                        } else if (pathArr.length == 2) {
                            pathObj.menu = pathArr[0];
                            //pathObj.subMenu = pathArr[1];
                            pathObj.subMenuItem = pathArr[1];

                        }

                        var itemArr = strArr[1].split(common.SPLITTER_COMMA);
                        fieldObj.actionType = itemArr[0];
                        fieldObj.field = itemArr[1];
                    }

                    if (!authService.userHasPermission(pathObj, fieldObj)) {
                        //$element.html(''); //hide the element.
                        //$element.empty(); //hide the element.
                        $element.addClass('hidden');
                        //setTimeout( $element.empty(), 2000 );
                    }

                }
            }
        }
    });

    /**
     * This directive used to validate
     */
    angular.module('orangeTrax').directive('isAllowedField', function (authService) {
        return {
            restrict: 'A',
            link: function ($scope, $element, $attributes, toastr) {

                if (!authService.userHasPermission($attributes.isAllowed)) {
                    //$element.html(''); TODO auth

                }

            }
        }
    });

    angular.module('orangeTrax').directive('restrictNum', function () {
        return {
            scope: {},
            link: function (scope, element, attrs, controller) {
                element.bind('keyup', function (e) {

                    if (this.value < 0 || Number(this.value) > this.max || this.value.indexOf('.') >= 0) {

                        e.preventDefault();
                        //this.value = 0;
                        element.addClass('red');
                        return false;
                    }else if(this.value > 0 || Number(this.value) <= this.max){
                        element.removeClass('red');
                    }
                });
            }
        }
    });

    angular.module('orangeTrax').directive('phoneFmt', ['$filter', function ($filter) {
        /*
         Intended use:
         <phonenumber-directive placeholder='prompt' model='someModel.phonenumber'></phonenumber-directive>
         Where:
         someModel.phonenumber: {String} value which to bind only the numeric characters [0-9] entered
         ie, if user enters 617-2223333, value of 6172223333 will be bound to model
         prompt: {String} text to keep in placeholder when no numeric input entered
         */

        function link(scope, element, attributes) {

            // scope.inputValue is the value of input element used in template
            scope.inputValue = scope.phonenumberModel;

            scope.$watch('inputValue', function (value, oldValue) {

                value = String(value);
                var number = value.replace(/[^0-9]+/g, '');
                scope.phonenumberModel = number;
                scope.inputValue = $filter('phonenumber')(number);
            });
        }

        return {
            link: link,
            restrict: 'E',
            scope: {
                phonenumberPlaceholder: '=placeholder',
                phonenumberModel: '=model',
            },
            //templateUrl: '/static/phonenumberModule/template.html',
            template: '<input ng-model="inputValue" type="tel" class="phonenumber" placeholder="phoneno" title="Phonenumber (Format: (999) 9999-9999)">',
        };
    }]).filter('phonenumber', function () {
        /*
         Format phonenumber as: c (xxx) xxx-xxxx
         or as close as possible if phonenumber length is not 10
         if c is not '1' (country code not USA), does not use country code
         */

        return function (number) {
            /*
             @param {Number | String} number - Number that will be formatted as telephone number
             Returns formatted number: (###) ###-####
             if number.length < 4: ###
             else if number.length < 7: (###) ###

             Does not handle country codes that are not '1' (USA)
             */
            if (!number) {
                return '';
            }

            number = String(number);

            // Will return formattedNumber.
            // If phonenumber isn't longer than an area code, just show number
            var formattedNumber = number;

            // if the first character is '1', strip it out and add it back
            var c = (number[0] == '1') ? '1 ' : '';
            number = number[0] == '1' ? number.slice(1) : number;

            // # (###) ###-#### as c (area) front-end
            var area = number.substring(0, 3);
            var front = number.substring(3, 6);
            var end = number.substring(6, 10);

            if (front) {
                formattedNumber = (c + "(" + area + ") " + front);
            }
            if (end) {
                formattedNumber += ("-" + end);
            }
            return formattedNumber;
        };
    });

    angular.module('orangeTrax').directive('restrictPattern', function () {
        return {
            scope: {},
            link: function (scope, element, attrs, controller) {
                element.bind('keypress', function (e) {
                    /*if (this.value < 0 || this.value > 1 || this.value.indexOf('.') >= 0 ) {
                     e.preventDefault();
                     return false;
                     }*/
                    /*var targets = $(this);
                     var pattern = restrictPattern || /[^0-9A-Z !\\"#$%&'()*+,\-.\/:;<=>?@\[\]^_`{|}~]*!/g; // some default pattern

                     var restrictHandler = function(){
                     var val = $(this).val();
                     var newVal = val.replace(pattern, '');

                     if (val !== newVal) { // To prevent selection and keyboard navigation issues
                     $(this).val(newVal);
                     }
                     };

                     targets.on('keyup', restrictHandler);
                     targets.on('paste', restrictHandler);
                     targets.on('change', restrictHandler);*/
                });
            }
        }
    });

    /* .directive('onlyDigits', function () {
     return {
     require: 'orangeTrax',
     restrict: 'A',
     link: function (scope, element, attr, ctrl) {
     function inputValue(val) {
     if (val) {
     var digits = val.replace(/[^0-9.]/g, '');

     if (digits !== val) {
     ctrl.$setViewValue(digits);
     ctrl.$render();
     }
     return parseFloat(digits);
     }
     return undefined;
     }
     ctrl.$parsers.push(inputValue);
     }
     }
     });*/


    angular.module('orangeTrax').filter('unsafe', function ($sce) {
        return function (val) {
            return $sce.trustAsHtml(val);
        };
    });

    /**
     * http://codepen.io/WinterJoey/pen/sfFaK
     *
     * */
    angular.module('orangeTrax').filter('capitalize', function () {
        return function (input, all) {
            var reg = (all) ? /([^\W_]+[^\s-]*) */g : /([^\W_]+[^\s-]*)/;
            return (!!input) ? input.replace(reg, function (txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            }) : '';
        }
    });


    /**
     * http://codepen.io/rpdasilva/pen/DpbFf
     *
     * */
    angular.module('orangeTrax').filter('tel', function () {
        return function (tel) {
            console.log(tel);
            if (!tel) {
                return '';
            }

            var value = tel.toString().trim().replace(/^\+/, '');

            if (value.match(/[^0-9]/)) {
                return tel;
            }

            var country, city, number;

            switch (value.length) {
                case 1:
                case 2:
                case 3:
                    city = value;
                    break;

                default:
                    city = value.slice(0, 3);
                    number = value.slice(3);
            }

            if (number) {
                if (number.length > 3) {
                    number = number.slice(0, 3) + '-' + number.slice(3, 7);
                }
                else {
                    number = number;
                }

                return ("(" + city + ") " + number).trim();
            }
            else {
                return "(" + city;
            }

        };
    });


})();




/**
 * Created by maduka on 9/18/15.
 */

/*(function () {
    'use strict';
    angular.module("orangeTrax").factory('_', [
        underscore
    ]);

    function underscore() {
        return window._;
    }


})();*/

(function () {
    'use strict';

    angular.module('module.customerService', []);

    //Routing
    angular.module("module.customerService").config(
        ["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //Customer Service
            .state('customerService', {
                url: '/customer-service',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@customerService': {
                        templateUrl: 'app/customer-service/customer-service.html',
                        controller: 'customerServiceController'
                    }

                },
                data: {
                    pageTitle: 'Customer Service',
                    pageName: false
                },
                private: true
            })

            //all cases
            .state('customerService.all-cases', {
                url: '/all-cases/:renderData',
                params: {
                    renderData: {squash: true, value: null}
                },
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/cases-common.html',
                        controller: 'customerServiceController'
                    }

                },
                data: {
                    pageTitle: 'Cases',
                    pageName: 'Cases'
                },
                private: true
            })


            //all cases
            .state('customerService.chart-data', {
                url: '/chart-data/:type/:year/:month/:parameter',
                params: {
                    chart_type: {squash: true, value: null},
                    year: {squash: true, value: null},
                    month: {squash: true, value: null},
                    parameter: {squash: true, value: null},
                },
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/cases-common.html',
                        controller: 'customerServiceController'
                    }

                },
                data: {
                    pageTitle: 'Cases',
                    pageName: 'Cases'
                },
                private: true
            })




            /*.state('customerService.get-all-cases', { TODO IMPL
            url: '/all-cases/:type',
            params: {
                type: {squash: true, value: null}
            },
            parent: 'customerService',
            views: {
                'content@customerService': {
                    templateUrl: 'app/customer-service/cases-common.html',
                    controller: 'customerServiceController',
                },

            },
            data: {
                pageTitle: 'Cases',
                pageName: 'Cases',
            },
            private: true
            })*/

            //Customer Service Snapshot
            .state('customerService.customerServiceSnapshot', {
                url: '/customer-service-snapshot',
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/customer-service-snapshot/customer-service-snapshot.html',
                        controller: 'customerServiceSnapshotController'
                    }

                },
                data: {
                    pageTitle: 'Customer Service Snapshot',
                    pageName: 'Customer Service Snapshot'
                },
                private: true
            })

            //Compensation Cases
            .state('customerService.compensationCases', {
                url: '/compensation-cases',
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/compensation-cases/compensation-cases.html',
                        controller: 'compensationCasesController'
                    }

                },
                data: {
                    pageTitle: 'Compensation Cases',
                    pageName: 'Compensation Cases'
                },
                private: true
            })

            //Comp Case View
            .state('customerService.compensationCases.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'customerService.compensationCases',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/compensation-cases/viewCompCaseSpecific.html',
                        controller: 'compCasesViewController'
                    }

                },
                data: {
                    pageTitle: 'View Compensation Cases',
                    pageName: 'View Compensation Cases'
                },
                private: true
            })

            //Medic Cases
            .state('customerService.medicCases', {
                url: '/medic-cases',
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/medic-cases/medic-cases.html',
                        controller: 'medicCasesController'
                    }

                },
                data: {
                    pageTitle: 'Medic Cases',
                    pageName: 'Medic Cases'
                },
                private: true
            })

            //Medic Case View
            .state('customerService.medicCases.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'customerService.medicCases',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/medic-cases/viewMedicCaseSpecific.html',
                        controller: 'medicCasesViewController'
                    }

                },
                data: {
                    pageTitle: 'View Medic Cases',
                    pageName: 'View Medic Cases'
                },
                private: true
            })

            //Replacement Cases
            .state('customerService.replacementCases', {
                url: '/replacement-cases',
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/replacement-cases/replacement-cases.html',
                        controller: 'replacementCasesController'
                    }

                },
                data: {
                    pageTitle: 'Replacement Cases',
                    pageName: 'Replacement Cases'
                },
                private: true
            })

            //Replacement Case View
            .state('customerService.replacementCases.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'customerService.replacementCases',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/replacement-cases/viewRepCaseSpecific.html',
                        controller: 'repCasesViewController'
                    }

                },
                data: {
                    pageTitle: 'View Replacement Cases',
                    pageName: 'View Replacement Cases'
                },
                private: true
            })


            //Return Cases
            .state('customerService.returnCases', {
                url: '/return-cases',
                //parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/return-cases/return-cases.html',
                        controller: 'returnCasesController'
                    }

                },
                data: {
                    pageTitle: 'Return Cases',
                    pageName: 'Return Cases'
                },
                private: true
            })

            //Return  Cases View
            .state('customerService.returnCases.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'customerService.returnCases',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/return-cases/viewReturnCaseSpecific.html',
                        controller: 'returnCasesViewController'
                    }

                },
                data: {
                    pageTitle: 'View Return Cases',
                    pageName: 'View Return Cases'
                },
                private: true
            })

            //Cancellation Cases
            .state('customerService.cancellationCases', {
                url: '/cancellation-cases',
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/cancellation-cases/cancellation-cases.html',
                        controller: 'cancellationCasesController'
                    }

                },
                data: {
                    pageTitle: 'Cancellation Cases',
                    pageName: 'Cancellation Cases'
                },
                private: true
            })

            //Cancel Case View
            .state('customerService.cancellationCases.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'customerService.cancellationCases',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/cancellation-cases/viewCancelCaseSpecific.html',
                        controller: 'cancelCasesViewController'
                    }

                },
                data: {
                    pageTitle: 'View Cancellation Cases',
                    pageName: 'View Cancellation Cases'
                },
                private: true
            })

            //Other Cases
            .state('customerService.otherCases', {
                url: '/other-cases',
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/other-cases/other-cases.html',
                        controller: 'otherCasesController'
                    }

                },
                data: {
                    pageTitle: 'Other Cases',
                    pageName: 'Other Cases'
                },
                private: true
            })

            //Other Cases
            .state('customerService.otherCases.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'customerService.otherCases',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/other-cases/viewOtherCaseSpecific.html',
                        controller: 'otherCasesViewController'
                    }

                },
                data: {
                    pageTitle: 'View Other Cases',
                    pageName: 'View Other Cases'
                },
                private: true
            });


        //delete in future -Abdulla

        //$stateProvider
        //
        //    //compensation view
        //    .state('view-compensation', {
        //        url: '/view-compensation/?compID',
        //        views: {
        //            'layout': {
        //                templateUrl: 'app/common/default-layout.html',
        //            },
        //            'content@view-compensation': {
        //                templateUrl: 'app/customer-service/compensation-cases/viewCompCaseSpecific.html',
        //                controller: 'compensationCasesViewController',
        //            },
        //
        //        },
        //        data: {
        //            pageTitle: 'Compensation Case Specific',
        //            pageName: 'Compensation Case Specific',
        //        },
        //        private: true
        //    });

        //return view
        //$stateProvider
        //
        //
        //    .state('view-return', {
        //        url: '/view-return/?returnID',
        //        views: {
        //            'layout': {
        //                templateUrl: 'app/common/default-layout.html',
        //            },
        //            'content@view-return': {
        //                templateUrl: 'app/customer-service/return-cases/viewReturnCaseSpecific.html',
        //                controller: 'returnCasesViewController',
        //            },
        //
        //        },
        //        data: {
        //            pageTitle: 'Return Case Specific',
        //            pageName: 'Return Case Specific',
        //        },
        //        private: true
        //    });

        //$stateProvider
        //
        //    //replacement view
        //    .state('view-replacement', {
        //        url: '/view-replacement/?replacementID',
        //        views: {
        //            'layout': {
        //                templateUrl: 'app/common/default-layout.html',
        //            },
        //            'content@view-replacement': {
        //                templateUrl: 'app/customer-service/replacement-cases/viewReplacementCaseSpecific.html',
        //                controller: 'replacementCasesViewController',
        //            },
        //
        //        },
        //        data: {
        //            pageTitle: 'Replacement Case Specific',
        //            pageName: 'Replacement Case Specific',
        //        },
        //        private: true
        //    });

        //$stateProvider
        //
        //    //cancel view
        //    .state('view-cancellation', {
        //        url: '/view-cancellation/?cancelID',
        //        views: {
        //            'layout': {
        //                templateUrl: 'app/common/default-layout.html',
        //            },
        //            'content@view-cancellation': {
        //                templateUrl: 'app/customer-service/cancellation-cases/viewCancellationCaseSpecific.html',
        //                controller: 'cancellationCasesViewController',
        //            },
        //
        //        },
        //        data: {
        //            pageTitle: 'Cancellation Case Specific',
        //            pageName: 'Cancellation Case Specific',
        //        },
        //        private: true
        //    });


    }


})();

/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';


    angular.module("module.customerService").service('customerCommonService', [
        '$http', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $global, authService, multipartForm) {
        return {
            getStatus: getStatusData,
            searchCaseList: searchCaseList,
            downloadReport: downloadReport,
            emailReport: emailReport
        };


        function getStatusData(type,pageLimit,currentPage,snap_type) {
            var allData = $http.post(
                $global.API_URL + 'api/crm/all_cases/', {
                    type: type,
                    limit: pageLimit,
                    page: currentPage,
                    filter: snap_type
                },
                {
                    headers:
                    {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                });
            return allData;
        }

        function searchCaseList(caseSearch,type,pageLimit,currentPage){
            var data = $http.post($global.API_URL + 'api/crm/cases/search-list/', {
                data   : caseSearch,
                type : type,
                limit  : pageLimit,
                page   : currentPage
            });

            return data;

        }

        function downloadReport(status,filter) {
            var compData = $http.post($global.API_URL + 'api/crm/list/excel/',{
                status : status,
                filter : filter
            });
            return compData;
        }

        function emailReport(status) {
            var compData = $http.post($global.API_URL + 'api/crm/list/email/',{
                status : status
            });
            return compData;
        }


    }


})();



/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('customerServiceController', [
        '$scope', '$http', '$location', 'toastr', '$state', '$global','$stateParams', '$modal', '$rootScope', 'customerCommonService', '$window', controller
    ]);

    function controller($scope, $http, $location, toastr, $state, $global,$stateParams, $modal, $rootScope, customerCommonService, $window) {

        var snap_type = $stateParams.renderData;

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;

        $scope.caseSearch = { "highPriority":null,"createDateFrom":null,"createDateTo":null,"dueDateFrom":null,"dueDateTo":null,"assignee":null,"caseId":null,"keyWords":null};
        $scope.searchCase = searchCase;
        $scope.clearList = clearList;

        $scope.pageChanged = function () {
            $scope.commonCases($scope.type);
        };


        $scope.formatDate = function (date) {
            var date = date.split("-").join("/");
            var dateOut = new Date(date);
            return dateOut;
        };


        //$scope.allCases = allCases;
        //allCases("all");

        $scope.commonCases = function(type)
        {
            if($scope.type !== type) {
                $scope.currentPage = 1;
            }

            $scope.type = type;

            customerCommonService.getStatus(type,$scope.pageLimit,$scope.currentPage,snap_type).then(function success(response) {
                $scope.allCases = response.data.cases;
                $scope.totalItems = response.data.count;
            });
        };

        $scope.commonCases("all");
        $scope.type = "all";

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };

        $scope.downloadExcel = function () {
            customerCommonService.downloadReport($scope.type, $scope.caseSearch).then(function success(response) {
                var filePath = response.data.csvName;
                $window.location.href = $scope.API_URL + 'images/cases/csv/' + filePath;
            });
        };

        $scope.sendListEmail = function () {
            customerCommonService.emailReport($scope.changeOrderStatus).then(function success(response) {
                //@TODO show msg
            });
        };

        function searchCase(){
            customerCommonService.searchCaseList($scope.caseSearch, $scope.type, $scope.pageLimit , $scope.currentPage).then(function (response) {
                $scope.allCases = response.data.cases;
                $scope.totalItems = response.data.count;
            }, function (error) {
            })

        }

        function clearList(){
            $scope.caseSearch = { "highPriority":null,"createDateFrom":null,"createDateTo":null,"dueDateFrom":null,"dueDateTo":null,"assignee":null,"caseId":null,"keyWords":null};
            $('#assign').html('');
            $scope.commonCases($scope.type);
        }

        $scope.showDetail = function (type,case_number) {

            switch(type) {
                case 'COMPENSATION':
                    $location.path('customer-service/compensation-cases/view/' + case_number);
                    break;
                case 'REPLACEMENT':
                    $location.path('customer-service/replacement-cases/view/' + case_number);
                    break;
                case 'RETURNS':
                    $location.path('customer-service/return-cases/view/' + case_number);
                    break;
                case 'CANCELLATION':
                    $location.path('customer-service/cancellation-cases/view/' + case_number);
                    break;
                case 'OTHER':
                    $location.path('customer-service/other-cases/view/' + case_number);
                    break;
                case 'MEDIC':
                    $location.path('customer-service/medic-cases/view/' + case_number);
                    break;

            }

        };

    }

})();



(function () {
    'use strict';

    angular.module('module.delivery', []);

    //Routing
    angular.module("module.delivery").config([
        "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider",
        config]);

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //Snapshot
            .state('delivery', {
                url: '/delivery',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@delivery': {
                        templateUrl: 'app/delivery/delivery.html',
                        controller : 'deliveryController'
                    }

                },
                data: {
                    pageTitle: 'delivery',
                    pageName: 'delivery'
                },
                private: true
            })


    }


})();







(function () {

    angular.module("module.delivery").controller('deliveryController', [
        '$scope', '$http', 'deliveryService', 'ordersService', 'toastr', '$state', '$window', '$rootScope', controller
    ]);


    function controller($scope, $http, deliveryService, ordersService, toastr, $state, $window, $rootScope) {


        $rootScope.spinnerTrax = true;
        var currentTime = new Date();

        $scope.selectedYear = currentTime.getFullYear();

        $scope.years = [$scope.selectedYear - 1, $scope.selectedYear, $scope.selectedYear + 1];

        $scope.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        $scope.selectedMonth = currentTime.getMonth();

        /*var ploatCHARTOption = {

         xaxis: {

         mode: "categories",

         font: {

         lineHeight: 13,
         style: "normal",
         weight: "bold",
         family: "sans-serif",
         variant: "small-caps",
         color: "#6F7B8A"

         }
         },

         yaxis: {

         ticks: 3,
         tickDecimals: 0,
         tickColor: "#f0f0f0",
         font: {
         lineHeight: 13,
         style: "normal",
         weight: "bold",
         family: "sans-serif",
         variant: "small-caps",
         color: "#6F7B8A"
         }

         },
         grid: {

         backgroundColor: {colors: ["#fff", "#fff"]},
         borderWidth: 1, borderColor: "#f0f0f0",
         margin: 0,
         minBorderMargin: 0,
         labelMargin: 20,
         hoverable: true,
         clickable: true,
         mouseActiveRadius: 6

         },

         legend: {show: false}

         };*/

        var ploatCHARTOption = {
            xaxis: {
                mode: "categories",

                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            yaxis: {
                ticks: 3,
                tickDecimals: 0,
                tickColor: "#f0f0f0",
                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            grid: {
                backgroundColor: {colors: ["#fff", "#fff"]},
                borderWidth: 1, borderColor: "#f0f0f0",
                margin: 0,
                minBorderMargin: 0,
                labelMargin: 20,
                hoverable: true,
                clickable: true,
                mouseActiveRadius: 6
            },
            legend: {show: false}
        };
        var currentTime = new Date();

        $scope.title = "Orders Closed";

        $scope.tab = "delivery";


        $scope.settab = function (year, month, tab) {

            $scope.tab = "delivery";
            tab = "delivery";


            var year = currentTime.getFullYear();
            var month = currentTime.getMonth();
            $scope.Year = year;
            month = currentTime.getMonth();

            $scope.title = "Orders In Transit";
            $scope.piechart_title = "Open Orders";

            $scope.graph1_title = "Orders In Transit";
            $scope.graph2_title = "Delivered Orders";




            $scope.pieDataset1 = "";
            $scope.pieDataset2 = "";
            $scope.pieDataset3 = "";

            $scope.promotion_performance = "";

            getChartData($scope.selectedYear, $scope.selectedMonth, tab);

        };


        function getChartData(year, month, tab) {

            deliveryService.getChartData(year, month + 1, tab).then(
                function (snapshotDetails) {
                    $rootScope.spinnerTrax = false;
                    var chart_data = snapshotDetails.data;

                    var ploatCHARTData = [
                        {
                            label: "Revenue",
                            data: chart_data.d2,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#f2be3e']
                        }, {
                            data: chart_data.d1,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d1,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#F85D2C",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d2,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#f2be3e",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    //  var chart_data2 = snapshotDetails.data_del;

                    var ploatCHARTData2 = [
                        {
                            label: "Revenue",
                            data: chart_data.d3,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#fffff']
                        }, {
                            data: chart_data.d3,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d3,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#F85D2C",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d3,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#f2be3e",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    var ploatCHARTData0 = [
                        {
                            data: chart_data.d0,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d0,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }


                    ];

                    $scope.pieOptions1 = {
                        series: {
                            pie: {
                                show: true,
                                label: {
                                    show: true,
                                    radius: .5,
                                    formatter: labelFormatter,
                                    background: {
                                        opacity: 0
                                    }
                                },

                            }
                        },
                        grid: {
                            hoverable: true,
                            clickable: true
                        },
                        colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                    }


                    $scope.myData = ploatCHARTData;

                    $scope.myChartOptions = ploatCHARTOption;
                    $scope.ordersShippedData = ploatCHARTData0;
                    $scope.graph_shipped_title = "Shipped Orders";

                    $scope.pieDataset1 = chart_data.snapshots.openOrders;

                    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

                    $scope.boxAval = snapshotDetails.deliverd_data.DeliveredOrdersCount;
                    $scope.boxAtitle = "NUMBER OF DELIVERED ORDERS as of " + months[month];

                    $scope.boxBval = snapshotDetails.deliverd_data.DeliveredOrderValue;
                    $scope.boxBtitle = "VALUE OF DELIVERED ORDERS as of " + months[month];

                    $scope.boxCval = snapshotDetails.deliverd_data.inTransItOrdersCount;
                    $scope.boxCtitle = "ORDERS IN TRANSIT as of " + months[month];

                    $scope.boxDval = snapshotDetails.deliverd_data.inTransItOrderValue;
                    $scope.boxDtitle = "VALUE OF ORDERS IN TRANSIT as of " + months[month];

                    $scope.myData2 = ploatCHARTData2;
                    $scope.myChartOptions = ploatCHARTOption;
                    month_index=month+1;
                    $scope.boxAShippedurl = "#!/orders/list/3/" + year + "/" + month_index;
                    $scope.boxAShippedValue = snapshotDetails.deliverd_data.shipped_order_count;
                    $scope.boxAShippedurlAtitle = "Number of Shipped Orders as of " + months[month];

                    $scope.boxBShippedurl = "#!/orders/list/3/" + year + "/" + month_index;
                    $scope.boxBShippedValue = snapshotDetails.deliverd_data.shipped_order_value;
                    $scope.boxBShippedurlBtitle = "Value of Shipped Orders as of " + months[month];

                    $scope.box1url = "#!/orders/list/3/" + year + "/" + month_index;
                    $scope.box2url = "#!/orders/list/3/" + year + "/" + month_index;
                    $scope.box3url = "#!/orders/list/2/" + year + "/" + month_index;
                    $scope.box4url = "#!/orders/list/2/" + year + "/" + month_index;


                }
            );

        }


        $scope.setYear = function (data) {

            $scope.selectedYear = data;

            if (currentTime.getFullYear() == data) {
                $scope.selectedMonth = currentTime.getMonth();

            } else {
                $scope.selectedMonth = 0;

            }


            setChart($scope.selectedYear, $scope.selectedMonth, $scope.tab);

        };


        $scope.setMonth = function (data) {

            $scope.selectedMonth = data;
            setChart($scope.selectedYear, $scope.selectedMonth, $scope.tab);


        };


        function setChart(year, month, type) {
            var year = year;
            var month = month + 1;

            $rootScope.spinnerTrax = true;
            deliveryService.getChartData(year, month, type).then(
                function (snapshotDetails) {
                    $rootScope.spinnerTrax = false;
                    var chart_data = snapshotDetails.data;

                    var ploatCHARTData = [
                        {
                            label: "Revenue",
                            data: chart_data.d2,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#f2be3e']
                        }, {
                            data: chart_data.d1,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d1,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#F85D2C",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d2,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#f2be3e",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    //  var chart_data2 = snapshotDetails.data_del;

                    var ploatCHARTData2 = [
                        {
                            label: "Revenue",
                            data: chart_data.d3,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#fffff']
                        }, {
                            data: chart_data.d3,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d3,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#F85D2C",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d3,
                            points: {
                                show: true,
                                fill: true,
                                radius: 6,
                                fillColor: "#f2be3e",
                                lineWidth: 3
                            },
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    var ploatCHARTData0 = [
                        {
                            data: chart_data.d0,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d0,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }


                    ];

                    $scope.pieOptions1 = {
                        series: {
                            pie: {
                                show: true,
                                label: {
                                    show: true,
                                    radius: .5,
                                    formatter: labelFormatter,
                                    background: {
                                        opacity: 0
                                    }
                                },

                            }
                        },
                        grid: {
                            hoverable: true,
                            clickable: true
                        },
                        colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                    }


                    $scope.myData = ploatCHARTData;

                    $scope.myChartOptions = ploatCHARTOption;
                    $scope.ordersShippedData = ploatCHARTData0;
                    $scope.graph_shipped_title = "Orders Shipped";

                    $scope.pieDataset1 = chart_data.snapshots.openOrders;

                    $scope.boxAval = snapshotDetails.deliverd_data.DeliveredOrdersCount;
                    $scope.boxAtitle = "NUMBER OF DELIVERED ORDERS";

                    $scope.boxBval = snapshotDetails.deliverd_data.DeliveredOrderValue;
                    $scope.boxBtitle = "VALUE OF DELIVERED ORDERS";

                    $scope.boxCval = snapshotDetails.deliverd_data.inTransItOrdersCount;
                    $scope.boxCtitle = "ORDERS IN TRANSIT";

                    $scope.boxDval = snapshotDetails.deliverd_data.inTransItOrderValue;
                    $scope.boxDtitle = "VALUE OF ORDERS IN TRANSIT";

                    $scope.myData2 = ploatCHARTData2;
                    $scope.myChartOptions = ploatCHARTOption;


                    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

                    $scope.boxAShippedurl = "#!/orders/list/3/" + year + "/" + month;
                    $scope.boxAShippedValue = snapshotDetails.deliverd_data.shipped_order_count;
                    $scope.boxAShippedurlAtitle = "Number of Shipped Orders as of " + months[$scope.selectedMonth];

                    $scope.boxBShippedurl = "#!/orders/list/3/" + year + "/" + month;
                    $scope.boxBShippedValue = snapshotDetails.deliverd_data.shipped_order_value;
                    $scope.boxBShippedurlBtitle = "Value of Shipped Orders as of " + months[$scope.selectedMonth];

                    $scope.box1url = "#!/orders/list/3/" + year + "/" + month;
                    $scope.box2url = "#!/orders/list/3/" + year + "/" + month;
                    $scope.box3url = "#!/orders/list/2/" + year + "/" + month;
                    $scope.box4url = "#!/orders/list/2/" + year + "/" + month;

                    $scope.boxAval = snapshotDetails.deliverd_data.DeliveredOrdersCount;
                    $scope.boxAtitle = "NUMBER OF DELIVERED ORDERS as of " + months[$scope.selectedMonth];

                    $scope.boxBval = snapshotDetails.deliverd_data.DeliveredOrderValue;
                    $scope.boxBtitle = "VALUE OF DELIVERED ORDERS as of " + months[$scope.selectedMonth];

                    $scope.boxCval = snapshotDetails.deliverd_data.inTransItOrdersCount;
                    $scope.boxCtitle = "ORDERS IN TRANSIT as of " + months[$scope.selectedMonth];

                    $scope.boxDval = snapshotDetails.deliverd_data.inTransItOrderValue;
                    $scope.boxDtitle = "VALUE OF ORDERS IN TRANSIT as of " + months[$scope.selectedMonth];


                }, function (error) {
                    $rootScope.spinnerTrax = false;
                }
            );


        }


        $scope.onEventPieClicked = function (event, pos, obj, pie_type) {
            //if (!obj) {
            //    return;
            //}
            //var percent = parseFloat(obj.series.percent).toFixed(2);
            //var year = currentTime.getFullYear()
            //$scope.selectedMonth = currentTime.getMonth() + 1;
            //var month = currentTime.getMonth() + 1;
            //
            //
            //if (pie_type == "order") {
            //    //year/month/type
            //    $window.location.href = '/#!/orders/list/3/' + year + '/' + month + '/' + obj.series.label;
            //
            //
            //} else if (pie_type == "customer") {
            //
            //
            //    var cases_array = new Array("Cases Less than 5", "Cases > 5", "Cases > 15", "Cases > 30", "Cases > 60", "Cases > 90");
            //    var casestatus_array = new Array("Open", "In Progress", "Resolved", "Cancelled", "Closed as unresolved");
            //    var casestype_array = new Array("Compensation", "Replacement", "Return", "Cancellation", "Medic", "Other");
            //
            //    var parameter = cases_array.indexOf(obj.series.label);
            //
            //
            //    if (-1 < cases_array.indexOf(obj.series.label)) {
            //
            //        var chart_type = "open_cases";
            //
            //    }
            //
            //    if (-1 < casestatus_array.indexOf(obj.series.label)) {
            //
            //        var chart_type = "case_status";
            //
            //    }
            //
            //    if (-1 < casestype_array.indexOf(obj.series.label)) {
            //
            //        var chart_type = "case_type";
            //
            //
            //    }
            //    //  /chart-data/:chart_type/:year/:month/:parameter
            //    $window.location.href = '#!/customer-service/chart-data/open/' + year + '/' + month + '/' + parameter;
            //
            //
            //} else if (pie_type == "order") {
            //
            //
            //} else if (pie_type == "delivery") {
            //
            //
            //}


        }


        function labelFormatter(label, series) {
            return "<div style='font-size:8pt; text-align:center; padding:2px; color:white;'>" + label + "<br/>" + Math.round(series.percent) + "%</div>";
        }


        /*$scope.onEventPloatHover = function (event, pos, item){

         if (item) {

         if (previousPoint != item.dataIndex) {

         previousPoint = item.dataIndex;

         $("#tooltip").remove();
         var x = item.datapoint[0].toFixed(2),
         y = item.datapoint[1].toFixed(2);

         showTooltip(item.pageX, item.pageY,
         "<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" + Math.round(x)  + " NOV 2013 </strong></p>" +
         "<div style='padding: 0 10px 10px;'>" +
         "<div>" + item.series.label +": <strong>"+ Math.round(y)  +"</strong></div>" +
         "<div> Profit: <strong>$"+ Math.round(y)*7  +"</strong></div>" +
         "</div>"
         );
         }
         } else {
         $("#tooltip").remove();
         previousPoint = null;
         }
         }*/

        $scope.onEventPloatHover = function (event, pos, item) {


            if (item) {

                if (previousPoint != item.dataIndex) {

                    previousPoint = item.dataIndex;

                    $("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2),
                        y = item.datapoint[1].toFixed(2);
                    var amount = item.series.data[item.dataIndex][2];

                    var month = "";
                    var m = Math.round(x);

                    switch (m) {
                        case 0:
                        {
                            month = "JAN";
                            break;
                        }
                        case 1:
                        {
                            month = "FEB";
                            break;
                        }
                        case 2:
                        {
                            month = "MAR";
                            break;
                        }
                        case 3:
                        {
                            month = "APR";
                            break;
                        }
                        case 4:
                        {
                            month = "MAY";
                            break;
                        }
                        case 5:
                        {
                            month = "JUN";
                            break;
                        }
                        case 6:
                        {
                            month = "JUL";
                            break;
                        }
                        case 7:
                        {
                            month = "AUG";
                            break;
                        }
                        case 8:
                        {
                            month = "SEP";
                            break;
                        }
                        case 9:
                        {
                            month = "OCT";
                            break;
                        }
                        case 10:
                        {
                            month = "NOV";
                            break;
                        }
                        case 11:
                        {
                            month = "DEC";
                            break;
                        }

                    }


                    var html = "<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" + month + " " + $scope.Year + "</strong></p>" +
                        "<div style='padding: 0 10px 10px;'>" +
                        "<div>Number: <strong>" + Math.round(y) + "</strong></div>";

                    if (typeof amount == 'undefined') {

                    } else {

                        html += "<div>Value($): <strong>" + amount + "</strong></div>" +
                            "</div>";

                    }
                    showTooltip(item.pageX, item.pageY, html);


                }
            } else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        }

        function showTooltip(x, y, contents) {
            $('<div id="tooltip">' + contents + '</div>').css({
                position: 'absolute',
                display: 'none',
                top: y + 5,
                left: x + 20,
                size: '10',
//              'border-top' : '3px solid #1FAE66',
                'background-color': '#111111',
                color: "#FFFFFF",
                opacity: 0.85
            }).appendTo("body").fadeIn(200);
        }
    }


})();


(function () {

    angular.module("module.delivery").service('deliveryService', [
        '$http', '$q', '$global','ordersService', service
    ]);

    function service($http, $q, $global) {
        return {
            getChartData: getChartData,
            getChartData2:getChartData2
        };


        function getChartData2(year, month,type) {
            var snapshotData = [];



            switch(type) {

                case "customer":
                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "order":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/orders',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "delivery":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/delivery',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                default:
                    $scope.months ={};

            }
            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                snapshotData = response.data;

                return snapshotData;
            }

            function handleError(response) {
            }

        }
        /*function getChartData2(year, month,type) {
            var snapshotData = [];



            switch(type) {

                case "customer":
                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "order":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/orders',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "delivery":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/delivery',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                default:
                    $scope.months ={};

            }
            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                    snapshotData = response.data;//TODO check DS

                return snapshotData;
            }

            function handleError(response) {
            }

        }*/


        function getChartData(year, month,type) {
            var snapshotData = [];



            switch(type) {

                case "delivery":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/delivery',
                        {
                            year: year,
                            month: month
                        }
                    );

                    break;
                default:
                    $scope.months ={};

            }




            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                snapshotData = response.data;

                return snapshotData;
            }

            function handleError(response) {
            }

        }

    }
})();
/**
 * Created by gayani on 10/20/15.
 */

(function () {
    'use strict';

    angular.module('module.customers', []);

    //Routing
    angular.module("module.customers").config(
        [ "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //Customer
            .state('customers', {
                url: '/customers',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@customers': {
                        templateUrl: 'app/customers/customer.html',
                        controller: 'customerController'
                    }

                },
                data: {
                    pageTitle: 'Customer',
                    pageName: false
                },
                private: true
            })

            //customer view
            .state('customers.view', {
                url: '/view/:id',
                parent: 'customers',
                views: {
                    'content@customers': {
                        templateUrl: 'app/customers/customer-specific.html',
                        controller: 'customerController'
                    }

                },
                data: {
                    pageTitle: 'Customer Specific',
                    pageName: 'Customer Specific'
                },
                private: true
            });

    }


})();

/**
 * Created by gayani on 10/20/15.
 */

(function () {
    'use strict';

    angular.module("module.customers").controller('customerController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'customerService','$window', '$stateParams', '$location', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, customerService, $window, $stateParams , $location) {

        $scope.viewCustomer = viewCustomer;
        $scope.addAttchement = addAttchement;
        $scope.hideViewAs = true;

        $scope.showDetail = function (po_id) {
            $location.path('/orders/list/view/' + po_id +'/1/1');
        };
        var cusID = $stateParams.id;

        viewCustomer(cusID);

            customerService.getAttachmentList(cusID).then(function success(response) {
                $scope.attachments = response.data.attachments;
            });

        function addAttchement(){
            formOpenModal();
        }

        function formOpenModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customers/newCustomerAttachmentModal.html',
                controller: 'formCustomersModalController',
                size: 'md',
                resolve: {

                }
            });

            modalInstance.result.then(function (result) {
                if (result.attachm) {
                    $scope.attachments.unshift(result.attachm.data.cus_attachment);
                }
            });
        }

        $scope.formatDate = function(date){
            var date = date.split("-").join("/");
            var dateOut = new Date(date);
            return dateOut;
        };

        function viewCustomer(cusID){
            customerService.getCustomerDetails(cusID).then(function (response) {
                $scope.customer =response.data.customerData;
                $scope.orders = response.data.orderData;
                $scope.orderTotal = response.data.total;
                $scope.average = response.data.average;
                //console.log($scope.customer);
                var phone = $scope.customer.customer_phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");

            }, function (error) {
            });
        }


    }//

    angular.module('module.customers').controller('formCustomersModalController',
        ['modalService','$scope', '$modalInstance', 'customerService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', formCustomersModalController]);
    function formCustomersModalController(modalService,$scope, $modalInstance,  customerService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.cusAttach = {};
        $scope.saveAttachment = saveAttachment;
        $scope.cusAttach.cusID = $stateParams.id;
      //  $scope.cusAttach.createdBy = authService.getToken();

        function saveAttachment(cusAttach){
            customerService.saveAttach(cusAttach).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.attachm = response;
                    $modalInstance.close(res);
                    toastr.success('Attachment has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };
    }

})();



/**
 * Created by gayani on 10/20/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").service('customerService', [
        '$http', '$q', '$global', 'multipartForm', service
    ]);

    function service($http, $q, $global, multipartForm) {
        return {
            getCustomerDetails : getCustomerDetails,
            saveAttach : saveAttach,
            getAttachmentList:getAttachmentList
        };

        function  getCustomerDetails(ID) {
            var allData = $http.post($global.API_URL + 'api/crm/customer/details/', {
                customerID: ID
            });
            return allData;
        }

        function saveAttach(attachment){
            //console.log(attachment);
            return multipartForm.post($global.API_URL + 'api/crm/customer/attachment/', attachment);
        }

        function getAttachmentList(id) {
            var attachList = $http.post($global.API_URL + 'api/crm/customer/attachment/list/', id);
            return attachList;
        }


    }


})();



(function () {
    'use strict';

    angular.module('module.faqs', []);

    //Routing
    angular.module("module.faqs").config([
        "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider",
        config]);

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //FAQs
            .state('faqs', {
                url: '/faqs',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@faqs': {
                        templateUrl: 'app/faqs/faqs.html',
                        controller: 'faqsController'
                    }

                },
                data: {
                    pageTitle: 'FAQ',
                    pageName: 'FAQ'
                },
                private: false
            });


    }


})();

/**
 * Created by gayani on 9/8/15.
 */

(function () {

    angular.module("module.faqs").controller('faqsController',[
        '$scope', '$http', 'faqsService', '$global', 'toastr', '$state', '$modal','$rootScope', controller
    ]);

    function controller($scope, $http, faqsService, $global, toastr, $state, $modal,$rootScope){


        $scope.faqs = faqsService.getFaqs();

        $scope.viewFaq = viewFaq;

        function viewFaq(id){

            formOpenModal(id);
        }

        function formOpenModal(id) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/faqs/viewFaqModal.html',
                controller: 'formFaqModalController',
                size: 'lg',
                resolve: {
                    id: function () {
                        return id;
                    }
                }
            });

            modalInstance.result.then(function (result) {

            });
        }
    }//controller1


    angular.module('module.faqs').controller('formFaqModalController',
        ['modalService','$scope', '$modalInstance', 'id', 'faqsService', 'toastr', '$window','$rootScope', formFaqModalController]);
    function formFaqModalController(modalService,$scope, $modalInstance, id, faqsService, toastr, $window,$rootScope) {



       // $scope.faq_det = faqsService.getFaqById(id).data;

        faqsService.getFaqById(id)
            .then(function(responce) {

                $scope.faqID = responce.data.data[0].id;
                $scope.question = responce.data.data[0].faq_question;
                $scope.answer = responce.data.data[0].faq_answer;
            });


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };
    }

})();


/**
 * Created by gayani on 9/8/15.
 */

(function () {

   // var host = "http://ot-service.dev";

    angular.module("module.faqs").service('faqsService', [
        '$http', '$global', service
    ]);

    function service($http , $global)
    {
        return {
            getFaqs: getFaqs,
            getFaqById: getFaqById

        };

        function getFaqs() {

            var allData = [];

            $http.get($global.API_URL + 'api/faq/category/list/').success(function (data) {

                allData.output =  data;
            });

            return allData;

        }

        function getFaqById(id){
            var allData = $http.post($global.API_URL + 'api/faq/category/question/', {
                faq_id : id
            });
            return allData;
        }
    }


})();
(function () {
    'use strict';

    angular.module('module.gallery', []);

    //Routing
    angular.module('module.gallery').config(
        [ "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //Gallery
            .state('gallery', {
                url: '/gallery',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@gallery': {
                        templateUrl: 'app/gallery/gallery.html',
                        controller: 'galleryController'
                    }

                },
                data: {
                    pageTitle: 'Gallery',
                    pageName: 'Gallery'
                },
                private: true
            })

            //Orders list
            /**.state('productsCatalogue.categories', {
                url: '/product-category',
                parent: 'productsCatalogue',
                views: {
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/product-category/categories.html',
                        controller: 'productCategoryController',
                    },

                },
                data: {
                    pageTitle: 'Products Catalogue - Categories',
                    pageName: 'Categories',
                },
                private: true
            })*/

            //Orders list
            /**.state('productsCatalogue.products', {
                url: '/products',
                //parent: 'productsCatalogue',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/products.html',
                        controller: 'productController'
                    }
                },
                data: {
                    pageTitle: 'Products Catalogue - Products',
                    pageName: 'Products'
                },
                private: true
            })*/


    }


})();
/**
 * Created by gayani on 10/20/15.
 */

(function () {
    'use strict';
    angular.module("module.gallery").controller('galleryController', [
        '$scope', '$rootScope','$http', '$filter', 'toastr', '$global', '$location', '$modal','$window', 'galleryService', galleryController
    ]);

    function galleryController($scope, $rootScope, $http, $filter, toastr, $global, $location, $modal, $window, galleryService) {

        var today = new Date();
        var this_year = today.getFullYear();

        $scope.years = [this_year.toString(), (this_year + 1).toString(), (this_year + 2).toString()];
        //$scope.years = ["2015", "2016", "2017"];
        $scope.selectedYear = 0;
        $scope.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        $scope.selectedMonth = $filter('date')(new Date(), 'MM')-1;
        //$scope.selectedMonth = 0;
        $scope.promotions = [];
        $scope.retailers = [];
        $scope.linkedCollection = [];
        $scope.promotion = {"id":null};
        $scope.selectedGalleryPlatform = null;
        $scope.isCreateOrUpdate = false;

        $scope.setYear = function (selectedYear) {
            $scope.selectedYear = selectedYear;
            $scope.selectedMonth = 0;
            $scope.isCreateOrUpdate = false;
            getPromotions();
        };

        $scope.setMonth = function (selectedMonth) {
            $scope.selectedMonth = selectedMonth;
            $scope.isCreateOrUpdate = false;
            getPromotions();
        };

        if($scope.id){
            $scope.selectedGalleryPlatform = $scope.id;
        }

        function getPromotions() {
            $rootScope.spinnerTrax = true;

            if($scope.id && !$scope.isCreateOrUpdate){
                $scope.selectedGalleryPlatform = $scope.id;
            }

            galleryService.getPromotions({
                "selectedYear": $scope.years[$scope.selectedYear],
                "selectedMonth": ($scope.selectedMonth + 1),
                "selectedPlatform": $scope.selectedGalleryPlatform,
                "selectedPlatformType": $scope.selectedPlatformType
            }).then(function success(response) {
                $rootScope.spinnerTrax = false;
                $scope.promotions = response.promotions;
            }, function error(error) {
                $rootScope.spinnerTrax = false;
            });
        }

        getPromotions();

        function getRetailers() {
            if($scope.labelGroup==2) {
                $rootScope.spinnerTrax = true;
                galleryService.getRetailers({
                    "selectedPlatform": $scope.selectedGalleryPlatform,
                    "selectedPlatformType": $scope.selectedPlatformType
                }).then(function success(response) {
                    $rootScope.spinnerTrax = false;
                    $rootScope.retailers = response.retailers;
                    $rootScope.linkedCollection = response.linkedCollection;
                }, function error(error) {
                    $rootScope.spinnerTrax = false;

                });
            }
        }

        getRetailers();


        $scope.downloadPromotion = function () {
            $rootScope.spinnerTrax = true;

            if($scope.id && !$scope.isCreateOrUpdate){
                $scope.selectedGalleryPlatform = $scope.id;
            }

            galleryService.downloadPromotion({
                "selectedYear": $scope.years[$scope.selectedYear],
                "selectedMonth": ($scope.selectedMonth + 1),
                "selectedPlatform": $scope.selectedGalleryPlatform,
                "selectedPlatformType": $scope.selectedPlatformType
            }).then(function success(response) {

                $rootScope.spinnerTrax = false;
                var filePath = response.csvName;
                $window.location.href = $scope.API_URL + 'images/products/csv/' + filePath;


            }, function error(error) {
                $rootScope.spinnerTrax = false;
            });
        }


        $scope.sendEmailPromotion = function () {
            $rootScope.spinnerTrax = true;

            if($scope.id && !$scope.isCreateOrUpdate){
                $scope.selectedGalleryPlatform = $scope.id;
            }

            galleryService.sendEmailPromotion({
                "selectedYear": $scope.years[$scope.selectedYear],
                "selectedMonth": ($scope.selectedMonth + 1),
                "selectedPlatform": $scope.selectedGalleryPlatform,
                "selectedPlatformType": $scope.selectedPlatformType
            }).then(function success(response) {
                $rootScope.spinnerTrax = false;

                toastr.success('Email has been sent successfully.');

            }, function error(error) {
                $rootScope.spinnerTrax = false;
            });
        }

        $scope.validatedSingleRow = false;

        $scope.openPromotionModal  = function(){
            var modalInstance = $modal.open({

                animation: true,
                templateUrl: 'app/gallery/promoModal.html',
                controller: 'promoModalCtrl',
                size: 'md',
                resolve: {
                    promotion: function () {
                        return angular.copy($scope.promotion);
                    },
                    retailers: function () {
                        return angular.copy($rootScope.retailers);
                    },
                    linkedCollection: function () {
                        return angular.copy($rootScope.linkedCollection);
                    }
                }

            });

            modalInstance.result.then(function () {
            }, function () {
            //TO-DO
            });
        };

        $scope.promotionAdd = function() {
            $scope.promotion = {"id":null};
            $scope.openPromotionModal();
        };

        $scope.promotionEdit = function(singlePromotion) {
            $rootScope.spinnerTrax = true;
            galleryService.readPromotion({
                "readPromotion": singlePromotion.promotionId
            }).then(function success(response) {
                $rootScope.spinnerTrax = false;
                $scope.promotion = response.promotion;
                $scope.promotion.startDate = splitDateComponent($scope.promotion.startDate);
                $scope.promotion.endDate = splitDateComponent($scope.promotion.endDate);
                $scope.openPromotionModal();
            }, function error(error) {
                $rootScope.spinnerTrax = false;

            });
        };

        $scope.promotionView = function(singlePromotion){

            var modalInstance = $modal.open({
                animation: true,
                templateUrl: 'app/gallery/promoViewModal.html',
                controller: 'promoViewModalCtrl',
                size: 'lg',
                resolve: {
                    singlePromotionId: function () {
                        return singlePromotion;
                    }
                }
            });
        };

        $scope.deletePromotionConfirm = function (deletePromotion) {

            var modalInstance = $modal.open({
                animation: true,
                templateUrl: 'app/gallery/promotionDeleteModal.html',
                controller: 'promoDeleteModalCtrl',
                size: 'md',
                resolve: {
                    deletePromotion: function () {
                        return angular.copy(deletePromotion);
                    }
                }
            });

            modalInstance.result.then(function () {
            }, function () {});
        };

        $scope.$on("editPromotionEvent", function (event, args) {
            $scope.promotionEdit(args.singleViewPromotion);
        });

        $scope.$on("deletePromotionEvent", function (event, args) {
            $scope.deletePromotionConfirm(args.singleViewPromotion);
        });

        $scope.$on("reloadListingEvent", function (event, args) {

            var actionType = args.actionType;
                if(actionType==1){
                    var startDate = args.startDate;
                    var year = $filter('date')(new Date(startDate), 'yyyy');
                    var yearIndex = arrayObjectIndexOf(year);
                    if(yearIndex >=0) {
                        $scope.selectedYear = yearIndex;
                        $scope.selectedMonth = $filter('date')(new Date(startDate), 'MM')-1;
                        getPromotions();
                    }

                    $scope.selectedGalleryPlatform = args.selectedGalleryPlatform;
                    $scope.isCreateOrUpdate = true;
                 } else {
                    getPromotions();
                 }
        });

        function arrayObjectIndexOf(obj){
            for(var i = 0; i < $scope.years.length; i++){
                if(angular.equals($scope.years[i], obj)){
                    return i;
                }
            }
            return -1;
        }

        function splitDateComponent(dateString){

            var dateComponents = dateString.split("-");
            var year = Number(dateComponents[0]);
            var month = Number(dateComponents[1])-1;
            var date = Number(dateComponents[2]);

            return new Date(year, month, date);
        }
    }

    angular.module("module.gallery").controller('promoModalCtrl', [
        'modalService','$scope', '$rootScope', '$http', '$filter', '$location', '$modalInstance', '$modal', '$window', 'toastr', 'promotion', 'retailers', 'linkedCollection', 'galleryService', promotionModalController
    ]);

    function promotionModalController(modalService,$scope, $rootScope, $http, $filter, $location, $modalInstance, $modal, $window, toastr, promotion, retailers, linkedCollection,  galleryService) {

        $scope.promotion = promotion;
        $scope.retailers = retailers;
        $scope.linkedCollection = linkedCollection;

        $scope.validatedSingleRow = false;
        $scope.submitted = false;

        $scope.open = function($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };

        $scope.$watch('promotion.startDate', validateDates);
        $scope.$watch('promotion.endDate', validateDates);

        function validateDates() {
            if (!$scope.promotion) return;
            if ($scope.promotionForm.startDate.$error.invalidDate || $scope.promotionForm.endDate.$error.invalidDate) {
            } else {
                var endDate = new Date($scope.promotion.endDate);
                var startDate = new Date($scope.promotion.startDate);
                $scope.promotionForm.endDate.$setValidity("endBeforeStart", endDate >= startDate);
            }
        }

        $scope.createOrUpdate = function () {

            if (validateSettingRecords()) {
                $scope.submitted = true;
                galleryService.createPromotion({
                    "promotion": $scope.promotion
                }).then(function success(response) {
                    if($scope.promotion.id==null) {
                        if(response.submitStatus==0){
                            toastr.error('ERROR!', 'Promotion dates over lap with another promotion.');
                            $scope.submitted = false;
                        } else {
                            toastr.success('Promotion has been created successfully.');
                            $rootScope.$broadcast("reloadListingEvent", {actionType: 1, startDate: $scope.promotion.startDate, selectedGalleryPlatform:$scope.promotion.company.id});
                            $modalInstance.close($scope.promotion);
                        }
                    } else {
                        toastr.success('Promotion has been updated successfully.');
                        $rootScope.$broadcast("reloadViewPromotionEvent");
                        $rootScope.$broadcast("reloadListingEvent", {actionType: 1, startDate: $scope.promotion.startDate, selectedGalleryPlatform:$scope.promotion.company.id});
                        $modalInstance.close($scope.promotion);
                    }
                }, function error(error) {
                        toastr.error('ERROR!', 'Promotion submission has been failed.');
                });
            }

        };

        function validateSettingRecords(){
            var singleRecordValidated = false;
            angular.forEach($scope.promotion.promotionSettings, function($singlePromotionSetting) {
                if(singleRecordValidated==false){
                    if($singlePromotionSetting.expectedSales > 0 && $singlePromotionSetting.promotionalPrice > 0){
                        singleRecordValidated = true;
                    }
                }
            });

            return singleRecordValidated;
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


        $scope.loadCollectionSettings = function($item) {
            galleryService.getCollectionSettings({
                "selectedCollection": $item.id
            }).then(function success(response) {
                $scope.collectionSettings = response.collectionSettings;

                $scope.promotion.promotionSettings = [];

                angular.forEach($scope.collectionSettings, function($singleSetting) {
                    var promotionSetting = {"configuration":$singleSetting, "id":null, "expectedSales":null,"promotionalPrice": Math.round($singleSetting.currentPrice) };
                    $scope.promotion.promotionSettings.push(promotionSetting);
                });
            }, function error(error) {

            });
        };

        $scope.loadExistingCollectionSettings = function($product) {
            galleryService.getCollectionSettings({
                "selectedCollection": $product.id
            }).then(function success(response) {
                $scope.collectionSettings = response.collectionSettings;

                angular.forEach($scope.collectionSettings, function($singleSetting) {

                    var settingIndex = $scope.promotion.promotionSettings.map(function ($singlePromotionSetting) {
                        return $singlePromotionSetting.configuration.id;
                    }).indexOf($singleSetting.id);

                    if(settingIndex >= 0){
                    } else {
                        var promotionSetting = {"configuration":$singleSetting, "id":null, "expectedSales":null,"promotionalPrice":Math.round($singleSetting.currentPrice) };
                        $scope.promotion.promotionSettings.push(promotionSetting);
                    }

                });
            }, function error(error) {

            });
        };

        if ($scope.promotion.id != null) {
            $scope.retailerIndex = $rootScope.retailers.map(function (retailer) {
                return retailer.id;
            }).indexOf($scope.promotion.company.id);
            $scope.promotion.company = $rootScope.retailers[$scope.retailerIndex];
            $scope.loadExistingCollectionSettings($scope.promotion.collection);
        }

    }

    angular.module("module.gallery").controller('promoViewModalCtrl', [
        'modalService','$scope', '$rootScope','$http', '$location', '$modalInstance', 'toastr', '$modal', '$window', 'galleryService', 'singlePromotionId', promotionViewModalController
    ]);

    function promotionViewModalController(modalService,$scope, $rootScope, $http, $location, $modalInstance, toastr, $modal, $window, galleryService, singlePromotion) {

        $scope.singleViewPromotion = {"collectionName":null,"startDate":null,"dateDifference":null,"runningDifference":null,"calEndDate":null,"projectionUpToDate":null};

        $scope.getSingleViewPromotion = function() {
            galleryService.getSinglePromotion({
                "selectedSinglePromotion": singlePromotion
            }).then(function success(response) {
                $scope.singleViewPromotion = response.singleViewPromotion;

                var startDate = $scope.singleViewPromotion.startDate;
                var endDate = $scope.singleViewPromotion.calEndDate;

                var dt1 = startDate.split('-'),
                    dt2 = endDate.split('-'),
                    one = new Date(dt1[2], dt1[1]-1, dt1[0]),
                    two = new Date(dt2[2], dt2[1]-1, dt2[0]);

                var millisecondsPerDay = 1000 * 60 * 60 * 24;
                var millisBetween = two.getTime() - one.getTime();
                var days = Math.ceil(millisBetween / millisecondsPerDay);

                $scope.singleViewPromotion.dateDifference = days;

                var three =  new Date();
                var millisBetweenCurrent = three.getTime() - one.getTime();
                var currentDays = Math.ceil(millisBetweenCurrent / millisecondsPerDay);

                $scope.singleViewPromotion.runningDifference = currentDays;

                if($scope.singleViewPromotion.dateDifference > $scope.singleViewPromotion.runningDifference && $scope.singleViewPromotion.runningDifference >= 0){
                    $scope.singleViewPromotion.projectionUpToDate = ( $scope.singleViewPromotion.projections/ $scope.singleViewPromotion.dateDifference) * $scope.singleViewPromotion.runningDifference;
                } else if($scope.singleViewPromotion.runningDifference >= $scope.singleViewPromotion.dateDifference){
                    $scope.singleViewPromotion.projectionUpToDate = $scope.singleViewPromotion.projections;
                }

                $scope.promotionSettings = response.promotionSettings;
            }, function error(error) {

            });
        };

        $scope.getSingleViewPromotion();

        $scope.showProductDetail = function (prodId) {
            $location.path('/products-catalog/products/view/' + prodId +'/2');
            $scope.cancel();
        };

        $scope.create = function () {
           // $modalInstance.close($scope.singleViewPromotion);
        };

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.promotionEditFromModal = function ($event, singleViewPromotion) {
            $rootScope.$broadcast("editPromotionEvent", {singleViewPromotion: $scope.singleViewPromotion });
        };

        $scope.promotionDeleteFromModal = function ($event, singleViewPromotion) {
            $rootScope.$broadcast("deletePromotionEvent", {singleViewPromotion: $scope.singleViewPromotion });
        };

        $scope.$on("closeOnDeleteEvent", function (event, args) {
            $scope.cancel();
        });

        $scope.$on("reloadViewPromotionEvent", function (event, args) {
            $scope.getSingleViewPromotion();
        });
    }

    angular.module("module.gallery").controller('promoDeleteModalCtrl', [
        'modalService','$scope', '$rootScope','$http', '$location', '$modalInstance', 'toastr', '$modal', '$window', 'galleryService', 'deletePromotion', promotionDeleteModalController
    ]);

    function promotionDeleteModalController(modalService,$scope, $rootScope, $http, $location, $modalInstance, toastr, $modal, $window, galleryService, deletePromotion) {

        $scope.promotionDelete = function(singlePromotion) {
            galleryService.deletePromotion({
                "deletePromotion": singlePromotion.promotionId
            }).then(function success(response) {
                toastr.success('Promotion has been deleted successfully.');
            }, function error(error) {

            });
        };

        $scope.delete = function () {
            $scope.promotionDelete(deletePromotion);
            $rootScope.$broadcast("closeOnDeleteEvent");
            $rootScope.$broadcast("reloadListingEvent", {actionType: 2 });
            $modalInstance.close(deletePromotion);
        };

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }

})();

(function () {

    angular.module("module.gallery").service('galleryService', [
        '$http', '$q', '$global', 'authService', service
    ]);

    function service($http, $q, $global, authService) {

        return {
            getRetailers: getRetailers,
			getCollectionSettings: getCollectionSettings,
            getPromotions: getPromotions,
            getSinglePromotion: getSinglePromotion,
            readPromotion:readPromotion,
            deletePromotion: deletePromotion,
            createPromotion: createPromotion,
            downloadPromotion: downloadPromotion,
            sendEmailPromotion: sendEmailPromotion
        };

        function getPromotions(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/list/', {
                selectedYear: req.selectedYear,
                selectedMonth: req.selectedMonth,
                selectedPlatform: req.selectedPlatform,
                selectedPlatformType: req.selectedPlatformType
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }


        function downloadPromotion(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/download/', {
                selectedYear: req.selectedYear,
                selectedMonth: req.selectedMonth,
                selectedPlatform: req.selectedPlatform,
                selectedPlatformType: req.selectedPlatformType
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function sendEmailPromotion(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/send-mail/', {
                selectedYear: req.selectedYear,
                selectedMonth: req.selectedMonth,
                selectedPlatform: req.selectedPlatform,
                selectedPlatformType: req.selectedPlatformType
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function getRetailers(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/read-retailers/', {
                selectedPlatform: req.selectedPlatform,
                selectedPlatformType: req.selectedPlatformType
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function getCollectionSettings(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/read-collection-settings/', {
                selectedCollection: req.selectedCollection
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function getSinglePromotion(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/view-single-promotion/', {
                selectedSinglePromotion: req.selectedSinglePromotion
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function deletePromotion(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/delete-promotion/', {
                deletePromotion: req.deletePromotion
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function readPromotion(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/gallery/promotion/read-promotion/', {
                readPromotion: req.readPromotion
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function createPromotion(req) {
            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/gallery/promotion/create-update-promotion/', {
                promotion: req.promotion
            } ,{ headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }
    }


})();



/**
 * Created by ab on 11/20/15.
 */


(function () {
    'use strict';

    angular.module('module.groupView', []);

    //Routing
    angular.module("module.groupView").config(
        ["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            .state('vendor', {
                url: '/vendor',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@vendor': {
                        templateUrl: 'app/group-view/groupView.html',
                        controller: 'groupController'
                    }
                },
                data: {
                    pageTitle: 'Vendor',
                    pageName: 'Vendor'
                },
                private: true,
                groupView: true
            })
            .state('retailer', {
                url: '/retailer',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@retailer': {
                        templateUrl: 'app/group-view/groupView.html',
                        controller: 'groupController'
                    }
                },
                data: {
                    pageTitle: 'Retailer',
                    pageName: 'Retailer'
                },
                private: true,
                groupView: true
            });
    }


})();
/**
 * Created by ab on 11/20/15.
 */


(function () {
    'use strict';

    angular.module("module.groupView").controller('groupController', [
        '$scope', '$http', 'toastr', '$state','$location', '$global', '$modal', '$rootScope', 'authService','groupService', '$window', controller
    ]);


    function controller($scope, $http, toastr, $state, $location, $global, $modal, $rootScope, authService, groupService, $window) {

        $scope.$parent.urlState = $state.$current.groupView;
        $scope.lists = {};
        $scope.API_URL = $global.API_URL;
        $scope.companyId = companyId;
        //$rootScope.urlState = ;
        $scope.group = $location.$$path; // checking vendor & retailer
        $scope.type = '';


        if($scope.group == '/vendor'){
            $scope.$parent.urlLink = 'vendor';
            $scope.pageTitle = 'Retailer';

        }
        else{
            $scope.$parent.urlLink = 'retailer';
            $scope.pageTitle = 'Vendor';
        }

        groupService.getGroupList().then(function success(response)
            {
                if(response.data.data.length == 0){
                    $location.path('/snapshot');
                }
                else{
                    $scope.lists = response.data.data;
                    $scope.type = response.data.type;
                }
            }
        );

        function companyId(companyId, name){
            authService.setCompany(companyId, name);
            $scope.$emit('Company_ID_Change');
            $location.path('/snapshot');
        }

    }


})();
/**
 * Created by ab on 11/20/15.
 */


(function () {
    'use strict';

    angular.module("module.groupView").service('groupService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {
        return {
            getGroupList:getGroupList,
            setSession:setSession

        };

        function getGroupList(){
            var data = $http.get($global.API_URL + 'api/users/user/redirect/');
            return data;

        }
        function setSession(companyId){
            var data = $http.post($global.API_URL + 'api/users/user/session/',companyId);

            //return data;

        }

    }

})();
(function () {
    'use strict';

    angular.module('module.login', []);

    //Routing
    angular.module('module.login').config(['$stateProvider', config]);

    function config($stateProvider) {

        $stateProvider
            //Login
            .state('login', {
                url: '/login',
                views: {
                    'layout': {
                        templateUrl: 'app/login/login.html',
                        controller: 'loginController'
                    }
                },
                data: {
                    pageTitle: 'Login',
                    pageName: 'Login'
                },
                private: false
            })

            //Forgot password
            .state('forgotPassword', {
                url: '/forgot-password',
                views: {
                    'layout': {
                        templateUrl: 'app/login/forgotPassword.html',
                        controller: 'loginController'
                    }
                },
                data: {
                    pageTitle: 'Forgot Password',
                    pageName: 'Forgot Password'
                },
                private: false
            });


    }


})();
(function () {

    angular.module("module.login").controller('loginController', [
        '$scope', 'loginService', 'toastr', '$state', '$location','$rootScope', controller
    ]);

    /**
     * Comment
     */
    function controller($scope, loginService, toastr, $state, $location,$rootScope) {

        $scope.user = {};
        $scope.submit = submit;
        $scope.forgotPasswordForm = forgotPasswordForm;
        $scope.submitted=false;
        //login submit
        $scope.loginBtnStateDisabled = false;
        function submit(form) {
            $scope.submitted=true;
            if (form.$invalid) {
                //$scope.submitted = false;
                common.setDirty(form);
                return;
            }

            $scope.loginBtnStateDisabled = true;
            loginService.login($scope.user).then(function (response) {
                toastr.clear();
                toastr.success(response.message);

                if(response.group == 3)
                {
                    $state.go("retailer");
                }
                else if(response.group == 2){
                    $state.go("vendor");
                }
                else{
                    $state.go("snapshot");
                }
            }, function (error) {
                toastr.clear();
                toastr.error(error.message);
                $scope.loginBtnStateDisabled = false;
            });

        }

        // User logout modal Yes
        $scope.logoutYes = function () {
            if (angular.isDefined($scope.modalInstance)) {
                $scope.modalInstance.close(/*$scope.selected.item*/);
            }
            loginService.logout();
            $location.path('/login');
        };

        // User logout modal No
        $scope.logoutNo = function () {
            if (angular.isDefined($scope.modalInstance)) {
                $scope.modalInstance.dismiss('cancel');
            }
        };

        // forgotPasswordForm

        function forgotPasswordForm(form) {
            if (form.$invalid) {
                common.setDirty(form);
                return;
            }

            $scope.loginBtnStateDisabled = true;
            loginService.forgotPassword($scope.user).then(function (response) {
                toastr.clear();
                toastr.success(response.message);
                $scope.user = null;
                form.email = null;
                $scope.loginForm.$setPristine();
                $scope.loginBtnStateDisabled = false;
            }, function (error) {
                toastr.clear();
                toastr.error(error.message);
                $scope.user = null;
                form.email = null;
                $scope.loginForm.$setPristine();
                $scope.loginBtnStateDisabled = false;
            });
        }

    }

})();
(function () {

    angular.module("module.login").service('loginService', [
        '$http', '$global', '$q', 'authService', 'socketIO', service
    ]);

    /**
     * Comment
     */
    function service($http, $global, $q, authService, socketIO) {

        return {
            login: login,
            forgotPassword: forgotPassword,
            logout: logout,
            register: register
        };


        //Login 
        function login(credintial) {


            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/users/user/login/', {
                username: credintial.username,
                password: credintial.password
            }).then(function success(response) {
                var data = response.data.data;
                if (data.success == true) {
                    //Added since some requests were missing the token
                    $http.defaults.headers.common['Token'] = data.token;

                    authService.setToken(data.token);
                    authService.setCompany('','');

                    authService.setUser(data.user);
                    authService.setUserPermissions(data.mainMenu,data.features);
                    authService.setAppCommonFeatures(data.common);

                    socketIO.connect(data.user.userId);
                    if (credintial.remember === undefined || credintial.remember === null) {
                        authService.setExpire(true);
                    }
                    deferred.resolve({
                        message: "You have logged in successfully.",
                        group: response.data.data.user.group
                    });
                }
                else if(data.success == false && data.status_id == 2){
                    deferred.reject({
                        message: "Sorry! Account has been deactivated."
                    })
                }
                else if(data.success == false && data.status_id == 3){
                    deferred.reject({
                        message: "Sorry! Account has been deleted"
                    })
                }
                else {
                    deferred.reject({message: "Sorry! Email or Password incorrect."});
                }

            }, function error(error) {
                deferred.reject({message: "Sorry! Email or Password incorrect."});
            });

            return deferred.promise;

        }


        //forgot Password 
        function forgotPassword(credintial) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/users/user/forgot-password/', {
                username: credintial.username
            }).then(function success(response) {
                var data = response.data.data;
                if (data.success == true) {
                    deferred.resolve({message: "We have sent you a new password to your e-mail. Please check your inbox."});
                } else {
                    deferred.reject({message: "Sorry! incorrect email."});
                }

            }, function error(error) {
                deferred.reject({message: "Sorry! incorrect email."});
            });

            return deferred.promise;
        }


        //logout 
        function logout() {
            authService.logout();
            socketIO.disconnect();
        }


        //register 
        function register(credintial) {
            //..
        }

    }

})();
(function () {
    'use strict';

    angular.module('module.messages', []);

    //Routing
    angular.module('module.messages').config(
        ["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

        //messages
            .state('messages', {
                url: '/messages',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@messages': {
                        templateUrl: 'app/messages/messages.html',
                        controller: 'messagesController'
                    }

                },
                data: {
                    pageTitle: 'Messages',
                    pageName: 'Messages'
                },
                private: true
            })

            .state('messages.view', {
                url: '/view/:id',
                params: {
                    id: {squash: true, value: null}
                },
                parent: 'messages',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@messages': {
                        templateUrl: 'app/messages/messageView.html',
                        controller: 'messageViewController'
                    }

                },
                data: {
                    pageTitle: 'Message View',
                    pageName: 'Message View'
                },
                private: true
            })
            .state('messages.sent', {
                url: '/sent',
                parent: 'messages',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@messages': {
                        templateUrl: 'app/messages/sentMessages.html',
                        controller: 'sentMessagesController'
                    }

                },
                data: {
                    pageTitle: 'Sent Messages',
                    pageName: 'Sent Messages'
                },
                private: true
            })

            .state('messages.sent.view', {
                url: '/view/:id',
                params: {
                    id: {squash: true, value: null}
                },
                parent: 'messages.sent',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@messages': {
                        templateUrl: 'app/messages/sentMessageView.html',
                        controller: 'sentMessageViewController'
                    }

                },
                data: {
                    pageTitle: 'Sent Message View',
                    pageName: 'Sent Message View'
                },
                private: true
            })


    }


})();

(function () {

    angular.module('module.messages').controller('messageViewController', [
        '$scope', '$rootScope', 'toastr', '$state', '$global', '$window', 'messagesService', 'authService', '$stateParams', controller
    ]);

    /**
     * messagesController
     */
    function controller($scope, $rootScope, toastr, $state, $global, $window, messagesService, authService, $stateParams) {

        $rootScope.pageMessages = {};
        var id = $stateParams.id;

        messagesService.getByMessageId({
            id: id
        }).then(function success(response) {
            $scope.message = response['message'];
            if(response['messages']) {
                $rootScope.headerMessageCount = response['messages']['count'];
                $rootScope.headerMessages = response['messages']['data'];
            }
        }, function error(error) {
            toastr.error('Message not found!');
            $state.go('messages');
        });


        $scope.save = messageSave;
        $scope.messageForm = [];
        var messageArr = {};


        function messageSave(form) {

            if (form.$invalid) {
                common.setDirty(form);
                return;
            }

            messageArr = {
                id: $scope.message.id,
                message: $scope.messageForm.message
            }
            $scope.isProcessing = true;
            messagesService.replyMessage(messageArr).then(function success(response) {
                if (response.id) {
                    toastr.success('Message has been sent successfully.');
                    $scope.isProcessing = false;
                    $scope.messageForm.message = '';
                    $scope.newMessage.$setPristine();
                    $state.go('messages');
                } else {
                    toastr.error('Message send failed.');
                    $scope.isProcessing = false;
                }
            }, function error(error) {
                toastr.error('Message send failed.');
                $scope.isProcessing = false;
            });


        }


    }


})
();
(function () {

    angular.module('module.messages').controller('messagesController', [
        '$scope', '$rootScope', 'toastr', '$state', '$global', '$window', 'messagesService', 'authService', 'socketIO', controller
    ]);

    /**
     * messagesController
     */
    function controller($scope, $rootScope, toastr, $state, $global, $window, messagesService, authService, socketIO) {

        $rootScope.pageMessages = {};
        var userId;
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 20;
        $scope.maxSize = 5;

        userId = authService.getUser().userId;

        function getData() {
            messagesService.getMessages({
                userId: userId,
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                $rootScope.pageMessages = response.data;
                $scope.totalItems = response.count;
            }, function error(error) {

            });
        }

        getData();


        // This property will be bound to checkbox in table header
        $scope.allItemsSelected = false;

        // Here first initialize all name list

        // This executes when entity in table is checked
        $scope.selectEntity = function () {
            // If any entity is not checked, then uncheck the "allItemsSelected" checkbox
            for (var i = 0; i < $rootScope.pageMessages.length; i++) {
                if (!$rootScope.pageMessages[i].isChecked) {
                    $scope.allItemsSelected = false;
                    return;
                }
            }
            //If not the check the "allItemsSelected" checkbox
            $scope.allItemsSelected = true;
        };

        // This executes when checkbox in table header is checked
        $scope.selectAll = function () {
            // Loop through all the entities and set their isChecked property
            for (var i = 0; i < $rootScope.pageMessages.length; i++) {

                $rootScope.pageMessages[i].isChecked = $scope.allItemsSelected;
            }
        };

        $scope.messageDelete = function () {
            var msgDelStatus = false;
            _.find($rootScope.pageMessages, function (arr) {
                if (arr.isChecked && arr.isChecked == true) {
                    msgDelStatus = true;
                    return true;
                }
            });

            if (msgDelStatus == false) {
                toastr.error('Please select at least one message');
            } else {
                var msgDelArray = [];
                _.find($rootScope.pageMessages, function (arr) {
                    if (arr.isChecked && arr.isChecked == true) {
                        msgDelArray.push(arr.id);
                    }
                });

                if (msgDelArray.length == 1) {
                    $messageSuccessText = 'Message has';
                    $messageErrorText = 'Message';
                } else {
                    $messageSuccessText = 'Messages have';
                    $messageErrorText = 'Message';
                }

                messagesService.messageDelete({
                    ids: msgDelArray,
                    limit: $scope.pageLimit,
                    page: $scope.currentPage,
                }).then(function success(response) {
                    $rootScope.pageMessages = response.data;
                    $scope.totalItems = response.count;
                    toastr.success($messageSuccessText + ' been deleted successfully.');
                }, function error(error) {
                    toastr.error($messageErrorText + ' delete failed.');
                });
            }
        };


        $scope.pageChanged = function () {
            getData();
        };

    }


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.messages').controller('formMessageModalController',
        ['modalService','$scope', '$modalInstance', 'userId', 'messagesService', 'toastr', '$window','$rootScope', formMessageModalController]);
    function formMessageModalController(modalService,$scope, $modalInstance, userId, messagesService, toastr, $window,$rootScope) {

        $scope.userArray = [];

        messagesService.getSendUsers().then(function success(response) {
            $scope.userArray = response;
        }, function error(error) {

        });

        $scope.createOptGroups = function (item) {
            return item.name;
        };

        //$scope.selectedItem= $scope.itemArray[0];

        $scope.save = messageSave;
        $scope.messageForm = [];
        var messageArr = {};


        function messageSave(form) {

            if (form.$invalid) {
                common.setDirty(form);
                return;
            }

            messageArr = {
                userId: userId,
                to: $scope.messageForm.to.id,
                subject: $scope.messageForm.subject,
                message: $scope.messageForm.message
            }
            $scope.isProcessing = true;
            messagesService.saveMessage(messageArr).then(function success(response) {
                var res = {};
                if (response.id) {
                    res.data = response;
                    if (status == true) {
                        res.tab = 0;
                        res.status = true;
                    }
                    $modalInstance.close(res);
                    toastr.success('Message has been sent successfully.');
                } else {
                    toastr.error('Message send failed.');
                    $scope.isProcessing = false;
                }
            }, function error(error) {
                toastr.error('Message send failed.');
                $scope.isProcessing = false;
            });


        }


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


    }

})
();
(function () {

    angular.module("module.messages").service('messagesService', [
        '$http', '$q', '$global', service
    ]);

    function service($http, $q, $global) {

        return {
            getMessages: getMessages,
            getByMessageId: getByMessageId,
            saveMessage: saveMessage,
            getSendUsers:getSendUsers,
            replyMessage: replyMessage,
            getSentMessages:getSentMessages,
            getBySentMessageId:getBySentMessageId,
            messageDelete:messageDelete,
            sentMessageDelete:sentMessageDelete,
            replySentMessage:replySentMessage,
        }

        function getMessages(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/messages/get-by-user/', {
                userId: req.userId,
                limit: req.limit,
                page: req.page
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function getByMessageId(req) {

            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/messages/get-by-id/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function saveMessage(req) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/messages/save/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function getSendUsers() {
            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/messages/get-send-users/').then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function replyMessage(req) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/messages/reply/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function getSentMessages(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/messages/get-by-user-sent/', {
                userId: req.userId,
                limit: req.limit,
                page: req.page
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function getBySentMessageId(req) {

            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/messages/get-sent-by-id/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function messageDelete(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/messages/delete/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function sentMessageDelete(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/messages/sent-delete/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function replySentMessage(req) {
            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/messages/reply-sent/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

    }


})();



(function () {

    angular.module('module.messages').controller('sentMessageViewController', [
        '$scope', '$rootScope', 'toastr', '$state', '$global', '$window', 'messagesService', 'authService', '$stateParams', controller
    ]);

    /**
     * messagesController
     */
    function controller($scope, $rootScope, toastr, $state, $global, $window, messagesService, authService, $stateParams) {

        $rootScope.pageMessages = {};
        var id = $stateParams.id;

        messagesService.getBySentMessageId({
            id: id
        }).then(function success(response) {
            $scope.message = response['message'];
        }, function error(error) {
            toastr.error('Message not found!');
            $state.go('messages');
        });


        $scope.save = messageSave;
        $scope.messageForm = [];
        var messageArr = {};


        function messageSave(form) {

            if (form.$invalid) {
                common.setDirty(form);
                return;
            }

            messageArr = {
                id: $scope.message.id,
                message: $scope.messageForm.message
            }
            $scope.isProcessing = true;
            messagesService.replySentMessage(messageArr).then(function success(response) {
                if (response.id) {
                    toastr.success('Message has been sent successfully.');
                    $scope.isProcessing = false;
                    $scope.messageForm.message = '';
                    $scope.newMessage.$setPristine();
                    $state.go('messages.sent');
                } else {
                    toastr.error('Message send failed.');
                    $scope.isProcessing = false;
                }
            }, function error(error) {
                toastr.error('Message send failed.');
                $scope.isProcessing = false;
            });


        }


    }


})
();
(function () {

    angular.module('module.messages').controller('sentMessagesController', [
        '$scope', '$rootScope', 'toastr', '$state', '$global', '$window', 'messagesService', 'authService', 'socketIO', controller
    ]);

    /**
     * messagesController
     */
    function controller($scope, $rootScope, toastr, $state, $global, $window, messagesService, authService, socketIO) {

        $rootScope.pageMessages = {};
        var userId;
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 20;
        $scope.maxSize = 5;

        userId = authService.getUser().userId;

        function getData() {
            messagesService.getSentMessages({
                userId: userId,
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                $rootScope.pageMessages = response.data;
                $scope.totalItems = response.count;
            }, function error(error) {

            });
        }

        getData();

        // This property will be bound to checkbox in table header
        $scope.allItemsSelected = false;

        // Here first initialize all name list

        // This executes when entity in table is checked
        $scope.selectEntity = function () {
            // If any entity is not checked, then uncheck the "allItemsSelected" checkbox
            for (var i = 0; i < $rootScope.pageMessages.length; i++) {
                if (!$rootScope.pageMessages[i].isChecked) {
                    $scope.allItemsSelected = false;
                    return;
                }
            }
            //If not the check the "allItemsSelected" checkbox
            $scope.allItemsSelected = true;
        };

        // This executes when checkbox in table header is checked
        $scope.selectAll = function () {
            // Loop through all the entities and set their isChecked property
            for (var i = 0; i < $rootScope.pageMessages.length; i++) {

                $rootScope.pageMessages[i].isChecked = $scope.allItemsSelected;
            }
        };

        $scope.messageDelete = function () {
            var msgDelStatus = false;
            _.find($rootScope.pageMessages, function (arr) {
                if (arr.isChecked && arr.isChecked == true) {
                    msgDelStatus = true;
                    return true;
                }
            });

            if (msgDelStatus == false) {
                toastr.error('Please select at least one message');
            } else {
                var msgDelArray = [];
                _.find($rootScope.pageMessages, function (arr) {
                    if (arr.isChecked && arr.isChecked == true) {
                        msgDelArray.push(arr.id);
                    }
                });

                if (msgDelArray.length == 1) {
                    $messageSuccessText = 'Message has';
                    $messageErrorText = 'Message';
                } else {
                    $messageSuccessText = 'Messages have';
                    $messageErrorText = 'Message';
                }

                messagesService.sentMessageDelete({
                    ids: msgDelArray,
                    limit: $scope.pageLimit,
                    page: $scope.currentPage,
                }).then(function success(response) {
                    $rootScope.pageMessages = response.data;
                    $scope.totalItems = response.count;
                    toastr.success($messageSuccessText + ' been deleted successfully.');
                }, function error(error) {
                    toastr.error($messageErrorText + ' delete failed.');
                });
            }
        };

        $scope.pageChanged = function () {
            getData();
        };

    }


})
();
(function () {
    'use strict';

    angular.module('module.notifications', []);

    //Routing
    angular.module('module.notifications').config(
        [ "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //notifications
            .state('notifications', {
                url: '/notifications',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@notifications': {
                        templateUrl: 'app/notifications/notifications.html',
                        controller: 'notificationsController'
                    }

                },
                data: {
                    pageTitle: 'Notifications',
                    pageName: 'Notifications'
                },
                private: true
            })




    }


})();
(function () {

    angular.module('module.notifications').controller('notificationsController', [
        '$scope', '$rootScope', 'toastr', '$state', '$global', '$window', 'notificationsService', 'authService', 'socketIO', controller
    ]);

    /**
     * notificationsController
     */
    function controller($scope, $rootScope, toastr, $state, $global, $window, notificationsService, authService, socketIO) {

        $rootScope.pageNotifications = {};
        var userId;
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 20;
        $scope.maxSize = 5;

        userId = authService.getUser().userId;

        function getData() {
            notificationsService.getNotifications({
                userId: userId,
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                $rootScope.pageNotifications = response.data;
                $scope.totalItems = response.count;
            }, function error(error) {

            });
        }

        getData();

        $scope.pageChanged = function () {
            getData();
        };

    }

})
();
(function () {

    angular.module("module.notifications").service('notificationsService', [
        '$http', '$q', '$global', service
    ]);

    function service($http, $q, $global) {

        return {
            getNotifications: getNotifications
        }

        function getNotifications(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/notification/get-by-user/', {
                userId: req.userId,
                limit: req.limit,
                page: req.page
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }


    }


})();



(function () {
    'use strict';

    angular.module('module.orders', []);

    //Routing
    angular.module("module.orders").config(
        ["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //Orders
            .state('orders', {
                url: '/orders',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@orders': {
                        templateUrl: 'app/orders/orders.html',
                        controller: 'ordersController'
                    }

                },
                data: {
                    pageTitle: 'Orders',
                    pageName: 'Orders'
                },
                private: true
            })

            //Orders list
            .state('orders.list', {
                url: '/list/:mainTab/:year/:month/:parameter',
                params: {
                    mainTab: {squash: true, value: null},
                    year: {squash: true, value: null},
                    month: {squash: true, value: null},
                    parameter: {squash: true, value: null}
                },
                parent: 'orders',
                views: {
                    'content@orders': {
                        templateUrl: 'app/orders/orderLists.html',
                        controller: 'ordersListController'
                    }

                },
                data: {
                    pageTitle: 'Order List',
                    pageName: 'Order List'
                },
                private: true
            })

            //orders view by id
            .state('orders.view', {
                url: '/view/:id',
                parent: 'orders',
                views: {
                    'content@orders': {
                        templateUrl: 'app/orders/ordersView.html',
                        controller: 'ordersViewController'
                    }
                },
                data: {
                    pageTitle: 'Order View',
                    pageName: 'Order View'
                },
                private: true
            })

            //Orders View
            .state('orders.list.view', {
                url: '/view/:id/:mainTab/:subTab',
                params: {
                    mainTab: {squash: true, value: null},
                    subTab: {squash: true, value: null}
                },
                parent: 'orders.list',
                views: {
                    'content@orders': {
                        templateUrl: 'app/orders/ordersView.html',
                        controller: 'ordersViewController'
                    }
                },
                data: {
                    pageTitle: 'Order View',
                    pageName: 'Order View'
                },
                private: true
            });



    }



})();

/**
 * Created by gayani on 9/8/15.
 */

(function () {

    angular.module("module.orders").controller('ordersController', [
        '$scope', '$http','$location','ordersService', 'toastr', '$state', '$window', 'authService','$rootScope', controller
    ]);

    function controller($scope, $http,$location, ordersService, toastr, $state,$window,authService,$rootScope) {


        /*$scope.platformDropdown = [
         ["Retailer", ["Costco", "Sears", "Target", "Kohls"]],
         ["Vendors", ["Lifestyle Solutions", "ABC Furniture", "Redline Office Furniture"]],
         ["DA", ["Mike's Delivery Service", "ClearSpace Agents", "Composite Transportation"]]
         ];*/

        $scope.platformDropdown = authService.getPlatFormViews();
        $scope.setPlatform = function (selectedPlatform) {
            $scope.selectedPlatform = selectedPlatform.name;
            $scope.platformFilter = '';

        }
        //$scope.loadOrderStatusData = loadOrderStatusData();

        function loadOrderStatusData(){
            ordersService.getOrderStatusData().
                then(function success(response) {
                    $scope.noOpenOrders=response.data.openOrdersCount;
                    $scope.noInTransItOrders=response.data.inTransItOrdersCount;
                    $scope.openOrderValue=response.data.openOrderValue;
                    $scope.inTransItOrderValue=response.data.inTransItOrderValue;

                });
        }

        var currentTime = new Date();

        $scope.selectedYear = currentTime.getFullYear();

        $scope.years = [$scope.selectedYear-1, $scope.selectedYear, $scope.selectedYear+1];

        $scope.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        $scope.selectedMonth = currentTime.getMonth();

        $scope.asMonthText = " AS OF " + $scope.months[$scope.selectedMonth];
        $scope.asText = " AS OF " + moment(currentTime).format('MM/DD/YYYY');
        $scope.asDelivery = " AS OF " + moment(currentTime).format('MM/DD/YYYY');

        //delivery CRM



        var ploatCHARTOption = {

            xaxis: {
                mode: "categories",

                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            yaxis: {
                ticks: 3,
                tickDecimals: 0,
                tickColor: "#f0f0f0",
                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            grid: {
                backgroundColor: {colors: ["#fff", "#fff"]},
                borderWidth: 1, borderColor: "#f0f0f0",
                margin: 0,
                minBorderMargin: 0,
                labelMargin: 20,
                hoverable: true,
                clickable: true,
                mouseActiveRadius: 6
            },
            legend: {show: false}
        };


        $scope.setYear = function (selectedYear) {

            $scope.selectedYear = selectedYear;

            setChart($scope.selectedYear, $scope.selectedMonth);
        };

        $scope.setMonth = function (selectedMonth) {

            $scope.selectedMonth = selectedMonth;
            setChart($scope.selectedYear, $scope.selectedMonth);
        };

        function setChart(year, month) {

            var month_array =['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

            $scope.this_month_boxA= "For Month "+ month_array[ month ] + " ";
            $scope.this_month_boxB= "For Month "+ month_array[ month ] + " ";
            $scope.this_month_boxC= "For Month "+ month_array[ month ] + " ";
            $scope.this_month_boxD= "For Month "+ month_array[ month ] + " ";


            $rootScope.spinnerTrax = true;
            ordersService.getChartData(year, month).
                then(function success(response) {
                    chart_data=response;

                    $rootScope.spinnerTrax = false;
                    var ploatCHARTData0 = [
                        {
                            data: response.d0,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: response.d0,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    var ploatCHARTData = [
                        {
                            data: response.d1,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: response.d1,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    var ploatCHARTData2 = [
                        {
                            data: response.d3,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: response.d3,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    $scope.noOpenOrders = chart_data.orders.open.count;
                    $scope.openOrderValue = chart_data.orders.value.amount;
                    $scope.noInTransItOrders = chart_data.orders.transit.count;
                    $scope.inTransItOrderValue = chart_data.orders.transitValue.amount;
                    $scope.myData = ploatCHARTData;
                    $scope.myData2 = ploatCHARTData2;
                    $scope.shippeddata = ploatCHARTData0;
                    $scope.promotion_performance = response.promotion_performance;


                    //delivery
                    $scope.dOrdersCounts = chart_data.orders.open.dOrdersCounts;
                    $scope.dOrderValue = chart_data.orders.open.dOrderValue;


                    //promotion_performance
                    var pie_data = [];

                    $scope.pieDataset = response.piechart_data;


                }, function (error) {
                    $rootScope.spinnerTrax = false;
                });

            $scope.asMonthText = " AS OF " + $scope.months[$scope.selectedMonth];
        }

        setChart($scope.selectedYear, $scope.selectedMonth);

        $scope.myChartOptions = ploatCHARTOption;

        $scope.onEventPloatHover = function (event, pos, item) {
            //``console.log('Hover! ' + event.timeStamp + ' ' + pos.pageX + ' ' + pos.pageY)

            var previousPoint = null;
            if (item) {
                if (previousPoint != item.dataIndex) {

                    previousPoint = item.dataIndex;

                    //$("#tooltip").remove();
                    //angular.element("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2),
                        y = item.datapoint[1].toFixed(2);
                    var amount=item.series.data[item.dataIndex][2];

                    var month ="";
                    var m = Math.round(x);

                    switch (m){
                        case 0: { month ="JAN"; break;}
                        case 1: { month ="FEB"; break;}
                        case 2: { month ="MAR"; break;}
                        case 3: { month ="APR"; break;}
                        case 4: { month ="MAY"; break;}
                        case 5: { month ="JUN"; break;}
                        case 6: { month ="JUL"; break;}
                        case 7: { month ="AUG"; break;}
                        case 8: { month ="SEP"; break;}
                        case 9: { month ="OCT"; break;}
                        case 10: { month ="NOV"; break;}
                        case 11: { month ="DEC"; break;}

                    }


                    var html="<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" +month+ " "+ $scope.selectedYear +"</strong></p>" +
                        "<div style='padding: 0 10px 10px;'>" +
                        "<div>Number: <strong>"+ Math.round(y)  +"</strong></div>";

                    if (typeof amount == 'undefined'){

                    }else{

                        html +="<div>Value($): <strong>"+ amount  +"</strong></div>" +
                            "</div>";

                    }
                    showTooltip(item.pageX, item.pageY,html);

                }
            } else {
                //$("#tooltip").remove();
                angular.element("#tooltip").remove();
                previousPoint = null;
            }
        }

        function showTooltip(x, y, contents) {
            $('<div id="tooltip">' + contents + '</div>').css({
                position: 'absolute',
                display: 'none',
                top: y + 5,
                left: x + 20,
                size: '10',
                'background-color': '#111111',
                color: "#FFFFFF",
                opacity: 0.85
            }).appendTo("body").fadeIn(200);
        }

        $scope.pieOptions = {
            series: {
                pie: {
                    show: true,
                    label: {
                        show: true,
                        radius: .5,
                        formatter: labelFormatter,
                        background: {
                            opacity: 0
                        }
                    }

                }
            },
            grid: {
                hoverable: true,
                clickable: true
            },
            colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
        }




        $scope.onEventPieHover = function (event, pos, obj) {
            if (!obj) {
                return;
            }
            var percent = parseFloat(obj.series.percent).toFixed(2);
            $("#hover").html("<span style='font-weight:bold; color:" + obj.series.color + "'>" + obj.series.label + " (" + percent + "%)</span>");
        }




        $scope.onEventPieClicked = function (event, pos, obj) {
            //if (!obj) {
            //    return;
            //}
            //var pie_type = "order";
            //var year=$scope.selectedYear;
            //var month = $scope.selectedMonth;
            //
            //if(pie_type=="order"){
            //    var orders_array=new Array("Orders < 5 days","Orders > 5 days","Orders > 15 days","Orders > 30 days","Orders > 60 days","Orders > 90 days");
            //    if(-1 < orders_array.indexOf(obj.series.label)){
            //        var parameter=orders_array.indexOf(obj.series.label);
            //    }
            //    //year/month/type
            //    $window.location.href = '/#!/orders/list/1/'+year+'/'+month+'/'+parameter+'';
            //
            //
            //}


        }

        function labelFormatter(label, series) {
            return "<div style='font-size:10pt; text-align:center; padding:2px; color:white;'>" + Math.round(series.percent) + "%</div>";  //+ label + "<br/>"
        }


    }

})();


/**
 * Created by gayani on 9/11/15.
 */
(function () {

    angular.module("module.orders").controller('ordersListController', [
            '$scope', '$rootScope', '$http', 'ordersService', 'authService', 'toastr', '$state', '$global', '$stateParams', '$location', '$window', controller
        ])

        .filter('startFrom', function () {
            return function (data, start) {
                return data.slice(start);
            }
        });

    function controller($scope, $rootScope, $http, ordersService, authService, toastr, $state, $global, $stateParams, $location, $window) {

        var mainTab = $stateParams.mainTab;

        $scope.sortType = 'orderNumber'; // set the default sort type
        $scope.sortReverse = false;
        $scope.pageSize = 5;
        $scope.orders = [];
        $scope.API_URL = $global.API_URL;
        $scope.date = new Date(); // To be removed

        $scope.currentPage = 1;
        $scope.changeOrderStatus = '';
        $scope.totalItems = 100;
        $scope.pageLimit = 10;
        $scope.maxSize = 10;


        $scope.year = $stateParams.year;
        $scope.month = $stateParams.month;


        var userType = authService.getUser().group;

        if (userType == 1) {
            $scope.userType = "ADMIN";

        } else if (userType == 2) {
            $scope.userType = "VENDOR";

        } else if (userType == 3) {
            $scope.userType = "RETAILER";
        }

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };


        $scope.statuses = ['All', 'Open', 'In Transit', 'Delivered', 'Cancelled','Above SLA'];
        $scope.selectedStatus = 0;

        $scope.setStatus = function (selectedStatus) {

            if ($scope.selectedStatus != selectedStatus) {
                $scope.currentPage = 1;
            }
            $scope.selectedStatus = parseInt(selectedStatus);
            $rootScope.spinnerTrax = true;
            var ordStatus = 'ALL';

            switch ($scope.selectedStatus) {
                case 1:
                    ordStatus = 'OPEN';
                    break;
                case 2:
                    ordStatus = 'IN_TRANSIT';
                    break;
                case 3:
                    ordStatus = 'DELIVERED';
                    break;
                case 4:
                    ordStatus = 'CANCELLED';
                    break;
                case 5:
                    ordStatus = 'ABOVE_SLA';
                    break;
            }

            if ($rootScope.triggeredGlobalSearch == true) {
                if ($rootScope.directGlobalSearch == true) {
                    refreshCriteria();
                    setGlobalSearchCriteria();
                    searchPO();
                } else {
                    var searchCriteria = $rootScope.globalSearch.criteria.id;
                    switch (searchCriteria) {
                        case 1:
                            refreshCriteria();
                            $scope.poForm.orderId = $rootScope.globalSearch.keyword;
                            break;
                        case 5:
                            refreshCriteria();
                            $scope.poForm.poId = $rootScope.globalSearch.keyword;
                            break;
                    }
                    searchPO();
                }
            } else {
                loadOrderList(ordStatus);
                $scope.changeOrderStatus = ordStatus;
            }
        };

        $scope.downloadExcel = function () {
            console.log($scope.poForm);
            ordersService.downloadReport($scope.changeOrderStatus, $scope.poForm).then(function success(response) {
                var filePath = response.data.csvName;
                $window.location.href = $scope.API_URL + 'images/orders/csv/' + filePath;
            });
        };

        $scope.sendListEmail = function () {
            ordersService.emailReport($scope.changeOrderStatus).then(function success(response) {
                /*var filePath = response.data.csvName;
                $window.location.href = $scope.API_URL + 'images/orders/csv/' + filePath;*/
            });
        };

        $scope.$on("globalSearchByOrderIdEvent", function (event, args) {
            refreshCriteria();
            $scope.poForm.orderId = $rootScope.globalSearch.keyword;
            searchPO();
        });

        $scope.$on("globalSearchByPurchaseOrderIdEvent", function (event, args) {
            refreshCriteria();
            $scope.poForm.poId = $rootScope.globalSearch.keyword;
            searchPO();
        });

        $scope.$on("directOrdersGlobalSearchEvent", function (event, args) {
            refreshCriteria();
            setGlobalSearchCriteria();
            searchPO();
        });

        function refreshCriteria() {
            $scope.poForm = {
                "retailer": null,
                "vendor": null,
                "createFrom": null,
                "createTo": null,
                "fromZip": null,
                "toZip": null,
                "poId": null,
                "orderId": null,
                "keyWord": null,
                "directGlobalSearch": false,
                "confirmationId": null,
                "trackingId": null,
                "claimId": null,
                "customerName": null,
                "customerId": null,
                "productName": null,
                "switchId": null
            };
        }

        function setGlobalSearchCriteria() {

            var searchCriteria = $rootScope.globalSearch.criteria.id;
            $scope.poForm.switchId = searchCriteria;
            $scope.poForm.directGlobalSearch = true;
            switch (searchCriteria) {
                case 2:
                    $scope.poForm.confirmationId = $rootScope.globalSearch.keyword;
                    break;
                case 3:
                    $scope.poForm.trackingId = $rootScope.globalSearch.keyword;
                    break;
                case 5:
                    $scope.poForm.claimId = $rootScope.globalSearch.keyword;
                    break;
                case 6:
                    $scope.poForm.customerName = $rootScope.globalSearch.keyword;
                    break;
                case 7:
                    $scope.poForm.customerId = $rootScope.globalSearch.keyword;
                    break;
                case 8:
                    $scope.poForm.productName = $rootScope.globalSearch.keyword;
                    break;
            }

        }

        $scope.searchPO = searchPO;

        getCompanyData();

        $scope.poForm = {
            "retailer": null,
            "vendor": null,
            "createFrom": null,
            "createTo": null,
            "fromZip": null,
            "toZip": null,
            "poId": null,
            "orderId": null,
            "keyWord": null,
            "directGlobalSearch": false,
            "confirmationId": null,
            "trackingId": null,
            "claimId": null,
            "customerName": null,
            "customerId": null,
            "productName": null,
            "switchId": null
        };
        $scope.companies = [];

        function searchPO() {
            $rootScope.spinnerTrax = true;
            var ordStatus = 'ALL';

            switch ($scope.selectedStatus) {
                case 1:
                    ordStatus = 'OPEN';
                    break;
                case 2:
                    ordStatus = 'IN_TRANSIT';
                    break;
                case 3:
                    ordStatus = 'REPLACEMENT';
                    break;
                case 4:
                    ordStatus = 'DELIVERED';
                    break;
                case 5:
                    ordStatus = 'CANCELLED';
                    break;
                case 6:
                    ordStatus = 'ABOVE_SLA';
                    break;
            }


            ordersService.searchPOA($scope.poForm, $scope.pageLimit, $scope.currentPage, ordStatus, $stateParams.year, $stateParams.month, $stateParams.parameter).
            then(function success(response) {
                $rootScope.spinnerTrax = false;
                $scope.orders = response.data;
                $scope.totalItems = response.data.record_count;
                $scope.recordCount = response.data.record_count;

                if ($scope.orders.data.length == 1 && $rootScope.triggeredGlobalSearch == true) {
                    $scope.showDetail($scope.orders.data[0].id);
                }

                $rootScope.triggeredGlobalSearch = false;
                $rootScope.directGlobalSearch = false;
                $scope.poForm.directGlobalSearch = false;

                var listMailBody = "";
                if (response) {

                    $.each(response, function (key, ord) {

                        listMailBody += "\r\nOrder Details\r\n--------------------- \r\n\r\n";

                        $.each(ord, function (i, val) {

                            if ((typeof val === "object") && (val !== null)) {
                                listMailBody += i + ": " + val.date + " , \r\n";

                            } else {
                                listMailBody += i + ": " + val + " , \r\n";

                            }
                        });
                    });
                }

                $scope.listMailBody = encodeURI(listMailBody);

            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function getCompanyData() {
            ordersService.getCompany().
            then(function success(response) {
                $scope.companies = response.data;

            });
        }

        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };

        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'orderNumber', fieldName: 'Sales Order ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'orderAmount', fieldName: 'Total Amount', fieldSearch: 'searchSku', checked: true},
            {id: 3, field: 'poNumber', fieldName: 'Purchase Order Id', fieldSearch: 'searchPo', checked: true},
            {id: 4, field: 'soDate', fieldName: 'Order Date', fieldSearch: 'searchItem', checked: true},
            /*{id: 5, field: 'description', fieldName: 'Description', fieldSearch: 'searchDescription', checked: true},*/
            {
                id: 6,
                field: 'cName',
                fieldName: 'Customer Name',
                fieldSearch: 'SearchCusFirstName',
                checked: true
            },
            {
                id: 8,
                field: 'phone',
                fieldName: 'Phone Number',
                fieldSearch: '',
                checked: true
            },
            {id: 9, field: 'address1', fieldName: 'Address 1', fieldSearch: 'searchAddress1', checked: true},
            {id: 10, field: 'address2', fieldName: 'Address 2', fieldSearch: 'searchAddress2', checked: false},
            {id: 11, field: 'address3', fieldName: 'City', fieldSearch: 'searchCity', checked: false},
            {id: 12, field: 'state', fieldName: 'State', fieldSearch: 'State', checked: true},
            {id: 13, field: 'country', fieldName: 'Country', fieldSearch: 'searchCountry', checked: false}
        ];

        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;


        $scope.setStatus(mainTab);

        $scope.pageChanged = function () {
            searchPO();
        };

        function loadOrderList(ordStatus) {

            ordersService.getOrderList(ordStatus, $scope.pageLimit, $scope.currentPage, $stateParams.year, $stateParams.month,$stateParams.parameter).then(
                function (orderList) {

                    $rootScope.spinnerTrax = false;
                    $scope.orders = orderList;
                    $scope.totalItems = orderList ? orderList.record_count : 0;
                    $scope.recordCount = orderList ? orderList.record_count : 0;
                    //  $scope.userType = orderList.userType;
                    //user type set by default when loading the page no need to set user type here

                    var listMailBody = "";

                    if (orderList && orderList.data) {

                        $.each(orderList.data, function (key, ord) {

                            listMailBody += "\r\nOrder Details\r\n--------------------- \r\n\r\n";

                            $.each(ord, function (i, val) {

                                if ((typeof val === "object") && (val !== null)) {

                                    listMailBody += i + ": " + val.date + " , \r\n";

                                } else {

                                    listMailBody += i + ": " + val + " , \r\n";

                                }

                            });

                        });
                    }

                    $scope.listMailBody = encodeURI(listMailBody);

                }, function (error) {
                    $rootScope.spinnerTrax = false;
                }
            );
        }

        /*
         * get detail page when click the order row
         * @po_id = order id
         */
        $scope.showDetail = function (po_id) {
            $location.path('/orders/list2/view/' + po_id + '/1/1');
        };

        $scope.clearSearch = function () {
            $rootScope.spinnerTrax = true;
            refreshCriteria();
         //   $scope.selectedStatus = parseInt(selectedStatus);

            var ordStatus = 'ALL';

            switch ($scope.selectedStatus) {
                case 1:
                    ordStatus = 'OPEN';
                    break;
                case 2:
                    ordStatus = 'IN_TRANSIT';
                    break;
                case 3:
                    ordStatus = 'DELIVERED';
                    break;
                case 4:
                    ordStatus = 'CANCELLED';
                    break;
                case 5:
                    ordStatus = 'ABOVE_SLA';
                    break;
            }
            loadOrderList(ordStatus);
        };

        $scope.notConnected = function () {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        }
    }

})();

/**
 * Created by gayani on 9/8/15.
 */

(function () {

    // var host = "http://ot-service.dev";

    angular.module("module.orders").service('ordersService', [
        '$http', '$q', '$global', service
    ]);

    function service($http, $q, $global) {
        return {
            getOrderList: getOrderList,
            loadRetailersVendorsList:loadRetailersVendorsList,
            getChartData: getChartData,
            getOrderStatusData:getOrderStatusData,
            searchPOA:searchPOA,
            getCompany:getCompany,
            downloadReport: downloadReport,
            emailReport: emailReport
        };

        function getOrderList(ordStatus , pageLimit , currentPage,year,month,parameter) {

            var orderList = [];

            var req = $http.post(
                $global.API_URL + 'api/orders/po/list/',
                {
                    key: 'xyz123',
                    ordStatus: ordStatus,
                    limit: pageLimit,
                    page: currentPage,
                    year:year,
                    month:month,
                    parameter:parameter

                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                orderList = response.data;

                return orderList;
            }

            function handleError(response) {
            }


        }


        function loadRetailersVendorsList() {

            var referenceDataList = [];

            var req = $http.post(
                $global.API_URL + 'api/orders/po/load-retailer-vendor/',
                {
                    key: 'xyz123',
                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                referenceDataList = response.data;
                return referenceDataList;
            }

            function handleError(response) {
            }


        }

        //getChartData

        function getChartData(year, month) {

            month = month + 1;
            var req = $http.post(
                $global.API_URL + 'api/crm/snapshot/orders',
                {
                    year: year,
                    month: month
                }
            );


            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {

                snapshotData = response.data;

                return {
                    'd0':snapshotData.data.d0,
                    'd1':snapshotData.data.d1,
                    'd2': [
                        ["JAN", Math.floor(Math.random() * 1000)],
                        ["FEB", Math.floor(Math.random() * 1000)],
                        ["MAR", Math.floor(Math.random() * 1000)],
                        ["APR", Math.floor(Math.random() * 1000)],
                        ["MAY", Math.floor(Math.random() * 1000)],
                        ["JUN", Math.floor(Math.random() * 1000)],
                        ["JUL", Math.floor(Math.random() * 1000)],
                        ["AGU", Math.floor(Math.random() * 1000)],
                        ["SEP", Math.floor(Math.random() * 1000)],
                        ["OCT", Math.floor(Math.random() * 1000)],
                        ["NOV", Math.floor(Math.random() * 1000)],
                        ["DEC", Math.floor(Math.random() * 1000)]
                    ],
                    'd3':snapshotData.data.d3,
                    'orders': {
                        'open': {
                            'count':snapshotData.order_data.openOrdersCount,
                            'color': 'vd_bg-red'
                        },
                        'value': {
                            'amount': snapshotData.order_data.openOrderValue,
                            'color': 'vd_bg-blue'
                        },
                        'transit': {
                            'count': snapshotData.order_data.inTransItOrdersCount,
                            'color': 'vd_bg-yellow'
                        },
                        'transitValue': {
                            'amount': snapshotData.order_data.inTransItOrderValue,
                            'color': 'vd_bg-grey'
                        }
                    },
                    'piechart_data':response.data.data.snapshots.openOrders,
                    'promotion_performance':response.data.data.snapshots.promotion_performance


                };
            }

            function handleError(response) {

            }

        }

        function getOrderStatusData(){

            var orderSearchData = $http.post($global.API_URL + 'api/orders/po/getOrderStatusData','');

            return orderSearchData;
        }

        // search purchase order

        function searchPOA(poData , pageLimit , currentPage , ordStatus ,year , month, parameter){

            var orderSearchData = $http.post($global.API_URL + 'api/orders/po/searchPurchaseOrder/',{
                    data : poData,
                    limit : pageLimit,
                    page: currentPage,
                    ordStatus: ordStatus,
                    year : year,
                    month : month,
                    parameter : parameter
                }
                ,{ headers: {

                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });

            return orderSearchData;

        }

        // search purchase order

        function getCompany(){
            var compData = $http.get($global.API_URL + 'api/orders/po/get-search-list-data/');
            return compData;
        }

        function downloadReport(status,filter) {
            var compData = $http.post($global.API_URL + 'api/orders/po/list/excel/',{
                status : status,
                filter : filter
            });
            return compData;
        }

        function emailReport(status) {
            var compData = $http.post($global.API_URL + 'api/orders/po/list/email/',{
                status : status
            });
            return compData;
        }


    }


})();



/**
 * Created by gayani on 9/11/15.
 */
(function () {

    angular.module("module.orders").controller('ordersViewController', [
        '$scope', '$http', 'ordersViewService', 'compensationCasesService', 'replacementCasesService', 'returnCasesService',
        'cancellationCasesService', 'otherCasesService', 'toastr', '$state', '$location', '$global', '$rootScope', '$modal',
        '$stateParams', '$filter', 'authService', 'modalService', 'remindersService', controller
    ])
        .filter('startFrom', function () {
            return function (data, start) {
                if (!data || !data.length) {
                    return;
                }
                return data.slice(start);
            }
        });

    function controller($scope, $http, ordersViewService, compensationCasesService, replacementCasesService, returnCasesService,
                        cancellationCasesService, otherCasesService, toastr, $state, $location, $global, $rootScope, $modal,
                        $stateParams, $filter, authService, modalService, remindersService) {


        var poid = $stateParams.id;
        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;
        $scope.hideViewAs = true;

/*

        if (poid === '') {
            $location.path("/orders/list");
        }
*/

        $scope.formatDate = function(date){
            var dateOut = '';
            var dateSplit = '';

            if(date){
                dateSplit = date.split("-").join("/");
                dateOut = new Date(dateSplit);
            }

            return dateOut;
        };

        $scope.poid = poid;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }

        if ($stateParams.id) {
            poid = $stateParams.id;
        }

        //cases
        $scope.allCases = allCases;
        $scope.compensationCaseByID = compensationCaseByID;
        $scope.replacementCaseByID = replacementCaseByID;
        $scope.returnById = returnById;
        $scope.otherByID = otherByID;
        $scope.cancellationByID = cancellationByID;

        compensationCasesService.getCompensationOrder(poid).then(function success(response) {
            $scope.orderItems = response.data.order_items;

        });


        allCases();

        function allCases() {
            var typeCases = 'all';
            //$rootScope.spinnerTrax = true;
            compensationCaseByID(typeCases);
            replacementCaseByID(typeCases);
            returnById(typeCases);
            cancellationByID(typeCases);
            otherByID(typeCases);
            //$rootScope.spinnerTrax = false;
        }

        function compensationCaseByID(typeCases) {
            var ordID = poid;
            var type = 'open';
            var id = '';
            //$rootScope.spinnerTrax = true;
            compensationCasesService.getCompensationList(type, id, ordID).then(function (response) {
                //$rootScope.spinnerTrax = false;
                if (typeCases) {
                    $scope.compensation = response.data;
                } else {
                    $scope.compensation = response.data;
                    $scope.return = '';
                    $scope.listData = '';
                    $scope.cancellation = '';
                    $scope.otherLists = '';
                }

            }, function (error) {
            });
        }

        function replacementCaseByID(typeCases) {
            var ordID = poid;
            var type = 'open';
            var id = '';

            replacementCasesService.listReplacements(type, ordID).then(function success(response) {
                if (typeCases) {
                    $scope.listData = response.data.cases;
                } else {
                    $scope.compensation = '';
                    $scope.return = '';
                    $scope.listData = response.data.cases;
                    $scope.cancellation = '';
                    $scope.otherLists = '';
                }
            }, function error(error) {

            });

        }

        function returnById(typeCases) {
            var ordID = poid;
            var type = 'open';
            returnCasesService.getReturnList(type, ordID).then(function (response) {
                if (typeCases) {
                    $scope.return = response.data.cases;
                } else {
                    $scope.return = response.data.cases;
                    $scope.compensation = '';
                    $scope.listData = '';
                    $scope.cancellation = '';
                    $scope.otherLists = '';
                }

            }, function (error) {
            });
        }

        function cancellationByID(typeCases) {
            var ordId = poid;
            var type = 'open';
            cancellationCasesService.getCancellationList(type, ordId).then(function (response) {
                if (typeCases) {
                    $scope.cancellation = response.data.cases;
                } else {
                    $scope.cancellation = response.data.cases;
                    $scope.return = '';
                    $scope.compensation = '';
                    $scope.listData = '';
                    $scope.otherLists = '';

                }

            }, function (error) {
            });
        }

        function otherByID(typeCases) {
            var id = poid;
            otherCasesService.getCaseList(id, 'open').then(function (response) {
                    if (typeCases) {
                        $scope.otherLists = response.data.cases;
                    } else {
                        $scope.otherLists = response.data.cases;
                        $scope.cancellation = '';
                        $scope.return = '';
                        $scope.compensation = '';
                        $scope.listData = '';

                    }


                },
                function (error) {
                }
            );
        }

        loadOrderData();

        function loadOrderData() {
            ordersViewService.getOrderDetails(poid).then(
                function (orderDetails) {
                    $scope.orderDetails = orderDetails;
                    $scope.phone = orderDetails.customer.phone1;
                    //$scope.phone = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");
                    $scope.orderDetails.poid = orderDetails.poid

                    var detailMailBody = "Customer Details";
                    detailMailBody += "\r\n--------------------- \r\n\r\n";
                    if (orderDetails.customer) {
                        $.each(orderDetails.customer, function (key, val) {
                            detailMailBody += key + ":" + val + " , \r\n";
                        });
                    }

                    detailMailBody += "\r\n\r\nOrder Details\r\n--------------------- \r\n\r\n";

                    if (orderDetails.order) {
                        $.each(orderDetails.order, function (key, val) {
                            detailMailBody += key + ":" + val + " , \r\n";
                        });
                    }

                    $scope.detailMailBody = encodeURI(detailMailBody);
                }
            );

            ordersViewService.getOrderAttachments(poid).then(
                function (orderAttachments) {
                    $scope.orderAttachments = orderAttachments;
                }
            );

            ordersViewService.getOrderNotes(poid).then(
                function (orderNotes) {
                    $scope.orderNotes = orderNotes;

                    var notesMailBody = "";

                    if (orderNotes) {
                        $.each(orderNotes, function (key, val) {
                            notesMailBody += "Name: " + val.displayName + "\r\n";
                            notesMailBody += "Description: " + val.description + "\r\n";
                            notesMailBody += "Date: " + val.createdAt.date + "\r\n";

                            notesMailBody += "\r\n\r\n--------------------- \r\n\r\n";
                        });
                    }

                    $scope.notesMailBody = encodeURI(notesMailBody);

                }
            );

        }


        // Add order note modal
        $scope.orderNote = function () {

            var modalScope = $rootScope.$new();

            modalScope.visibilities = [
                {id: 1, name: 'Platform'},
                {id: 2, name: 'Retailer'},
                {id: 3, name: 'Vendor'}
            ];

            modalScope.orderNoteData = {
                visibilities: [modalScope.visibilities[0].id]
            };

            getSelectedValues();

            modalScope.imChanged = function () {
                getSelectedValues()
            }

            function getSelectedValues() {
                modalScope.orderNoteData.visibilities.sort();
                var arrayLength = modalScope.orderNoteData.visibilities.length;
                var arraySelectedValues = [];
                for (var i = 0; i < arrayLength; i++) {
                    arraySelectedValues[i] = $filter('filter')(modalScope.visibilities, {id: modalScope.orderNoteData.visibilities[i]})[0].name;
                }
                modalScope.selectedValues = arraySelectedValues.join(', ');
            }

            modalScope.modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/orders/orderNoteModal.html',
                controller: 'ordersViewController',
                windowClass:'modal-center',
                size: 'm',
                scope: modalScope,
                resolve: {
                    orderNoteData: function () {
                        return modalScope.orderNoteData;
                    },
                    visibilities: function () {
                        return modalScope.visibilities;
                    },
                    selection: function () {
                        return modalScope.selection;
                    }
                }
            });

            modalScope.modalInstance.result.then(function () {
                //$scope.selected = selectedItem;
                toastr.clear();
                toastr.success('SUCCESS!', 'Note added Successfully!');

                setTimeout(loadOrderData, 2000);

            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        // helper method to get selected visibility
        $scope.selectedVisibilities = function selectedVisibilities() {
            return filterFilter($scope.visibilities, {selected: true});
        };

        // watch visibility for changes
        $scope.$watch('visibilities|filter:{selected:true}', function (nv) {
            if (angular.isDefined($scope.selection)) {
                $scope.selection = nv.map(function (visibility) {
                    return visibility.name;
                });
            }
        }, true);

        // Create now order note
        $scope.orderNoteSave = function () {

            var createdBy = authService.getUser();
            $scope.orderNoteData.createdBy = createdBy.userId;

            $scope.orderNoteData.poId = poid;

            ordersViewService.createOrderNote($scope.orderNoteData);
            if (angular.isDefined($scope.modalInstance)) {
                $scope.modalInstance.close(/*$scope.selected.item*/);
            }
        };

        // User settings modal Cancel
        $scope.orderNoteCancel = function () {
            if (angular.isDefined($scope.modalInstance)) {
                modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                    $scope.modalInstance.dismiss('cancel');
                })
            }
        };

        /* Attachment */

        $scope.addAttachment = function () {

            var modalScope = $rootScope.$new();

            modalScope.modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/orders/addAttachmentModal.html',
                controller: 'ordersViewController',
                windowClass: 'modal_center',
                size: 'm',
                scope: modalScope,
                resolve: {
                    orderAttachmentData: function () {
                        return modalScope.orderAttachmentData;
                    },
                    visibilities: function () {
                        return modalScope.visibilities;
                    },
                    selection: function () {
                        return modalScope.selection;
                    }
                }
            });

            modalScope.modalInstance.result.then(function (/*selectedItem*/) {
                //$scope.selected = selectedItem;
                toastr.clear();
                toastr.success('SUCCESS!', 'Attachment added Successfully!');

                setTimeout(loadOrderData, 2000);
                //loadOrderData();
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };


        $scope.addAttachmentSave = function () {

            var createdBy = authService.getUser();
            $scope.orderAttachmentData.createdBy = createdBy.userId;

            $scope.orderAttachmentData.poId = poid;

            ordersViewService.createOrderAttachment($scope.orderAttachmentData);

            if (angular.isDefined($scope.modalInstance)) {
                $scope.modalInstance.close();
            }
        };

        // User settings modal Cancel
        $scope.addAttachmentCancel = function () {
            if (angular.isDefined($scope.modalInstance)) {

                modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                    $scope.modalInstance.dismiss('cancel');

                });
            }
        };

        $scope.printDiv = function (divName) {
            var printContents = document.getElementById(divName).innerHTML;
            var popupWin = window.open('', '_blank', 'width=100,height=50');
            popupWin.document.open()
            popupWin.document.write('<html><head><link rel="stylesheet" type="text/css" href="style.css" /></head><body onload="window.print()">' + printContents + '</html>');
            popupWin.document.close();
        }


        // List reminders
        $scope.listOpen = [];
        $scope.listCompleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsCompleted = setAsCompleted;
        $scope.deleteReminder = deleteReminder;

        remindersService.listReminders({
            parentId: $scope.poid,
            userId: $scope.user.userId,
            type: 1
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listCompleted = response.completed;
        }, function error(error) {

        });

        function addReminder() {
            formOpenModal();
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                windowClass: 'modal_center',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.poid;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 1;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listCompleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listCompleted = $scope.listCompleted;
                    listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listCompleted = listCompleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listCompleted.push(angular.copy(result.data));
                        listCompleted = sortByDate(listCompleted);
                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsCompleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsCompleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listCompleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: response.id}));
                        listCompleted.push(angular.copy(response));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listCompleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: reminderId}));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                })
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');
            });
        };

        $scope.notConnected = function () {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        }
    }

})();

/**
 * Created by gayani on 9/8/15.
 */

(function () {

    var service = function ($http, $q, $global, multipartForm) {
        return {
            getOrderDetails: getOrderDetails,
            getOrderAttachments: getOrderAttachments,
            getOrderNotes: getOrderNotes,
            createOrderNote: createOrderNote,
            createOrderAttachment: createOrderAttachment

        };

        function getOrderDetails(poid) {

            var orderDetails = [];

            var req = $http.post(
                $global.API_URL + 'api/orders/po/detail/',
                {
                    "poid": poid
                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                var data = response.data;
                orderDetails = data.result;
                return orderDetails;
            }

            function handleError(response) {
            }
        }

        function getOrderAttachments(poid) {
            var orderAttachments = [];

            var req = $http.post(
                $global.API_URL + 'api/orders/po/detail/attachments/list/',
                {
                    "key": 'xyz123',
                    "poid": poid
                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                var data = response.data;
                orderAttachments = data.result;
                return orderAttachments;
            }

            function handleError(response) {
            }
        }

        function getOrderNotes(poid) {
            var orderNotes = [];

            var req = $http.post(
                $global.API_URL + 'api/orders/po/detail/notes/list/',
                {
                    "key": 'xyz123',
                    "poid": poid
                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                var data = response.data;
                orderNotes = data.result;
                return orderNotes;
            }

            function handleError(response) {
            }
        }

        //create order note
        function createOrderNote(data) {

            /*var fd = new FormData();
             angular.forEach(data, function (value, key) {
             fd.append(key, value);
             });*/

            return multipartForm.post($global.API_URL + 'api/orders/po/detail/notes/create/', data);

            /*$http.post($global.API_URL + 'api/orders/po/detail/notes/create/', fd, {
             transformRequest: angular.indentity,
             headers: {'Content-Type': undefined}
             }).then(function success(response) {
             //console.log(response);
             return response;
             }, function error(error) {
             //console.log(error);
             return error;
             });*/
        }

        //create order attachment
        function createOrderAttachment(data) {

            return multipartForm.post($global.API_URL + 'api/orders/po/detail/attachment/create/', data);

        }


    }

    angular.module("module.orders").service('ordersViewService', [
        '$http', '$q', '$global', 'multipartForm', service
    ]);

})();



(function () {
    'use strict';

    angular.module('module.productsCatalogue', []);

    //Routing
    angular.module('module.productsCatalogue').config(
        [ "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //productsCatalogue
            .state('productsCatalogue', {
                url: '/products-catalog',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html',
                    },
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/productsCatalogue.html',
                        controller: 'productsCatalogueController',
                    },

                },
                data: {
                    pageTitle: 'Products Catalog',
                    pageName: 'Products Catalog',
                },
                private: true
            })


            //Orders list
            .state('productsCatalogue.categories', {
                url: '/product-category',
                parent: 'productsCatalogue',
                views: {
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/product-category/categories.html',
                        controller: 'productCategoryController',
                    },

                },
                data: {
                    pageTitle: 'Products Catalog - Categories',
                    pageName: 'Categories',
                },
                private: true
            })

            //Orders list
            .state('productsCatalogue.products', {
                url: '/products',
                //parent: 'productsCatalogue',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/products/products.html',
                        controller: 'productController'
                    }
                },
                data: {
                    pageTitle: 'Products Catalog - Products',
                    pageName: 'Products'
                },
                private: true
            })

            // product specific
            .state('productsCatalogue.products.view', {
                url: '/view/:productId/:typeId',
                parent: 'productsCatalogue.products',
                views: {
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/products/product-specific.html',
                        controller : 'productSpecificController',
                    },
                },
                data: {
                    pageTitle: 'Product Specifications',
                    pageName: 'Product Specifications',
                },
                private: true
            })

            // Forecasts
            .state('productsCatalogue.forecasts', {
                url: '/forecasts',
                //parent: 'productsCatalogue',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@productsCatalogue': {
                        templateUrl: 'app/products-catalogue/forecasts/forecasts.html',
                        controller: 'forecastsController'
                    }
                },
                data: {
                    ageTitle: 'Products Catalog - Forecasts',
                    pageName: 'Forecasts',
                },
                private: true
            })
    }


})();
(function () {

    angular.module('module.productsCatalogue').controller('productsCatalogueController', [
        '$location', '$state', controller
    ]);

    /**
     * Product catalog
     */
    function controller($location, $state) {

       // $location.path("/products-catalog/products");
      //  $location.path('/products-catalog/products');
        //window.location.href = 'products-catalog/products';
        //$location.path('/products');

        $state.go('productsCatalogue.products');

    }

})();

(function () {
    'use strict';

    angular.module('module.reminders', []);

    //Routing
    angular.module('module.reminders').config(
        ["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", config]
    );

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //reminders
            .state('reminders', {
                url: '/reminders',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@reminders': {
                        templateUrl: 'app/reminders/reminders.html',
                        controller: 'remindersController'
                    }

                },
                data: {
                    pageTitle: 'Reminders',
                    pageName: 'Reminders'
                },
                private: true
            })


    }


})();

(function () {

    angular.module('module.reminders').controller('remindersController', [
        '$scope', '$rootScope', 'toastr', '$state', '$global', '$window', 'remindersService', 'authService', 'socketIO', controller
    ]);

    /**
     * remindersController
     */
    function controller($scope, $rootScope, toastr, $state, $global, $window, remindersService, authService, socketIO) {

        $rootScope.pageReminders = {};
        var userId;
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 20;
        $scope.maxSize = 5;

        userId = authService.getUser().userId;

        function getData() {
            remindersService.getReminders({
                userId: userId,
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                $rootScope.pageReminders = response.data;
                $scope.totalItems = response.count;
            }, function error(error) {

            });
        }

        getData();

        $scope.pageChanged = function () {
            getData();
        };

    }


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.orders').controller('formReminderModalController',
        ['modalService','$scope', '$modalInstance', 'reminderId', 'parentId', 'userId', 'status', 'type', 'remindersService', 'toastr', '$window','$rootScope', formReminderModalController]);
    function formReminderModalController(modalService,$scope, $modalInstance, reminderId, parentId, userId, status, type, remindersService, toastr, $window,$rootScope) {


        $scope.pageStatus = reminderId ? 'EDIT' : 'CREATE';
        $scope.reminderForm = {};
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.validateStatus = true;

        $scope.hoursOptions = [
            {name: 'Hour', value: ''},
            {name: '01', value: 1},
            {name: '02', value: 2},
            {name: '03', value: 3},
            {name: '04', value: 4},
            {name: '05', value: 5},
            {name: '06', value: 6},
            {name: '07', value: 7},
            {name: '08', value: 8},
            {name: '09', value: 9},
            {name: '10', value: 10},
            {name: '11', value: 11},
            {name: '12', value: 12}
        ];
        $scope.reminderForm.hour = $scope.hoursOptions[0].value;

        $scope.minuteOptions = [
            {name: 'Minute', value: ''},
            {name: '00', value: 0},
            {name: '15', value: 15},
            {name: '30', value: 30},
            {name: '45', value: 45}
        ];
        $scope.reminderForm.minute = $scope.minuteOptions[0].value;

        $scope.dateTypeOptions = [
            {name: 'AM/PM', value: ''},
            {name: 'AM', value: 'AM'},
            {name: 'PM', value: 'PM'}
        ];
        $scope.reminderForm.dateType = $scope.dateTypeOptions[0].value;

        $scope.save = reminderSave;

        $scope.title = "Add";
        $scope.button = "Create";

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };

        /**
         * Load data when retailer id is available (Edit mode)
         * */
        if ($scope.pageStatus === "EDIT") {

            $scope.title = "Edit";
            $scope.button = "Update";

            remindersService.getReminder({id: reminderId}).then(function (response) {
                if (response.id) {

                    $scope.reminderForm.reminder = response.reminder;
                    var date = new Date(moment.unix(response.date.timestamp).tz(response.date.timezone.name).format('YYYY-MM-DD HH:mm'));
                    var hour = date.getHours();
                    var dateType;
                    if (hour >= 12) {
                        dateType = 2;
                        /*if (hour == 12) {
                            dateType = 2;
                        } else {
                            dateType = 1;
                        }*/
                        hour = hour - 12;

                    } else {
                        dateType = 1;
                    }
                    if (hour == 0) {
                        hour = 12;
                    }
                    hour = _.findWhere($scope.hoursOptions, {value: hour});
                    $scope.reminderForm.hour = hour.value;
                    $scope.reminderForm.dateType = $scope.dateTypeOptions[dateType].value;
                    var minute = _.findWhere($scope.minuteOptions, {value: date.getMinutes()});
                    $scope.reminderForm.minute = minute.value;
                    $scope.reminderForm.calDate = date;
                    if (response.status === 1 && status !== true) {
                        $scope.validateStatus = false;
                    }
                } else {
                    toastr.error('Invalid reminder');
                    $modalInstance.close();
                }

            }, function (error) {

            });
        }

        function reminderSave(form) {

            var fullHour;
            fullHour = parseInt($scope.reminderForm.hour);

            if ($scope.reminderForm.dateType === 'PM' && fullHour < 12) {
                fullHour = fullHour + 12;
            }

            if ($scope.reminderForm.dateType === 'AM' && fullHour == 12) {
                fullHour = fullHour - 12;
            }


            // Prevent to enter past dates.
            if ($scope.reminderForm.calDate !== '' && $scope.reminderForm.hour !== '' && $scope.reminderForm.minute !== '' && $scope.reminderForm.dateType !== '' && $scope.validateStatus === true) {

                var formDate = new Date($scope.reminderForm.calDate.getFullYear(), $scope.reminderForm.calDate.getMonth(), $scope.reminderForm.calDate.getDate(), fullHour, $scope.reminderForm.minute, 0);

                if (formDate.getTime() < new Date().getTime()) {

                    form.cal_date.$setValidity('checkInvalidDate', false);
                    form.cal_date.$setDirty();
                    form.cat_hour.$setValidity('checkInvalidDate', false);
                    form.cat_hour.$setDirty();
                    form.cat_minute.$setValidity('checkInvalidDate', false);
                    form.cat_minute.$setDirty();
                    form.cat_date_type.$setValidity('checkInvalidDate', false);
                    form.cat_date_type.$setDirty();
                    return;
                } else {
                    form.cal_date.$setValidity('checkInvalidDate', true);
                    form.cal_date.$dirty = true;
                    form.cat_hour.$setValidity('checkInvalidDate', true);
                    form.cat_hour.$dirty = true;
                    form.cat_minute.$setValidity('checkInvalidDate', true);
                    form.cat_minute.$dirty = true;
                    form.cat_date_type.$setValidity('checkInvalidDate', true);
                    form.cat_date_type.$dirty = true;
                }

            }

            if (form.$invalid) {
                common.setDirty(form);
                return;
            }

            //Set date
            var dateStrToSend = $scope.reminderForm.calDate.getFullYear() + '-' + ($scope.reminderForm.calDate.getMonth() + 1) + '-' + $scope.reminderForm.calDate.getDate();
            $scope.reminderForm.date = dateStrToSend + ' ' + fullHour + ':' + $scope.reminderForm.minute + ':00';


            if ($scope.pageStatus === "EDIT") {

                $scope.reminderForm.id = reminderId;

                if (status == true) {
                    $scope.reminderForm.isRead = 0;
                    $scope.reminderForm.isTrigger = 0;
                    $scope.reminderForm.status = 0;
                }

                $scope.isProcessing = true;
                remindersService.saveReminder($scope.reminderForm).then(function success(response) {
                    var res = {};
                    if (response.id) {
                        res.data = response;
                        if (status == true) {
                            res.tab = 0;
                            res.status = true;
                        }
                        $modalInstance.close(res);
                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            } else {

                $scope.reminderForm.id = 0;
                $scope.reminderForm.userId = userId;
                $scope.reminderForm.parentId = parentId;
                $scope.reminderForm.status = 0;
                $scope.reminderForm.type = type;
                $scope.reminderForm.isRead = 0;
                $scope.reminderForm.isTrigger = 0;
                $scope.isProcessing = true;

                remindersService.saveReminder($scope.reminderForm).then(function success(response) {
                    var res = {};
                    if (response.id) {
                        res.data = response;
                        res.tab = 0;
                        $modalInstance.close(res);
                        toastr.success('Reminder has been created successfully.');
                    } else {
                        $scope.isProcessing = false;
                        toastr.error('Reminder create failed.');
                    }
                }, function error(error) {
                    $scope.isProcessing = false;
                    toastr.error('Reminder create failed.');
                });
            }
        }


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


    }

})
();
(function () {

    angular.module("module.reminders").service('remindersService', [
        '$http', '$q', '$global', service
    ]);

    function service($http, $q, $global) {

        return {
            getReminders: getReminders,
            listReminders: listReminders,
            saveReminder: saveReminder,
            getReminder: getReminder,
            setAsCompleted: setAsCompleted,
            deleteReminder: deleteReminder
        }

        function getReminders(req) {
            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/reminders/get-by-user/', {
                userId: req.userId,
                limit: req.limit,
                page: req.page
            }).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }

        function listReminders(req) {

            var deferred = $q.defer();

            $http.post($global.API_URL + 'api/reminders/list-of-reminders/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function saveReminder(req) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/reminders/save/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function getReminder(req) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/reminders/get/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function setAsCompleted(req) {

            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/reminders/set-as-completed/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;

        }

        function deleteReminder(req) {
            var deferred = $q.defer();
            $http.post($global.API_URL + 'api/reminders/delete/', req).then(function success(response) {
                var data = response.data;
                deferred.resolve(data);
            }, function error(error) {
                deferred.reject(error);
            });

            return deferred.promise;
        }


    }


})();



(function () {
    'use strict';

    angular.module('module.snapshot', []);

    //Routing
    angular.module("module.snapshot").config([
        "$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider",
        config]);

    function config($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider) {

        $stateProvider

            //Snapshot
            .state('snapshot', {
                url: '/snapshot',
                views: {
                    'layout': {
                        templateUrl: 'app/common/default-layout.html'
                    },
                    'content@snapshot': {
                        templateUrl: 'app/snapshot/snapshot.html',
                        controller : 'snapshotController'
                    }

                },
                data: {
                    pageTitle: 'Snapshot',
                    pageName: 'Snapshot'
                },
                private: true
            })

            .state('list',{
                url: '/list/:mainTab',
                params: {
                    mainTab: {squash: true, value: null},
                    year: {squash: true, value: null},
                    month: {squash: true, value: null},
                    list_type: {squash: true, value: null},
                },
                parent: 'orders',
                views: {
                    'content@orders': {
                        templateUrl: 'app/orders/orderLists.html',
                        controller: 'ordersListController'
                    }

                },
                data: {
                    pageTitle: 'Order List',
                    pageName: 'Order List'
                },
                private: true
            })

            //all cases
            .state('allcases', {
                url: '/allcases/:type',
                params: {
                    type: {squash: true, value: null}
                },
                parent: 'customerService',
                views: {
                    'content@customerService': {
                        templateUrl: 'app/customer-service/cases-common.html',
                        controller: 'customerServiceController'
                    }

                },
                data: {
                    pageTitle: 'Cases',
                    pageName: 'Cases'
                },
                private: true
            });



    }


})();







(function () {

    angular.module("module.snapshot").controller('snapshotController', [
        '$scope', '$http', 'authService', 'snapshotService', 'ordersService', 'toastr', '$state','$window','$rootScope', controller
    ]);


    function controller($scope, $http, authService, snapshotService, ordersService, toastr, $state,$window, $rootScope) {


        var ploatCHARTOption = {
            xaxis: {
                mode: "categories",

                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            yaxis: {
                ticks: 3,
                tickDecimals: 0,
                tickColor: "#f0f0f0",
                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            grid: {
                backgroundColor: {colors: ["#fff", "#fff"]},
                borderWidth: 1, borderColor: "#f0f0f0",
                margin: 0,
                minBorderMargin: 0,
                labelMargin: 20,
                hoverable: true,
                clickable: true,
                mouseActiveRadius: 6
            },
            legend: {show: false}
        };



        var currentTime = new Date();

        $rootScope.spinnerTrax = true;

        $scope.title = "Orders Closed";
        $scope.tab = "order";

        $scope.settab = function (tab) {
            $scope.tab = tab;

            $scope.selectedYear = 2015;
            var year = currentTime.getFullYear()
            $scope.selectedMonth = currentTime.getMonth()+1;
            var month = currentTime.getMonth()+1;
            var month_array =['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

            var userType = authService.getUser().group;


            switch (tab) {

                case "customer":
                    $scope.graph0_title = "";
                    $scope.graph_shipped_title = "";
                    $scope.graph1_title = "Number of Open Issues";
                    $scope.graph_resolved_title = "Number of Resolved Issues";
                    $scope.graph1_new_title = "";
                    $scope.piechart1_title = "Open Cases";
                    $scope.piechart2_title = "Case Statuses";
                    $scope.piechart3_title = "Case Types";
                    $scope.pie_type = "customer";
                    $scope.this_month=month_array[month-1];

                    $scope.this_month_boxA= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxB="";
                    $scope.this_month_boxC="";
                    $scope.this_month_boxD="";
                    $scope.promotion_performance="";
                    $scope.customer_tab_var=1;
                    $scope.historical_url="#!/customer-service/customer-service-snapshot";
                    $scope.boxAShippedValue = "";

                    $scope.Year=year;
                    $scope.Month=month;

                    $scope.box1url="#!/customer-service/chart-data/open/1/2015/11";

                    $scope.box2url="#!/customer-service/all-cases/30";

                    $scope.box3url="#!/customer-service/all-cases/60";

                    $scope.box4url="#!/customer-service/all-cases/90";


                    $rootScope.spinnerTrax = true;
                    snapshotService.getChartData($scope.selectedYear, $scope.selectedMonth, tab).then(
                        function (snapshotDetails) {
                            $rootScope.spinnerTrax = false;
                            var chart_data = snapshotDetails.data;

                            //$rootScope.spinnerTrax = false;

                            var ploatCHARTData = [
                                {
                                    label: "Revenue",
                                    data: chart_data.d1,
                                    lines: {
                                        fill: 0.4,
                                        lineWidth: 0
                                    },
                                    color: ['#fffff']
                                }, {
                                    data: chart_data.d1,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d1,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                },
                                {
                                    label: "Cost",
                                    data: chart_data.d1,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#f2be3e", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                }
                            ];
                            var ploatCHARTData2 = [
                                {
                                    label: "Revenue",
                                    data: chart_data.d2,
                                    lines: {
                                        fill: 0.4,
                                        lineWidth: 0
                                    },
                                    color: ['#fffff']
                                }, {
                                    data: chart_data.d2,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d2,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                },
                                {
                                    label: "Cost",
                                    data: chart_data.d2,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#f2be3e", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                }
                            ];

                            $scope.pieOptions1 = {
                                 series: {
                                    pie: {
                                        show: true,
                                        label: {
                                            show: true,
                                            radius: .5,
                                            formatter: labelFormatter,
                                            background: {
                                                opacity: 0
                                            }
                                        },

                                    }
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                                colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                            }

                            $scope.pieOptions2 = {
                                series: {
                                    pie: {
                                        show: true,
                                        label: {
                                            show: true,
                                            radius: .5,
                                            formatter: labelFormatter,
                                            background: {
                                                opacity: 0
                                            }
                                        },

                                    }
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                                colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                            }

                            $scope.pieOptions3 = {
                                series: {
                                    pie: {
                                        show: true,
                                        label: {
                                            show: true,
                                            radius: .5,
                                            formatter: labelFormatter,
                                            background: {
                                                opacity: 0
                                            }
                                        },

                                    }
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                                colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                            }


                            $scope.boxAval = chart_data.snapshots.openCount.count;
                            $scope.boxAtitle = "NUMBER OF OPEN ISSUES AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.boxBval = chart_data.snapshots.tickets30Days.count;
                            $scope.boxBtitle = "Tickets > 30 days AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.boxCval = chart_data.snapshots.tickets60Days.count;
                            $scope.boxCtitle = "Tickets > 60 days AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.boxDval = chart_data.snapshots.tickets90Days.count;
                            $scope.boxDtitle = "Tickets > 90 days AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.myData = ploatCHARTData;
                            $scope.resolveddata = ploatCHARTData2;
                            $scope.myChartOptions = ploatCHARTOption;

                            $scope.ordersShippedData = chart_data.snapshots.ordersShipped;
                            $scope.pieDataset1 = chart_data.snapshots.openOrders;
                            $scope.pieDataset2 = chart_data.snapshots.casestatus;
                            $scope.pieDataset3 = chart_data.snapshots.casestype;
                            $rootScope.apply();
                        }, function (error) {
                            $rootScope.spinnerTrax = false;
                        }
                    );


                    break;
                case "order":
                    $scope.graph0_title = "Shipped Orders";
                    $scope.graph_shipped_title = "";
                    $scope.graph1_title = "Delivered Orders";
                    $scope.graph0_title = "";
                    $scope.graph_resolved_title = "";

                    $scope.graph1_new_title = "Orders In Transit";

                    if ( common.isHidegraphByuserType(userType,3)) {
                        $scope.graph1_new_title = "";
                    }

                    $scope.graph2_title = "";
                    $scope.piechart1_title = "Open Orders";
                    $scope.piechart2_title = "Case Statuses";
                    $scope.piechart3_title = "Case Types";
                    $scope.pie_type = "order";
                    $scope.this_month_boxA= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxB= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxC= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxD= "For Month "+ month_array[month-1] + " ";
                    $scope.customer_tab_var=0;
                    $scope.Year=year;
                    $scope.Month=month;
                    $scope.historical_url="#!/orders";
                    $scope.boxAShippedValue = "";


                    $scope.box1url="#!/orders/list/1/"+year+"/"+month;

                    $scope.box2url="#!/orders/list/1/"+year+"/"+month;

                    $scope.box3url="#!/orders/list/2/"+year+"/"+month;

                    $scope.box4url="#!/orders/list/2/"+year+"/"+month;


                    $scope.pieDataset1="";
                    $scope.pieDataset2="";
                    $scope.pieDataset3="";

                    $rootScope.spinnerTrax = true;
                    snapshotService.getChartData($scope.selectedYear, $scope.selectedMonth, tab).
                        then(function success(response) {
                            $rootScope.spinnerTrax = false;
                            $scope.filter_year ="year:"+$scope.selectedYear;
                            $scope.filter_month = "month:"+$scope.selectedMonth;
                            var chart_data = response.data;

                            var ploatCHARTData0 = [
                                {
                                    data: chart_data.d0,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d0,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                }


                            ];


                            var ploatCHARTData = [
                                {
                                    data: chart_data.d1,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d1,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                }

                            ];

                            var ploatCHARTData2 = [
                                {
                                    label: "Revenue",
                                    data: chart_data.d3,
                                    lines: {
                                        fill: 0.4,
                                        lineWidth: 0
                                    },
                                    color: ['#fffff']
                                }, {
                                    data: chart_data.d3,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d3,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#f2be3e",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                },
                                {
                                    label: "Cost",
                                    data: chart_data.d3,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#f2be3e",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                }
                            ];


                            var ploatCHARTData4 = [
                                {
                                    label: "Revenue",
                                    data: chart_data.d4,
                                    lines: {
                                        fill: 0.4,
                                        lineWidth: 0
                                    },
                                    color: ['#fffff']
                                }, {
                                    data: chart_data.d4,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d4,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#f2be3e",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                },
                                {
                                    label: "Cost",
                                    data: chart_data.d4,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#f2be3e",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                }
                            ];


                            $scope.pieOptions1 = {
                                series: {
                                    pie: {
                                        show: true,
                                        label: {
                                            show: true,
                                            radius: .5,
                                            formatter: labelFormatter,
                                            background: {
                                                opacity: 0
                                            }
                                        },

                                    }
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                                colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                            }, function (error) {
                                $rootScope.spinnerTrax = false;
                            }


                            $scope.openCases_piedataptions = {
                                series: {
                                    pie: {
                                        show: true,
                                        label: {
                                            show: true,
                                            radius: .5,
                                            formatter: labelFormatter,
                                            background: {
                                                opacity: 0
                                            }
                                        },

                                    }
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                                colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                            }

                            //shipped data
                            $scope.shippeddata = ploatCHARTData0;
                            $scope.myData = ploatCHARTData;
                            $scope.myChartOptions = ploatCHARTOption;
                            $scope.myData2 = ploatCHARTData2;
                            $scope.ordersShippedData = chart_data.snapshots.ordersShipped;

                            $scope.myChartOptions = ploatCHARTOption;
                            $scope.Numberofresolvedtickets = ploatCHARTData4;

                            $scope.promotion_performance=chart_data.snapshots.promotion_performance;
                            $scope.pieDataset1 = chart_data.snapshots.openOrders;

                            $scope.openCases_piedataptions = ploatCHARTOption;
                            $scope.openCases_piedata = chart_data.snapshots.openCases;
                            $scope.piechart2_title = "Case Statuses";



                            $scope.boxAval = response.order_data.openOrdersCount;
                            $scope.boxAtitle = "NUMBER OF OPEN ORDERS AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.boxBval = response.order_data.openOrderValue;
                            $scope.boxBtitle = "VALUE OF OPEN ORDERS AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.boxCval = response.order_data.inTransItOrdersCount;
                            $scope.boxCtitle = "ORDERS IN TRANSIT AS OF " + moment(currentTime).format('MM/DD/YYYY');

                            $scope.boxDval = response.order_data.inTransItOrderValue;
                            $scope.boxDtitle = "VALUE OF ORDERS IN TRANSIT AS OF " + moment(currentTime).format('MM/DD/YYYY');



                        }, function (error) {
                            $rootScope.spinnerTrax = false;
                        });

                    break;
                case "delivery":
                    $scope.graph0_title = "";
                    $scope.graph_shipped_title = "Shipped Orders";
                    $scope.graph1_title = "Orders In Transit";
                    $scope.graph0_title = "";
                    $scope.graph1_new_title = "Delivered Orders";
                    $scope.title = "Orders In Transit";
                    $scope.piechart_title = "Open Orders";
                    $scope.graph_resolved_title = "";


                    if ( common.isHidegraphByuserType(userType,3)) {
                        $scope.graph1_title = "";
                    }



                    $scope.box1url="#!/orders/list/3/"+year+"/"+month;

                    $scope.box2url="#!/orders/list/3/"+year+"/"+month;

                    $scope.box3url="#!/orders/list/2/"+year+"/"+month;

                    $scope.box4url="#!/orders/list/2/"+year+"/"+month;

                    $scope.pieDataset1="";
                    $scope.pieDataset2="";
                    $scope.pieDataset3="";
                    $scope.this_month_boxA= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxB= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxC= "For Month "+ month_array[month-1] + " ";
                    $scope.this_month_boxD= "For Month "+ month_array[month-1] + " ";
                    $scope.customer_tab_var=0;
                    $scope.historical_url="#!/delivery";


                    $scope.promotion_performance="";

                    $rootScope.spinnerTrax = true;
                    snapshotService.getChartData($scope.selectedYear, $scope.selectedMonth, tab).then(
                        function (snapshotDetails) {
                            $rootScope.spinnerTrax = false;
                            var chart_data = snapshotDetails.data;

                            var ploatCHARTData0 = [
                                {
                                    data: chart_data.d0,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d0,
                                    points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                                    color: '#fff',
                                    shadowSize: 0
                                }


                            ];


                            var ploatCHARTData = [
                                {
                                    label: "Revenue",
                                    data: chart_data.d2,
                                    lines: {
                                        fill: 0.4,
                                        lineWidth: 0
                                    },
                                    color: ['#f2be3e']
                                }, {
                                    data: chart_data.d1,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d1,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#F85D2C",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                },
                                {
                                    label: "Cost",
                                    data: chart_data.d2,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#f2be3e",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                }
                            ];

                            var ploatCHARTData2 = [
                                {
                                    label: "Revenue",
                                    data: chart_data.d3,
                                    lines: {
                                        fill: 0.4,
                                        lineWidth: 0
                                    },
                                    color: ['#FFFFF']
                                }, {
                                    data: chart_data.d3,
                                    animator: {steps: 60, duration: 1000, start: 0},
                                    lines: {lineWidth: 2},
                                    shadowSize: 0,
                                    color: '#F85D2C'
                                }, {
                                    label: "Revenue",
                                    data: chart_data.d3,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#F85D2C",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                },
                                {
                                    label: "Cost",
                                    data: chart_data.d3,
                                    points: {
                                        show: true,
                                        fill: true,
                                        radius: 6,
                                        fillColor: "#f2be3e",
                                        lineWidth: 3
                                    },
                                    color: '#fff',
                                    shadowSize: 0
                                }
                            ];


                            $scope.pieOptions1 = {
                                series: {
                                    pie: {
                                        show: true,
                                        label: {
                                            show: true,
                                            radius: .5,
                                            formatter: labelFormatter,
                                            background: {
                                                opacity: 0
                                            }
                                        },

                                    }
                                },
                                grid: {
                                    hoverable: true,
                                    clickable: true
                                },
                                colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                            }, function (error) {
                                $rootScope.spinnerTrax = false;
                            }


                            $scope.myData = ploatCHARTData;

                            $scope.myData2 = ploatCHARTData2;


                            $scope.myChartOptions = ploatCHARTOption;
                            $scope.ordersShippedData = chart_data.snapshots.ordersShipped;

                            $scope.pieDataset1 = chart_data.snapshots.openOrders;

                            $scope.boxAval = snapshotDetails.deliverd_data.DeliveredOrdersCount;
                            $scope.boxAtitle = "NUMBER OF DELIVERED ORDERS AS OF " +  month_array[month-1] ;

                            $scope.boxBval = snapshotDetails.deliverd_data.DeliveredOrderValue;
                            $scope.boxBtitle = "VALUE OF DELIVERED ORDERS AS OF " +  month_array[month-1] ;

                            $scope.boxCval = snapshotDetails.deliverd_data.inTransItOrdersCount;
                            $scope.boxCtitle = "ORDERS IN TRANSIT AS OF " +  month_array[month-1] ;

                            $scope.boxDval = snapshotDetails.deliverd_data.inTransItOrderValue;
                            $scope.boxDtitle = "VALUE OF ORDERS IN TRANSIT AS OF " +  month_array[month-1] ;


                            $scope.boxAShippedurl="#!/orders/list/3/"+year+"/"+month;
                            $scope.boxAShippedValue=snapshotDetails.deliverd_data.shipped_order_count;
                            $scope.boxAShippedurlAtitle="Number of Shipped Orders as of "+month_array[$scope.Month-1];

                            $scope.boxBShippedurl="#!/orders/list/3/"+year+"/"+month;
                            $scope.boxBShippedValue=snapshotDetails.deliverd_data.shipped_order_value;
                            $scope.boxBShippedurlBtitle="Value of Shipped Orders as of "+month_array[$scope.Month-1];


                        }, function (error) {
                            $rootScope.spinnerTrax = false;
                        }
                    );

                    break;

                default:
                    $scope.months = {};
                    $scope.years = {};
                    $scope.title = "";
                    $scope.myData = {};
                    $scope.myChartOptions = {};
                    $scope.graph0_title = "";

                    $scope.openCount = "";
                    $scope.tickets30Days = "";
                    $scope.tickets60Days = "";
                    $scope.tickets90Days = "";


                    $scope.myData = "";
                    $scope.myChartOptions = "";

                    $scope.ordersShippedData = "";
                    $scope.pieDataset = "";

            }


        };

                $scope.setYear = function (data) {
                    $scope.selectedYear = data;

                    setChart($scope.selectedYear, $scope.selectedMonth, $scope.tab);

                };


                $scope.setMonth = function (data) {

                    $scope.selectedMonth = data;
                    setChart($scope.selectedYear, $scope.selectedMonth, $scope.tab);

                };




        function setChart(year, month, type) {

            snapshotService.getChartData(year, month, type).then(
                function (snapshotDetails) {

                    var chart_data = snapshotDetails.data;


                    var ploatCHARTData = [
                        {
                            label: "Revenue",
                            data: chart_data.d2,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#f2be3e']
                        }, {
                            data: chart_data.d1,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d1,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d2,
                            points: {show: true, fill: true, radius: 6, fillColor: "#f2be3e", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    $scope.openCount = chart_data.snapshots.openCount.count;

                    $scope.tickets30Days = chart_data.snapshots.tickets30Days.count;

                    $scope.tickets60Days = chart_data.snapshots.tickets60Days.count;

                    $scope.tickets90Days = chart_data.snapshots.tickets90Days.count;


                    $scope.myData = ploatCHARTData;
                    $scope.myChartOptions = ploatCHARTOption;

                    $scope.ordersShippedData = chart_data.snapshots.ordersShipped;
                    $scope.pieDataset = chart_data.snapshots.openOrders;

                }
            );


        }

        //$scope.onEventPloatHover = function (event, pos, item) {
        //    //``console.log('Hover! ' + event.timeStamp + ' ' + pos.pageX + ' ' + pos.pageY)
        //
        //    var previousPoint = null;
        //    if (item) {
        //        if (previousPoint != item.dataIndex) {
        //
        //            previousPoint = item.dataIndex;
        //
        //            //$("#tooltip").remove();
        //            angular.element("#tooltip").remove();
        //            var x = item.datapoint[0].toFixed(2),
        //                y = item.datapoint[1].toFixed(2);
        //
        //            showTooltip(item.pageX, item.pageY,
        //                "<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" + Math.round(x) + " NOV 2013 </strong></p>" +
        //                "<div style='padding: 0 10px 10px;'>" +
        //                "<div>" + item.series.label + ": <strong>" + Math.round(y) + "</strong></div>" +
        //                "<div> Profit: <strong>$" + Math.round(y) * 7 + "</strong></div>" +
        //                "</div>"
        //            );
        //        }
        //    } else {
        //        //$("#tooltip").remove();
        //        angular.element("#tooltip").remove();
        //        previousPoint = null;
        //    }
        //}

        //function showTooltip(x, y, contents) {
        //    $('<div id="tooltip">' + contents + '</div>').css({
        //        position: 'absolute',
        //        display: 'none',
        //        top: y + 5,
        //        left: x + 20,
        //        size: '10',
        //        'background-color': '#111111',
        //        color: "#FFFFFF",
        //        opacity: 0.85
        //    }).appendTo("body").fadeIn(200);
        //}

        $scope.onEventPieClicked = function (event, pos, obj,pie_type) {

            //
            //
            //if (!obj) {
            //    return;
            //}
            //var percent = parseFloat(obj.series.percent).toFixed(2);
            //var year = currentTime.getFullYear()
            //$scope.selectedMonth = currentTime.getMonth()+1;
            //var month = currentTime.getMonth()+1;
            //
            //if(pie_type=="order"){
            //
            //
            //    var orders_array=new Array("Orders < 5 days","Orders > 5 days","Orders > 15 days","Orders > 30 days","Orders > 60 days","Orders > 90 days");
            //    if(-1 < orders_array.indexOf(obj.series.label)){
            //        var parameter=orders_array.indexOf(obj.series.label);
            //    }
            //    //year/month/type
            //    $window.location.href = '/#!/orders/list/1/'+year+'/'+month+'/'+parameter+'';
            //
            //
            //}else if(pie_type=="customer"){
            //
            //    var cases_array=new Array("Cases Less than 5","Cases > 5 days","Cases < 5 days","Cases > 15","Cases < 15 days","Cases > 30 days","Cases > 60","Cases > 90 days");
            //    var casestatus_array=new Array("Open","In Progress","Resolved","Cancelled","Closed as unresolved");
            //    var casestype_array=new Array("Compensation","Replacement","Return","Cancellation","Medic","Other");
            //
            //
            //    if(-1 < cases_array.indexOf(obj.series.label)){
            //
            //        var chart_type="open_cases";
            //        var parameter=cases_array.indexOf(obj.series.label);
            //
            //        ///chart-data/:chart_type/:year/:month/:parameter
            //
            //        $window.location.href = '#!/customer-service/chart-data/'+chart_type+'/'+year+'/'+month+'/'+parameter;
            //
            //
            //
            //    }else if(-1 < casestatus_array.indexOf(obj.series.label)){
            //
            //        var chart_type="case_status";
            //        var parameter=casestatus_array.indexOf(obj.series.label);
            //
            //        $window.location.href = '#!/customer-service/chart-data/'+chart_type+'/'+year+'/'+month+'/'+parameter;
            //
            //
            //
            //    }else if(-1 < casestype_array.indexOf(obj.series.label)){
            //
            //        var chart_type="cases_type";
            //        var parameter=casestype_array.indexOf(obj.series.label);
            //
            //        var parameter=casestype_array[parameter];
            //        var stringparamet=angular.lowercase(parameter);
            //        $window.location.href = '#!/customer-service/'+stringparamet+'-cases';
            //
            //
            //    }
            //
            //
            //
            //
            //}else if(pie_type=="order"){
            //
            //
            //}else if(pie_type=="delivery"){
            //
            //
            //}

        }


        function labelFormatter(label, series) {

            return "<div style='font-size:10pt; text-align:center; padding:2px; color:white;'>" + Math.round(series.percent) + "%</div>"; //+ label + "<br/>"
        }


        $scope.onEventPloatHover = function (event, pos, item){



            if (item) {

                if (previousPoint != item.dataIndex) {

                    previousPoint = item.dataIndex;

                    $("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2),
                        y = item.datapoint[1].toFixed(2);
                    var amount=item.series.data[item.dataIndex][2];

                    var month ="";
                    var m = Math.round(x);

                    switch (m){
                        case 0: { month ="JAN"; break;}
                        case 1: { month ="FEB"; break;}
                        case 2: { month ="MAR"; break;}
                        case 3: { month ="APR"; break;}
                        case 4: { month ="MAY"; break;}
                        case 5: { month ="JUN"; break;}
                        case 6: { month ="JUL"; break;}
                        case 7: { month ="AUG"; break;}
                        case 8: { month ="SEP"; break;}
                        case 9: { month ="OCT"; break;}
                        case 10: { month ="NOV"; break;}
                        case 11: { month ="DEC"; break;}

                    }

                   var html="<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" +month+ " "+ $scope.Year +"</strong></p>" +
                    "<div style='padding: 0 10px 10px;'>" +
                    "<div>Number: <strong>"+ Math.round(y)  +"</strong></div>";

                    if (typeof amount == 'undefined'){

                    }else{

                        html +="<div>Value($): <strong>"+ amount  +"</strong></div>" +
                            "</div>";

                    }


                    showTooltip(item.pageX, item.pageY,html

                    );
                }
            } else {
                $("#tooltip").remove();
                previousPoint = null;
            }
        }


        function showTooltip(x, y, contents) {
            $('<div id="tooltip">' + contents + '</div>').css({
                position: 'absolute',
                display: 'none',
                top: y + 5,
                left: x + 20,
                size: '10',
//              'border-top' : '3px solid #1FAE66',
                'background-color': '#111111',
                color: "#FFFFFF",
                opacity: 0.85
            }).appendTo("body").fadeIn(200);
        }

    }

})();


(function () {

    angular.module("module.snapshot").service('snapshotService', [
        '$http', '$q', '$global','ordersService', service
    ]);

    function service($http, $q, $global) {
        return {
            getChartData: getChartData,
            getChartData2: getChartData2
        };




        function getChartData(year, month,type) {
            var snapshotData = [];



            switch(type) {

                case "customer":
                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "order":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/orders',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "delivery":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/delivery',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                default:
                    $scope.months ={};

            }
            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                snapshotData = response.data;

                return snapshotData;
            }

            function handleError(response) {
            }

        }
        function getChartData2(year, month,type) {
            var snapshotData = [];

            switch(type) {

                case "order":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/delivery',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                case "delivery":

                    var req = $http.post(
                        $global.API_URL + 'api/crm/snapshot/orders',
                        {
                            type:'main_snapshot',
                            year: year,
                            month: month
                        }
                    );

                    break;
                default:
                    $scope.months ={};

            }
            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                snapshotData = response.data;

                return snapshotData;
            }

            function handleError(response) {
            }

        }

    }
})();
(function () {
    'use strict';

    angular.module('module.users', []);

    //Routing
    angular.module('module.users').config(['$stateProvider', config]);

    function config($stateProvider) {

        $stateProvider

            //dashboard
            .state('settings', {
                url: '/users',
                templateUrl: 'app/user/settings.html',
                controller: 'usersController',
                //TODO: Parent should apply
                title: 'Users',
                private: true
            })

        ;


    }


})();
(function () {

    angular.module('module.users').controller('usersController', [
        '$scope', '$rootScope', 'loginService', 'usersService', 'toastr', '$state', '$global', '$window', 'authService', controller
    ]);

    /**
     * Comment
     */
    function controller($scope, $rootScope, loginService, usersService, toastr, $state, $global, $window, authService) {

        $scope.user = {};
        $scope.submit = submit;
        //$scope.check_current_password = check_current_password;


        //login submit
        function submit(form) {

            loginService.login($scope.user).then(function (response) {
                toastr.success('SUCCESS!', response.message);
                $state.go("snapshot");
            }, function (error) {
                toastr.error('ERROR!', error.message);
            });

        }

        //-------------
        // Add order note modal
        $scope.userSettings = function () {

            var modalScope = $rootScope.$new();

            modalScope.orderNoteData = {
                visibilities: [modalScope.visibilities[0].id]
            };

            modalScope.displayName = $localStorage.user;

            modalScope.modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/users/usersSettings.html',
                controller: 'usersController',
                size: 'm',
                scope: modalScope,
                resolve: {
                    userSettingsData: function () {
                        return modalScope.userSettingsData;
                    }
                }
            });

            modalScope.modalInstance.result.then(function (/*selectedItem*/) {
                //$scope.selected = selectedItem;
                loadUserData();
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        // Create now order note
        $scope.userSettingsSave = function () {

            var password = $scope.userSettingsData.password;
            //var userId = 1;
            usersService.verification(password).then(function (response) {
                    var data = response.data.data;
                    if (data.status_message == true) {
                        $scope.isPasswordError = false;

                        var data = usersService.saveUserSettings(
                            $scope.userSettingsData
                        ).then(function success(response) {
                                if (angular.isDefined($scope.modalInstance)) {
                                    var user = authService.getUser();
                                    if (response.data.fileName !== '') {
                                        user.profilePicturePath = response.data.fileName;
                                    }
                                    if (response.data.names !== '') {
                                        user.displayName = response.data.names;
                                    }
                                    authService.setUser(user);
                                    $scope.modalInstance.close(/!*$scope.selected.item*!/);
                                    toastr.clear();
                                    toastr.success('Profile updated successfully!');
                                }
                            },
                            function error(error) {

                            });

                    }
                    else {
                        $scope.isPasswordError = true;
                    }
                }, function (error) {

                }
            )
            ;

            //console.log($scope.userSettingsData);
        };

        // User settings modal Cancel
        $scope.userSettingsCancel = function () {
            if (angular.isDefined($scope.modalInstance)) {
                if ($window.confirm("Do you want to close the window?")) {
                    $scope.modalInstance.dismiss('cancel');
                }
                else {
                }
            }
        };


        //-------------
        // User settings modal Save
        $scope.settingsSave = function () {
            if (angular.isDefined($scope.modalInstance)) {
                $scope.modalInstance.close(/*$scope.selected.item*/);
            }

        };

        // User settings modal Cancel
        $scope.settingsCancel = function () {
            if (angular.isDefined($scope.modalInstance)) {
                if ($window.confirm("Do you want to close the window?")) {
                    $scope.modalInstance.dismiss('cancel');
                }
                else {
                }
            }
        };


        //user settings
        loadUserData();

        function loadUserData() {
            usersService.getUserDetails().then(
                function (userData) {
                    $scope.userSettingsData = userData;
                    $scope.API_URL = $global.API_URL;
                    //console.log($scope.userSettingsData);
                }
            );
        }


        //$scope.userDetails = usersService.getusers();
        //console.log($scope.userDetails);

        /*// User settings modal Update
         $scope.settingsSave = function () {

         $scope.userDetails = usersService.update();
         //if (angular.isDefined($scope.modalInstance)) {
         //    $scope.modalInstance.update('update');
         //}

         };*/


    }

})
();
/**
 * Created by malinda on 11/9/15.
 */

(function () {

    // var host = "http://ot-service.dev";

    angular.module("module.users").service('usersService', [
        '$http', '$global', 'multipartForm', 'authService', service
    ]);

    function service($http, $global, multipartForm, authService) {
        return {
            getUserDetails: getUserDetails,
            //update: update,
            saveUserSettings: saveUserSettings,
            verification: verification
        };

        /*function getusers() {

         var allData = [];

         $http.get($global.API_URL + 'api/users/user/retrieve/').success(function (response) {

         allData =  response.data;

         console.log(allData);
         });

         return allData;

         }*/

        function getUserDetails() {

            var userDetails = [];

            var loggedInUser = authService.getToken();

            var req = $http.post(
                $global.API_URL + 'api/users/user/retrieve/',
                {
                    "key": 'xyz123',
                    "userId": loggedInUser
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                var data = response.data;
                userDetails = data.result;
                return userDetails;
            }

            function handleError(response) {
            }
        }


        /*function update() {
         $http.post($global.API_URL + 'api/users/user/save/', {
         token: "1234567",
         company_type: "RETAILER",
         name: "malinda",
         email: "malinda@gmail.com",
         current_password: "sdf",
         password: "sdfs"
         });
         }*/

        function saveUserSettings(data) {
            var loggedInUser = authService.getToken();
            data.userId = loggedInUser;

            return multipartForm.post($global.API_URL + 'api/users/user/save/', data);
        }

        function verification(password) {
            var loggedInUser = authService.getToken();

            var status = $http.post($global.API_URL + 'api/users/user/verification/', {
                password: password,
                user_id: loggedInUser
            });

            return status;
        }


    }


})();
/**
 * Created by ab on 11/2/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").controller('userController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'userService', '$window', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, userService, $window) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 20;

        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.addUser = addUser;
        $scope.editUser = editUser;
        $scope.viewUser = viewUser;
        $scope.users = {};
        $scope.selectUpObj={};
        $scope.searchData = searchData;
        $scope.refreshSearch = refreshSearch;

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 20;
        $scope.maxSize = 20;

        function searchData(keyword){
            $rootScope.spinnerTrax = true;
            userService.searchData({
                keyword:keyword,
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                $rootScope.spinnerTrax = false;
                if(response.data) {
                    $scope.users = response.data.data;
                    $scope.totalItems = response.data.count;
                }
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        userList();

        $scope.pageChanged = function () {
            userList();
        };

        function userList() {
            $rootScope.spinnerTrax = true;
            userService.getUserList({
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                $rootScope.spinnerTrax = false;
                $scope.users = response.data.data;
                $scope.totalItems = response.data.count;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        function addUser(){
            addUserModel()
        }

        function editUser(userId, editList) {
            $scope.selectUpObj = editList;
            if(userId) {
                addUserModel(userId);
            }
            else {
                toastr.error('User ID!', 'Missing row id...');
            }
        }

        function viewUser(userId){
            if(userId) {
                viewUserModel(userId);
            }
            else {
                toastr.error('User ID!', 'Missing row id...');
            }
        }

        function addUserModel(userId) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/user-management/newUserModal.html',
                controller: 'addUserController',
                size: 'md',
                resolve: {
                    userId: function () {
                        return userId;
                    }
                }
            });

            modalInstance.result.then(function success(result) {
                if(result.newUser) {
                    $scope.users.unshift(result.newUser.data);
                }
                else if(result.updateUser){
                    var indexA = $scope.users.indexOf($scope.selectUpObj);
                    $scope.users[indexA] = result.updateUser.data;
                }
            });
        }

        function viewUserModel(userId) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/admin-settings/user-management/viewUserModal.html',
                controller: 'viewUserController',
                size: 'md',
                resolve: {
                    userId: function () {
                        return userId;
                    }
                }
            });
        }

        function refreshSearch() {
            userList();
        }

    } // end main controller


    /**
     * CREATE AND EDIT MODAL
     *
     */

    angular.module('module.adminSettings').controller('addUserController',
        ['$scope','$modalInstance','userService', 'toastr', '$window', '$rootScope', 'userId','modalService', addUserController]);

    function addUserController($scope, $modalInstance, userService, toastr, $window, $rootScope, userId,modalService) {

        $scope.createUser = createUser;
        $scope.user = {};
        $scope.user.recordStatus = true;
        $scope.pageStatus = userId ? 'EDIT' : 'CREATE';
        $scope.isEmailExists = '';
        $scope.buttonLabel = 'Create';


        if($scope.pageStatus === "EDIT") {
            $scope.buttonLabel = 'Update';
            userService.viewUserData(userId).then(function success(response) {
                $scope.user = response.data.data;
            });
        }

        /*After submit click*/
        function createUser() {
            if ($scope.pageStatus === "EDIT") {
                userService.updateUserData($scope.user).then(function success(response) {
                    var res = {};
                    if(response.data) {
                        if(response.data.state == 'error') {
                            $scope.isEmailExists = response.data.type;
                        } else {
                            res.updateUser = response.data;
                            toastr.success( 'User has been updated successfully.');
                            $modalInstance.close(res);
                        }
                    } else {
                        toastr.error('ERROR!', ' user has been updated failed.');
                    }
                });
            }
            else {
                userService.createNewUser($scope.user).then(function success(response) {
                    var res = {};
                    if(response.data) {
                        if(response.data.state == 'error') {
                            $scope.isEmailExists = response.data.type;
                        } else {
                            res.newUser = response.data;
                            toastr.success( 'New user has been created successfully.');
                            $modalInstance.close(res);
                        }
                    } else {
                        toastr.error('ERROR!', 'New user has been created failed.');
                    }
                });
            }

        }


        // for close button
        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        userService.getUserRole($scope.user.company).then(function success(response) {
            $scope.roles = response.data.data;
        });


    }



    /**
     * VIEW MODAL
     */

    angular.module('module.adminSettings').controller('viewUserController',
        ['$scope','$modalInstance','userService', 'toastr', '$window', '$rootScope', 'userId', viewUserController]);

    function viewUserController($scope, $modalInstance, userService, toastr, $window, $rootScope, userId) {

        $scope.user = {};

        userService.viewUserData(userId).then(function success(response) {
            $scope.user = response.data.data;
        });

        // for close button
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };

    }

})();
/**
 * Created by ab on 11/2/15.
 */

(function () {
    'use strict';

    angular.module("module.adminSettings").service('userService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {

        return {
            createNewUser: createNewUser,
            getUserRole: getUserRole,
            getUserList: getUserList,
            viewUserData: viewUserData,
            updateUserData:updateUserData,
            searchData:searchData
        };

        function createNewUser(userData) {
            var createDetails = $http.post($global.API_URL + 'api/users/user/create/',userData);
            return createDetails;
        }

        function getUserRole() {
            var compDetails = $http.get($global.API_URL + 'api/users/user/role/');
            return compDetails;
        }

        function getUserList(req) {
            var compDetails = $http.post($global.API_URL + 'api/users/user/list/', {
                limit: req.limit,
                page: req.page
            });
            return compDetails;
        }

        function viewUserData(id) {
            var data = $http.post($global.API_URL + 'api/users/user/view/',id);
            return data;
        }

        function updateUserData(user) {
            var data = $http.post($global.API_URL + 'api/users/user/update/',user);
            return data;
        }

        function searchData(filter) {
            var data = $http.post($global.API_URL + 'api/users/user/search/',{
                keyword:filter.keyword,
                limit: filter.limit,
                page: filter.page
            });
            return data;
        }

    }
})();
/**
 * Created by ab on 10/19/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('compCasesViewController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'compensationCasesService', 'remindersService', 'modalService', '$window', '$stateParams', '$location', 'authService', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, compensationCasesService, remindersService, modalService, $window, $stateParams, $location, authService) {

        $scope.attachments = {};
        $scope.compNotes = {};
        $scope.caseId = $stateParams.id;
        $scope.getall = getAll;
        $scope.addAttachment = addAttachment;
        $scope.addNotes = addNotes;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;
        $scope.editCompCase = editCompCase;
        $scope.featureNotConnected = featureNotConnected;
        $scope.hideViewAs = true;


        function editCompCase(compID) {
            if (compID) {
                formeditOpenModal(compID)
            } else {
                toastr.error('Compensation ID!', 'Missing row id...');
            }
        }


        function featureNotConnected() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        }


        function formeditOpenModal(compID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/compensation-cases/newCompCaseModal.html',
                controller: 'formCompModalController',
                size: 'lg',
                resolve: {
                    compID: function () {
                        return compID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                $scope.view[0].status = result.editCase.updateList.case_status;
                $scope.view[0].priority = result.editCase.updateList.case_priority;
                $scope.view[0].due_date = result.editCase.updateList.case_due_date;
                $scope.view[0].assigned_to = result.editCase.updateList.case_assigned_to;
            });

 /*           modalInstance.result.then(function (result) {
                openCases('open');
            });*/
        }

        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }


        if ($scope.caseId === '') {
            $location.path("/customer-service/compensation-cases");
        }
        else {
            getAll()
        }

        function getAll() {

            compensationCasesService.getCaseById({
                caseId: $scope.caseId,
                userId: $scope.user.userId,
                type: 2,
            }).then(function (response) {


                $scope.view = response.data.data.view;
                $scope.orders = response.data.data.orders;
                $scope.customer = response.data.data.customer;
                $scope.attachments = response.data.data.attachments;
                $scope.compNotes = response.data.data.notes;
                $scope.listOpen = response.data.data.reminders.open;
                $scope.listCompleted = response.data.data.reminders.completed;

                var phone = $scope.customer[0].phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");

                if (response.data.data.view.length === 0) {
                    $location.path("/customer-service/compensation-cases");
                }
               compensationCasesService.getCompensationOrder($scope.view[0].orderNo).
                 then(function success(response) {
                 $scope.orderItems = response.data.order_items;

                 });

            }, function (error) {
            });
        }

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };


        /*listAttachment();

        function listAttachment() {
            var caseId = $stateParams.id;
            compensationCasesService.getAttachmentList(caseId).then(function success(response) {
                $scope.attachments = response.data.attachments;
            });
        }*/

        function addAttachment() {
            formAttachModal();
        }

        function formAttachModal(attachId) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/compensation-cases/NewAttachmentModal.html',
                controller: 'compAttachController',
                size: 'md',
                resolve: {
                    attachId: function () {
                        return attachId;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.attachm) {
                    $scope.attachments.unshift(result.attachm.data.com_attachment);
                }
            });
        }


        /*listNotes();

        function listNotes() {
            var caseId = $stateParams.id;
            compensationCasesService.geNotesList(caseId).then(function success(response) {
                $scope.compNotes = response.data.notes;
            });
        }*/

        function addNotes() {
            formNoteModal();
        }

        function formNoteModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/compensation-cases/NewNotesModal.html',
                controller: 'compNoteController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newNote) {
                    $scope.compNotes.unshift(result.newNote.data.notes);
                    //  console.log(result.newNote.data.notes);
                }
            });
        }


        // List reminders
        $scope.listOpen = [];
        $scope.listCompleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsCompleted = setAsCompleted;
        $scope.deleteReminder = deleteReminder;

        /*remindersService.listReminders({
            parentId: $scope.caseId,
            userId: $scope.user.userId,
            type: 2,
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listCompleted = response.completed;
        }, function error(error) {

        });*/

        function addReminder() {
            formOpenModal()
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.caseId;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 2;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listCompleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listCompleted = $scope.listCompleted;
                    listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listCompleted = listCompleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listCompleted.push(angular.copy(result.data));
                        listCompleted = sortByDate(listCompleted);
                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsCompleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsCompleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listCompleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: response.id}));
                        listCompleted.push(angular.copy(response));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listCompleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: reminderId}));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                })
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }

        $scope.featureNotConnected = function () {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };

        // view product specific page
        //prodId,type
        $scope.showDetail = function (prodId,type) {

            if(type=='UNIT' || type == 'CONFIGURATION'){

                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };
    } //end main controller


    /**
     * CREATE AND EDIT ATTACHMENT MODAL
     * */
    angular.module('module.customerService').controller('compAttachController',
        ['$scope', '$modalInstance', 'attachId', 'compensationCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope','modalService', compAttachController]);

    function compAttachController($scope, $modalInstance, attachId, compensationCasesService, toastr, $window, $stateParams, authService,$rootScope,modalService) {

        $scope.compAttach = {};
        $scope.attachmentSave = attachmentSave;
        $scope.compAttach.custId = $stateParams.id;

        function attachmentSave(compAttach) {
            compensationCasesService.saveAttach(compAttach).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.attachm = response;
                    $modalInstance.close(res);
                    toastr.success('Attachment has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };




    }


    /**
     * CREATE AND EDIT Notes MODAL
     * */
    angular.module('module.customerService').controller('compNoteController',
        ['modalService','$scope', '$modalInstance', 'compensationCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', compNoteController]);

    function compNoteController(modalService,$scope, $modalInstance, compensationCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.compNotes = {};
        $scope.saveCompNotes = saveCompNotes;
        $scope.compNotes.compId = $stateParams.id;
        $scope.compNotes.createdBy = authService.getToken();

        function saveCompNotes(compNotes) {
            compensationCasesService.saveNotes(compNotes).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.newNote = response;
                    $modalInstance.close(res);
                    toastr.success('Note has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


    }


})
();
/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('compensationCasesController', [
        '$scope', '$http', '$location', 'toastr', '$state', '$global', '$modal', '$rootScope', 'compensationCasesService', '$window', controller
    ]);

    function controller($scope, $http, $location, toastr, $state, $global, $modal, $rootScope, compensationCasesService, $window) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 10;
        // Pagination for search
        $scope.currentPageSearch = 0;
        $scope.pageSizeSearch = 10;

        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;
        $scope.compensationSearch = {
            "highPriority": null,
            "createDateFrom": null,
            "createDateTo": null,
            "dueDateFrom": null,
            "dueDateTo": null,
            "assignee": null,
            "caseId": null,
            "keyWords": null
        };

        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };
        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'case_id', fieldName: 'ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'case_title', fieldName: 'Title', fieldSearch: 'searchDescription', checked: true},
            {id: 3, field: 'case_status', fieldName: 'Status', fieldSearch: 'searchSku', checked: true},
            /*{id: 4, field: 'case_category', fieldName: 'Escalation', fieldSearch: 'searchDescription', checked: true},*/
            {id: 4, field: 'case_created_date', fieldName: 'Created Date', fieldSearch: 'searchCity', checked: true},
            {id: 5, field: 'case_due_date', fieldName: 'Due Date', fieldSearch: 'searchCity', checked: true},
            {id: 6, field: 'case_assigned_to', fieldName: 'Assign To', fieldSearch: 'searchAddress2', checked: true},
            {id: 7, field: 'case_customer_name', fieldName: 'Customer Name', fieldSearch: 'searchAddress1', checked: true},
            {id: 8, field: 'case_customer_id', fieldName: 'Customer ID', fieldSearch: 'searchAddress1', checked: true},
            {id: 9, field: 'case_po_id', fieldName: 'PO ID', fieldSearch: 'searchItem', checked: true},
            {id: 10, field: 'case_OrderId', fieldName: 'Sales Order ID', fieldSearch: 'searchItem', checked: true},
            {id: 11, field: 'case_incident_count', fieldName: 'No of Incidents', fieldSearch: 'searchItem', checked: true},
            {id: 12, field: 'case_num_days', fieldName: 'No of Days Open', fieldSearch: 'searchItem', checked: true},
            {id: 13, field: 'case_created_by', fieldName: 'Created By', fieldSearch: 'SearchCusFirstName', checked: true}
        ];
        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {//comp
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;
        $scope.viewCase= function(caseId){
            $location.path('/customer-service/compensation-cases/view/' + caseId );

        }

        $scope.addCompCase = addCompCase;
        $scope.editCompCase = editCompCase;
        $scope.searchCompensation = searchCompensation;
        $scope.compensation = {};
        $scope.compensationStatus = "open";
        $scope.search = {};
        $scope.search.assignee = {};
        $scope.selectUpObj = {};
        $scope.allUsers = {};
        $scope.assignee = {"data": [{"name": "John brown"}, {"name": "John Red"}, {"name": "John Green"}]};
        $scope.openCases = openCases;
        $scope.resolve = resolve;
        $scope.cancel = cancel;
        //$scope.getUsers=getUsers(); TODO REFACTOR
        $scope.clearList = clearList;

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;

        if ($rootScope.triggeredGlobalSearch == true) {
            $scope.compensationSearch.caseId = $rootScope.globalSearch.keyword;
            searchCompensation();
        } else {
            openCases('open');
        }

        $scope.$on("globalSearchByCaseIdEvent", function (event, args) {
            $scope.compensationSearch.caseId = $rootScope.globalSearch.keyword;
            searchCompensation();
        });

        $scope.pageChanged = function () {
            searchCompensation();
        };

        $scope.formatDate = function (date) {
            //componsation
            var date = date.split("-").join("/");
            var dateOut = new Date(date);
            return dateOut;
        };

        function openCases(type) {
            $rootScope.spinnerTrax = true;
            $scope.statusActiveOpen = 'active';
            $scope.compensationStatus = type;
            var id = '';
            var ordID = '';
            compensationCasesService.getCompensationList(type, id, ordID, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $rootScope.spinnerTrax = false;
                var respData = response.data;
                $scope.compensation = respData.cases;
                $scope.totalItems = respData.count;
                $scope.allUsers = respData.users; //TODO impl service

            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        //change status of the cases when click on list status dropdown
        $scope.changeStatus = function (type, id) {

            compensationCasesService.updateCompensationStatus(type, id).then(function (response) {
                $scope.compensationStatus = type;

                if (type == 'open') {
                    $scope.statusActiveOpen = 'active';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'resolve') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = 'active';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'cancel') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = 'active';
                }


            }, function (error) {
            });
        }


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };

        function addCompCase() {
            formOpenModal()
        }

        function editCompCase(compID, editList) {
            $scope.selectUpObj = editList;
            if (compID) {
                formOpenModal(compID)
            } else {
                toastr.error('Compensation ID!', 'Missing row id...');
            }
        }


        function formOpenModal(compID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/compensation-cases/newCompCaseModal.html',
                controller: 'formCompModalController',
                size: 'lg',
                resolve: {
                    compID: function () {

                        return compID;
                    }
                }
            });

            modalInstance.result.then(function (result) {


                if (result.newCase) {//comp
                    if ($scope.compensation.length > 0) {
                        $scope.compensation.unshift(result.newCase.caseList);
                    } else {
                        $scope.compensation = [];
                        $scope.compensation.push(result.newCase.caseList);
                    }

                    $scope.totalItems = parseInt($scope.totalItems) + 1;
                }
                /* if(result.editCase) {
                 var indexA = $scope.compensation.indexOf($scope.selectUpObj);
                 $scope.compensation[indexA]=result.editCase.updateList;
                 }*/

                if (result.editCase) {



                    var indexA = $scope.compensation.indexOf($scope.selectUpObj);

                    if ($scope.compensationStatus != result.editCase.updateList.case_status) {
                        var id = result.editCase.updateList.case_id;
                        var victim = _.findWhere($scope.compensation, {case_id: id});
                        $scope.compensation = _.without($scope.compensation, victim);

                        if (parseInt($scope.totalItems) > 0) {
                            $scope.totalItems = parseInt($scope.totalItems) - 1;
                        }


                    } else {
                        $scope.compensation[indexA] = result.editCase.updateList;
                    }

                }
            });
        }


        // search compensation
        function searchCompensation() {
            $rootScope.spinnerTrax = true;
            compensationCasesService.searchCompensation($scope.compensationSearch, $scope.compensationStatus, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.compensation = response.data.data;
                $scope.totalItems = response.data.count;
                if ($scope.compensation.length == 1 && $rootScope.triggeredGlobalSearch == true) {
                    $location.path('/customer-service/compensation-cases/view/' + $scope.compensation[0].case_id);
                }
                $rootScope.triggeredGlobalSearch = false;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }


        //TODO refactoring remove
        function getUsers() {
            compensationCasesService.getUsers().then(function success(response) {
                //console.log(response.data);
                $scope.allUsers = response.data;
            }, function error(error) {
                //toastr.error('ERROR!', error);
            });
        }

        // clear search form inputs
        function clearList() {
            $scope.compensationSearch = "";
            openCases('open');
        }


    }//end of main controller


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.customerService').controller('formCompModalController',
        ['$scope', '$modalInstance', 'authService', 'compID', 'compensationCasesService', 'toastr', '$window', '$rootScope', '$location', '$timeout', 'modalService', formCompModalController]);
    function formCompModalController($scope, $modalInstance, authService, compID, compensationCasesService, toastr, $window, $rootScope, $location, $timeout, modalService) {

        $scope.caseSearch_info = false;
        $timeout(function () {
            $scope.caseSearch_info = true;
        }, 5000);

        $scope.check_approve = check_approve;
        $scope.caseCategoryArr = [{id:'RESOLUTION', value: 'Resolution'},{id:'ESCALATION',value:'Escalation'}];

        function check_approve(status, approve) {
            if (status.id == 'resolved' && approve == false) {
                alert('You cannot Resolve this case !!!');
            }
        }

        $scope.pageStatus = compID ? 'EDIT' : 'CREATE';
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.saveFormComp = saveCompensation;
        $scope.compFrom = {};
        $scope.searchDataMaster = searchDataMaster;
        $scope.saveButtonDisabled = true;

        if ($scope.pageStatus == 'EDIT') {
            // read only the fields
            $scope.ro = true;
        }

        $scope.showDetail = function (prodId, type) {

            if (type == 'UNIT' || type == 'CONFIGURATION') {
                $location.path('/products-catalogue/products/view/' + prodId + '/1');
            } else {
                $location.path('/products-catalogue/products/view/' + prodId + '/2');
            }
        };


        $scope.createOptGroups = function (item) {
            return item.name;
        };


        function searchDataMaster() {
            /**
             * search validation
             */
            var search_val = $scope.compFrom;
            if (search_val.searchValue == undefined || search_val.catSearch == undefined) {
                toastr.error('Please search a order correctly.', 'ERROR!');
                $scope.exit();
            }

            $scope.isEmptyReasults = false;
            $scope.isOrderList = false;
            $scope.haveReturnOrders = false;

            compensationCasesService.getCompensationOrder(search_val)
                .then(function success(response) {

                    $scope.haveReturnOrders = true;

                    if (response.data.status == 'list') {
                        $scope.isOrderList = true;
                        $scope.orderList = response.data.orderlist;
                        $scope.haveReturnOrders = false;
                        $scope.saveButtonDisabled = false;

                        $scope.getListOrder = function (order_id) {
                            compensationCasesService.getCompensationOrder(order_id).
                            then(function success(response) {

                                var itemList = response.data.productIdArr;
                                //$scope.comp = {orderItemSelect:itemList};
                                $scope.comp.orderItemSelect = itemList;
                                $scope.orderData = response.data.order_data;
                                $scope.shippingAdd = response.data.shipping_add;
                                $scope.orderItems = response.data.order_items;
                                $scope.isOrderList = false;
                                $scope.haveReturnOrders = true;
                                $scope.haveSearchSuccess = true;
                                $scope.saveButtonDisabled = false;
                                $scope.getAssignList($scope.orderData.order_id);

                            });
                        }
                    }

                    else if (response.data.status == null) {
                        $scope.isEmptyReasults = true;
                        $scope.isOrderList = false;
                        $scope.haveReturnOrders = false;
                    }
                    var itemList = response.data.productIdArr;
                    //$scope.comp = {orderItemSelect:itemList};
                    $scope.comp.orderItemSelect = itemList;
                    $scope.orderData = response.data.order_data;
                    $scope.shippingAdd = response.data.shipping_add;
                    $scope.orderItems = response.data.order_items;
                    $scope.saveButtonDisabled = false;

                    $scope.getAssignList($scope.orderData.order_id);

                }, function error(error) {
                    toastr.error('ERROR!', 'Compensation create failed.');
                });


        }

        /**
         * get the assign user list
         */
        $scope.getAssignList = function (order_id) {
            compensationCasesService.getAssignList(order_id).then(
                function success(response) {

                    $scope.logUser = authService.getUser();
                    $scope.logUserId = $scope.logUser.userId;
                    $scope.assignArr = response.data.assignArr;
                    $scope.comp.assignee = _.findWhere($scope.assignArr, {id: $scope.logUserId});

                    //$scope.comp.assignee={"id":response.data.assignArr[0].id,"name":response.data.assignArr[0].name};
                    $scope.visibilityAr = [{"id": "PLATFORM", "name": "PLATFORM"}, {
                        "id": "VENDOR",
                        "name": "VENDOR"
                    }, {"id": "RETAILER", "name": "RETAILER"}]
                    $scope.comp.visible = {"id": "PLATFORM", "name": "PLATFORM"};
                }, function error() {
                    toastr.error('ERROR!', 'Assignee list retrieval failed.');
                });
        }

        /**
         *
         * get the status dropdown
         */
        compensationCasesService.getStatusList().then(
            function success(response) {

                $scope.statusArr = response.data.statusArr;
                //console.log(statusArr.toSource());

            }, function error() {
            });


        $scope.inEditMode = true;
        $scope.comp = {};
        /*$scope.statusArr = [{id:"open",value:"Open"},{id:"resolve",value:"Resolve"},{id:"cancel",value:"Cancel"}];
         $scope.comp.case_status = [{id:"open",value:"Open"},{id:"resolve",value:"Resolve"},{id:"cancel",value:"Cancel"}];*/
        /**
         * Load data when retailer id is available (Edit mode)
         * */

        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Compensation Case";
            $scope.buttonLabel = "Update";
        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Compensation Case";
            $scope.buttonLabel = "Create";
        }

        if ($scope.pageStatus === "EDIT") {

            compensationCasesService.getCompensationData(compID)
                .then(function (response) {
                    $scope.comp = response.data.details;
                    $scope.comp.duedate = new Date(response.data.details.duedate);
                    $scope.orderData = response.data.order;
                    $scope.orderItems = response.data.orderItems;

                    $scope.statusArr = response.data.statusArr;
                    $scope.assignArr = response.data.assignArr;

                    $scope.comp.assignee = _.findWhere($scope.assignArr, {id: $scope.comp.assignee.id});
                    $scope.comp.case_status = _.findWhere($scope.statusArr, {id: $scope.comp.case_status});
                    $scope.comp.caseCategory = _.findWhere($scope.caseCategoryArr, {id: response.data.details.case_category});
                    //$scope.comp.case_status={"id":response.data.statusArr[0].id,"value":response.data.statusArr[0].value};


                    //$scope.comp.assignee={"id":response.data.assignArr[0].id,"displayName":response.data.assignArr[0].displayName};
                    $scope.visibilityAr = [{"id": "PLATFORM", "name": "PLATFORM"}, {
                        "id": "VENDOR",
                        "name": "VENDOR"
                    }, {"id": "RETAILER", "name": "RETAILER"}]
                    $scope.comp.visible = {"id": "PLATFORM", "name": "PLATFORM"};

                    $scope.haveReturnOrders = true;
                    $scope.inEditMode = false;
                });
        }


        /**
         * save function
         */
        function saveCompensation(formdata, orderId, shippingAdd) {
            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    compensationCasesService.editCompensation(formdata).then(function success(response) {
                            var res = {};
                            if (response.data.updateList) {
                                res.editCase = response.data;
                                toastr.success('Compensation has been updated successfully.');
                                $modalInstance.close(res);

                                $location.path('/customer-service/compensation-cases');
                            }
                            else {
                                toastr.error('ERROR!', 'Compensation has been updated failed.');
                            }
                        }, function error(error) {

                        }
                    );
                }

                else {
                    compensationCasesService.addCompensationCase(formdata, orderId, shippingAdd)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.caseList) {
                                res.newCase = response.data;
                                toastr.success('Compensation has been Create successfully.');
                                $modalInstance.close(res);
                            }
                            else {
                                toastr.error('ERROR!', 'Compensation has been Create failed.');
                            }

                        }, function error() {
                            toastr.error('ERROR!', 'Compensation has been Create failed.');
                        });
                }
            })

        }


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };


        $scope.cancel = function () {

            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }

    angular.module("module.customerService").filter('startFrom', function () {
        return function (input, start) {
            if (input) {
                start = +start; //parse to int
                return input.slice(start);
            }

        }
    });


})();



/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").service('compensationCasesService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {
        return {
            getCompensationList: getCompensationList,
            getSingleDataFromService: getSingleDataFromService,
            getMultipleDataFromService: getMultipleDataFromService,
            getCompensationById: getCompensationById,
            updateCompensationStatus: updateCompensationStatus,
            getCompensationOrder: getCompensationOrder,
            getAssignList: getAssignList,
            addCompensationCase: addCompensationCase,
            getCompensationData: getCompensationData,
            editCompensation: editCompensation,
            searchCompensation: searchCompensation,
            getUsers: getUsers,
            getCaseById: getCaseById,
            saveAttach: saveAttach,
            getAttachmentList: getAttachmentList,
            saveNotes: saveNotes,
            geNotesList: geNotesList,
            getCompensationListTicket: getCompensationListTicket,
            getStatusList: getStatusList,
        };

        function getCompensationList(type, id, ordID, limit, page) {

            var allData = $http.post($global.API_URL + 'api/crm/compensation/list/', {
                compensation_type: type,
                customer_id: id,
                order_id: ordID,
                limit: limit,
                page: page

            });
            return allData;
        }

        function getSingleDataFromService(id, value) {

            var compensationSearchData = $http.post($global.API_URL + 'api/crm/compensation/getSingleData/', {
                cat_id: id,
                search_value: value,
            });

            return compensationSearchData;
        }

        function getMultipleDataFromService(id, value) {

            var compensationSearchData = $http.post($global.API_URL + 'api/crm/compensation/getMultipleData/', {
                cat_id: id,
                search_value: value,
            });

            return compensationSearchData;
        }

        function getCompensationById(id) {

            var compensationViewData = $http.post($global.API_URL + 'api/crm/compensation/view/', {
                compID: id,
            });

            return compensationViewData;
        }

        function updateCompensationStatus(type, id) {
            var Status = $http.post($global.API_URL + 'api/crm/compensation/statusUpdate/', {
                status: type,
                comp_id: id
            });

            return Status;
        }

        function searchCompensation(compensationSearchCriteria, compensationStatus ,limit , page) {

            if(compensationSearchCriteria.createDateFrom != null) { compensationSearchCriteria.createDateFrom = convertDate(compensationSearchCriteria.createDateFrom);}
            if(compensationSearchCriteria.createDateTo != null) { compensationSearchCriteria.createDateTo   = convertDate(compensationSearchCriteria.createDateTo);}
            if(compensationSearchCriteria.dueDateFrom != null) { compensationSearchCriteria.dueDateFrom = convertDate(compensationSearchCriteria.dueDateFrom);}
            if(compensationSearchCriteria.dueDateTo != null) { compensationSearchCriteria.dueDateTo   = convertDate(compensationSearchCriteria.dueDateTo); }

            var compensationSearchData = $http.post($global.API_URL + 'api/crm/compensation/searchCompensation/', {
                data    : compensationSearchCriteria,
                status  : compensationStatus,
                limit   : limit,
                page    : page
            });
            return compensationSearchData;
        }


        function getCompensationOrder(orderData) {
            var returnData = $http.post(
                $global.API_URL + 'api/crm/order/search/', {
                    orderData:orderData,
                    type:'COMPENSATION'}, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
            return returnData;
        }

        /**
         * get the case assignee list (reg users list)
         */
        function getAssignList(order_id) {
            var params = {};
            if (order_id != undefined) {
                params = {order_id: order_id};
            }

            var assignee = $http.post(
                $global.API_URL + 'api/crm/compensation/assignee/', params);
            return assignee;
        }

        function getStatusList() {
            var caseStatus = $http.post(
                $global.API_URL + 'api/crm/case/status/');
            return caseStatus;
        }

        function addCompensationCase(formdata, orderId, shippingAdd) {

            var dateStrToSend = formdata.duedate.getFullYear() + '-' + (formdata.duedate.getMonth() + 1) + '-' + formdata.duedate.getDate();
            formdata.duedate = dateStrToSend;
            var created_by = authService.getUser();
            var saveData = $http.post(
                $global.API_URL + 'api/crm/compensation/create/', {
                    caseData: formdata,
                    orderId: orderId,
                    address: shippingAdd,
                    created: created_by.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
            return saveData;
        }

        function getCompensationData(id) {
            var getData = $http.post($global.API_URL + 'api/crm/compensation/details/', id);
            return getData;
        }

        function editCompensation(formdata) {
            var dateStrToSend = formdata.duedate.getFullYear() + '-' + (formdata.duedate.getMonth() + 1) + '-' + formdata.duedate.getDate();
            formdata.duedate = dateStrToSend;
            var updateBy = authService.getUser();
            var editData = $http.post(
                $global.API_URL + 'api/crm/compensation/edit/', {
                    caseData: formdata,
                    updateBy: updateBy.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
            return editData;
        }

        //search users
        function getUsers() {

            var replacementSearchData = $http.post($global.API_URL + 'api/crm/replacement/getUserDetails/', {});

            return replacementSearchData;
        }

        //    View Case -Abdulla
        function getCaseById(data) {
            var otherSearchData = $http.post($global.API_URL + 'api/crm/compensation/case/', {
                caseId: data.caseId,
                userId: data.userId,
                type: data.type,
            });
            return otherSearchData;
        }

        function getAttachmentList(id) {
            var attachList = $http.post($global.API_URL + 'api/crm/compensation/attachment/list/', id);
            return attachList;
        }

        function geNotesList(id) {
            var notesList = $http.post($global.API_URL + 'api/crm/compensation/notes/list/', id);
            return notesList;
        }

        function saveAttach(attachment) {
            return multipartForm.post($global.API_URL + 'api/crm/compensation/attachment/', attachment);
        }

        function saveNotes(notes) {
            return multipartForm.post($global.API_URL + 'api/crm/compensation/notes/', notes);
        }

        function getCompensationListTicket(days) {
            var allData = $http.post($global.API_URL + 'api/crm/compensation/old/', {
                days: days,
            });
            return allData;
        }

        function convertDate(str) {
            var date = new Date(str),
                mnth = ("0" + (date.getMonth()+1)).slice(-2),
                day  = ("0" + date.getDate()).slice(-2);
            return [ date.getFullYear(), mnth, day ].join("-");
        }


    }


})();



/**
 * Created by ab on 10/19/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('cancelCasesViewController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'cancellationCasesService', 'remindersService', 'modalService', 'authService', '$window', '$stateParams', '$location', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, cancellationCasesService, remindersService, modalService, authService, $window, $stateParams, $location) {

        $scope.cancelAttachments = {};
        $scope.cancelNotes = {};
        $scope.caseId = $stateParams.id;
        $scope.getall = getall;
        $scope.addCancelAttachment = addCancelAttachment;
        $scope.addCancelNotes = addCancelNotes;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;
        $scope.editCanCase = editCanCase;
        $scope.hideViewAs = true;

        function editCanCase(compID) {
            if (compID) {
                formeditOpenModal(compID)
            } else {
                toastr.error('Cancellation ID!', 'Missing row id...');
            }
        }

        function formeditOpenModal(compID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/cancellation-cases/newCancelModal.html',
                controller: 'formCanModalController',
                size: 'lg',
                resolve: {
                    compID: function () {
                        return compID;
                    }
                }
            });
/*
            modalInstance.result.then(function (result) {
                openCases("compopen");
            });*/

            modalInstance.result.then(function (result) {
                $scope.view[0].status = result.editCase.updateList.case_status;
                $scope.view[0].priority = result.editCase.updateList.case_priority;
                $scope.view[0].due_date = result.editCase.updateList.case_due_date;
                $scope.view[0].assigned_to = result.editCase.updateList.case_assigned_to;
            });
        }

        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }

        if ($scope.caseId === '') {
            $location.path("/customer-service/cancellation-cases");
        }
        else {
            getall()
        }

        function getall() {
            cancellationCasesService.getCaseById($scope.caseId).then(function (response) {
                $scope.view = response.data.data.view;
                $scope.orders = response.data.data.orders;
                $scope.customer = response.data.data.customer;

                var phone = $scope.customer[0].phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");

                if (response.data.data.view.length === 0) {
                    $location.path("customer-service/cancellation-cases/");
                }

                cancellationCasesService.getCancelData($scope.caseId).
                    then(function success(response) {

                        $scope.orderItems = response.data.orderItems;

                    });

            }, function (error) {
            });
        };

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };


        /*notes and attachments*/

        listAttachment();

        function listAttachment() {
            var caseId = $stateParams.id;
            cancellationCasesService.getAttachmentList(caseId).then(function success(response) {
                $scope.cancelAttachments = response.data.attachments;
            });
        }

        function addCancelAttachment() {
            formAttachModal();
        }

        function formAttachModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/cancellation-cases/NewAttachmentModal.html',
                controller: 'cancelAttachController',
                size: 'md',
                resolve: {}
            });

            modalInstance.result.then(function (result) {
                if (result.newAtt) {
                    $scope.cancelAttachments.unshift(result.newAtt.data.newAttachments);
                }
            });
        }

        listNotes();

        function listNotes() {
            var caseId = $stateParams.id;
            cancellationCasesService.getNotesList(caseId).then(function success(response) {
                $scope.cancelNotes = response.data.notes;
            });
        }

        function addCancelNotes() {
            formNoteModal();
        }

        function formNoteModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/cancellation-cases/NewNotesModal.html',
                controller: 'cancelNoteController',
                size: 'md',
                resolve: {}
            });

            modalInstance.result.then(function (result) {
                if (result.oneNote) {
                    $scope.cancelNotes.unshift(result.oneNote.data.newNotes);
                }
            });
        }

        // List reminders
        $scope.listOpen = [];
        $scope.listCompleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsCompleted = setAsCompleted;
        $scope.deleteReminder = deleteReminder;

        remindersService.listReminders({
            parentId: $scope.caseId,
            userId: $scope.user.userId,
            type: 5,
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listCompleted = response.completed;
        }, function error(error) {

        });

        function addReminder() {
            formOpenModal()
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.caseId;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 5;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listCompleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listCompleted = $scope.listCompleted;
                    listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listCompleted = listCompleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listCompleted.push(angular.copy(result.data));
                        listCompleted = sortByDate(listCompleted);
                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsCompleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsCompleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listCompleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: response.id}));
                        listCompleted.push(angular.copy(response));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listCompleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: reminderId}));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                })
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };

        // view product specific page
        $scope.showDetail = function (prodId,type) {

            if(type=='UNIT' || type == 'CONFIGURATION'){

                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };
    }// end main controller

    angular.module('module.customerService').controller('cancelAttachController',
        ['$scope', '$modalInstance', 'cancellationCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', cancelAttachController]);

    function cancelAttachController($scope, $modalInstance, cancellationCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.cancelAttach = {};
        $scope.cancelAttachmentSave = cancelAttachmentSave;
        $scope.cancelAttach.compId = $stateParams.id;
        $scope.cancelAttach.createdBy = authService.getToken();

        function cancelAttachmentSave(cancelAttach) {
            cancellationCasesService.saveAttach(cancelAttach).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.newAtt = response;
                    $modalInstance.close(res);
                    toastr.success('Attachment has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            if ($window.confirm("Do you want to close the window?")) {
                $modalInstance.dismiss('cancel');
            }
            else {
            }
        };


    }

    angular.module('module.customerService').controller('cancelNoteController',
        ['modalService','$scope', '$modalInstance', 'cancellationCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', cancelNoteController]);

    function cancelNoteController(modalService,$scope, $modalInstance, cancellationCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.cancelNotes = {};
        $scope.saveCancelNotes = saveCancelNotes;
        $scope.cancelNotes.compId = $stateParams.id;
        $scope.cancelNotes.createdBy = authService.getToken();

        function saveCancelNotes(cancelNotes) {
            cancellationCasesService.saveNotes(cancelNotes).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.oneNote = response;
                    $modalInstance.close(res);
                    toastr.success('Notes has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


})();
/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('cancellationCasesController', [
        '$location','$scope', '$http', 'cancellationCasesService', 'authService', 'toastr', '$state', '$modal', '$rootScope', controller
    ]);

    function controller($location,$scope, $http, cancellationCasesService, authService, toastr, $state, $modal, $rootScope) {

        //pagination
        $scope.totalItems = 60;
        $scope.currentPage = 1;
        $scope.maxSize = 5;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.addCanCase = addCanCase;
        $scope.editCanCase = editCanCase;
        $scope.openCases = openCases;
        $scope.pageSize = 5;
        $scope.searchCancel = searchCancel;
        $scope.cancellation = {};
        $scope.cancelStatus = "OPEN";
        //$scope.getUsers=getUsers(); TODO REMOVE
        $scope.clearList = clearList;
        $scope.cancelSearch = {};
        $scope.selectUpObj = {};

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;


        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };
        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'case_id', fieldName: 'Case ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'case_title', fieldName: 'Title', fieldSearch: 'searchDescription', checked: true},
            {id: 3, field: 'case_status', fieldName: 'Status', fieldSearch: 'searchSku', checked: true},
            /*{id: 4, field: 'case_category', fieldName: 'Escalation', fieldSearch: 'searchDescription', checked: true},*/
            {id: 4, field: 'case_created_date', fieldName: 'Created Date', fieldSearch: 'searchCity', checked: true},
            {id: 5, field: 'case_due_date', fieldName: 'Due Date', fieldSearch: 'searchCity', checked: true},
            {id: 6, field: 'case_assigned_to', fieldName: 'Assign To', fieldSearch: 'searchAddress2', checked: true},
            {id: 7, field: 'case_customer_name', fieldName: 'Customer Name', fieldSearch: 'searchAddress1', checked: true},
            {id: 8, field: 'case_customer_id', fieldName: 'Customer ID', fieldSearch: 'searchAddress1', checked: true},
            {id: 9, field: 'case_po_id', fieldName: 'PO ID', fieldSearch: 'searchItem', checked: true},
            {id: 10, field: 'case_OrderId', fieldName: 'Sales Order ID', fieldSearch: 'searchItem', checked: true},
            {id: 11, field: 'case_incident_count', fieldName: 'No of Incidents', fieldSearch: 'searchItem', checked: true},
            {id: 12, field: 'case_num_days', fieldName: 'No of Days Open', fieldSearch: 'searchItem', checked: true},
            /*{id: 3, field: 'case_priority', fieldName: 'Priority', fieldSearch: 'searchPo', checked: true},*/
            {
                id: 13,
                field: 'case_created_by',
                fieldName: 'Created By',
                fieldSearch: 'SearchCusFirstName',
                checked: true
            }/*,
             {
             id: 8,
             field: 'case_company',
             fieldName: 'Company',
             fieldSearch: '',
             checked: true
             },


             {id: 11, field: 'case_customer_email', fieldName: 'Email', fieldSearch: 'searchCity', checked: false},*/



        ];
        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;
        $scope.viewCase= function(caseId){
            $location.path('/customer-service/cancellation-cases/view/' + caseId );

        }

        //still not used
        var userType = authService.getUser();


        openCases("OPEN");

        $scope.pageChanged = function () {
            openCases('OPEN');
        };

        $scope.formatDate = function (date) {
            var date = date.split("-").join("/");
            var dateOut = new Date(date);
            return dateOut;
        };

        function openCases(type) {
            $rootScope.spinnerTrax = true;
            $scope.cancelStatus = type;
            $scope.statusActiveOpen = 'active';
            var ordId = '';
            cancellationCasesService.getCancellationList(type, ordId, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.cancellation = response.data.cases;
                $scope.totalItems = response.data.count;
                $scope.allUsers = response.data.users;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        //change status of the cases when click on list status dropdown
        $scope.changeStatus = function (type, id) {

            cancellationCasesService.updateCancellationStatus(type, id).then(function (response) {
                $scope.cancelStatus = type;

                if (type == 'open') {
                    $scope.statusActiveOpen = 'active';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'resolve') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = 'active';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'cancel') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = 'active';
                }


            }, function (error) {
            });
        }

        function addCanCase() {
            formOpenModal()
        }

        function editCanCase(compID, editList) {

            $scope.selectUpObj = editList;
            if (compID) {
                formOpenModal(compID)
            } else {
                toastr.error('Cancellation ID!', 'Missing row id...');
            }
        }

        function formOpenModal(compID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/cancellation-cases/newCancelModal.html',
                controller: 'formCanModalController',
                size: 'lg',
                resolve: {
                    compID: function () {
                        return compID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newCase) {
                    if ($scope.cancellation.length > 0) {
                        $scope.cancellation.unshift(result.newCase.newList);
                    } else {
                        $scope.cancellation = [];
                        $scope.cancellation.push(result.newCase.newList);
                    }
                    $scope.totalItems = parseInt($scope.totalItems) + 1;
                }
                if (result.editCase) {
                    var indexA = $scope.cancellation.indexOf($scope.selectUpObj);
                    $scope.cancellation[indexA] = result.editCase.updateList;

                    if ($scope.cancelStatus != result.editCase.updateList.case_status) {
                        var id = result.editCase.updateList.case_id;
                        var victim = _.findWhere($scope.cancellation, {case_id: id});
                        $scope.cancellation = _.without($scope.cancellation, victim);
                        if (parseInt($scope.totalItems) > 0) {
                            $scope.totalItems = parseInt($scope.totalItems) - 1;
                        }
                    } else {
                        $scope.cancellation[indexA] = result.editCase.updateList;
                    }
                }
            });
        }

        // search case cancellation
        function searchCancel() {
            //alert('yeah its working..!');
            cancellationCasesService.searchCancel($scope.cancelSearch, $scope.cancelStatus, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $scope.cancellation = response.data.data;
                $scope.totalItems = response.data.count;

            }, function (error) {

            });
        }

        function getUsers() {
            cancellationCasesService.getUsers().then(function success(response) {
                $scope.allUsers = response.data;
            }, function error(error) {
                // toastr.error('ERROR!', error);
            });
        }

        // clear search form inputs
        function clearList() {
            $scope.cancelSearch = "",
                openCases('open');
        }

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };


    } //end main controller

    angular.module('module.customerService').controller('formCanModalController',
        ['$scope', 'authService', '$modalInstance', 'compID', 'cancellationCasesService', 'toastr', '$window', '$location', '$rootScope', '$timeout', 'modalService', formCanModalController]);
    function formCanModalController($scope, authService, $modalInstance, compID, cancellationCasesService, toastr, $window, $location, $rootScope, $timeout, modalService) {

        $scope.caseSearch_info = false;
        $timeout(function () {
            $scope.caseSearch_info = true;
        }, 5000);
        $scope.inEditMode = true;
        $scope.pageStatus = compID ? 'EDIT' : 'CREATE';
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.searchDataMaster = searchDataMaster;
        $scope.canFrom = {};
        $scope.saveCancel = saveCancel;
        $scope.saveButtonDisabled = true;
        $scope.caseCategoryArr = [{id:'RESOLUTION', value: 'Resolution'},{id:'ESCALATION',value:'Escalation'}];

        if ($scope.pageStatus == 'EDIT') {
            // read only the fields
            $scope.ro = true;
        }

        $scope.createOptGroups = function (item) {
            return item.name;
        };

        function searchDataMaster() {

            var search_val = $scope.canFrom;
            if (search_val.searchValue == undefined || search_val.catSearch == undefined) {
                toastr.error('Please search a order correctly.', 'ERROR!');
                $scope.exit();
            }

            $scope.isEmptyReasults = false;
            $scope.isOrderList = false;
            $scope.haveReturnOrders = false;

            cancellationCasesService.getCancelOrder(search_val)
                .then(function success(response) {
                    $scope.haveReturnOrders = true;

                    if (response.data.status == 'list') {
                        $scope.isOrderList = true;
                        $scope.orderList = response.data.orderlist;
                        $scope.haveReturnOrders = false;
                        $scope.saveButtonDisabled = false;

                        $scope.getListOrder = function (order_id) {
                            cancellationCasesService.getCancelOrder(order_id).
                            then(function success(response) {
                                var itmx = response.data.productIdArr;
                                //$scope.cancelsAdd = {orderItemSelect:itmx};
                                $scope.cancelsAdd.orderItemSelect = itmx;
                                $scope.orderData = response.data.order_data;
                                $scope.shippingAdd = response.data.shipping_add;
                                $scope.orderItems = response.data.order_items;
                                $scope.isOrderList = false;
                                $scope.haveReturnOrders = true;
                                $scope.haveSearchSuccess = true;
                                $scope.saveButtonDisabled = false;

                                $scope.getAssignList($scope.orderData.order_id);
                            });
                        }
                    }

                    else if (response.data.status == null) {
                        $scope.isEmptyReasults = true;
                        $scope.isOrderList = false;
                        $scope.haveReturnOrders = false;
                    }
                    var itmx = response.data.productIdArr;
                    $scope.cancelsAdd.orderItemSelect = itmx;
                    $scope.orderData = response.data.order_data;
                    $scope.shippingAdd = response.data.shipping_add;
                    $scope.orderItems = response.data.order_items;
                    $scope.saveButtonDisabled = false;

                    $scope.getAssignList($scope.orderData.order_id);

                }, function error(error) {
                    toastr.error('ERROR!', 'Compensation has been Create failed.');
                });
        }

        /**
         * get the assign user list
         */
        $scope.getAssignList = function (order_id) {
            cancellationCasesService.getAssignList(order_id).then(
                function success(response) {

                    $scope.logUser = authService.getUser();
                    $scope.logUserId = $scope.logUser.userId;
                    $scope.assignArr = response.data.assignArr;
                    $scope.cancelsAdd.assignee = _.findWhere($scope.assignArr, {id: $scope.logUserId});

                    //$scope.comp.assignee={"id":response.data.assignArr[0].id,"name":response.data.assignArr[0].name};
                    $scope.visibilityAr = [{"id": "PLATFORM", "name": "PLATFORM"}, {
                        "id": "VENDOR",
                        "name": "VENDOR"
                    }, {"id": "RETAILER", "name": "RETAILER"}]
                    $scope.cancelsAdd.visible = {"id": "PLATFORM", "name": "PLATFORM"};
                }, function error() {
                    toastr.error('ERROR!', 'Assignee list retrieval failed.');
                });
        }

        /**
         *
         * get the status dropdown
         */
        cancellationCasesService.getStatusList().then(
            function success(response) {

                $scope.statusArr = response.data.statusArr;
                //$scope.comp.case_status={"id":response.data.statusArr[0].id,"value":response.data.statusArr[0].value};

            }, function error() {
            });

        /**
         * country and city load
         */
        cancellationCasesService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {

        });

        $scope.getCountry = function () {
            cancellationCasesService.getState($scope.cancelsAdd.altCountry.code)
                .then(function success(response) {
                    $scope.stateArr = response.data.stateArr;
                }, function error() {

                });
        };

        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Cancellation Case";
            $scope.buttonLabel = "Update";
        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Cancellation Case";
            $scope.buttonLabel = "Create";
        }

        $scope.inEditMode = true;
        $scope.comp = {};
        /**
         * Load data when retailer id is available (Edit mode)
         * */

        if ($scope.pageStatus === "EDIT") {

            cancellationCasesService.getCancelData(compID)
                .then(function (responce) {
                    $scope.assignArr = responce.data.assignArr;

                    //console.log(responce);
                    $scope.haveReturnOrders = true;
                    $scope.inEditMode = false;

                    $scope.cancelsAdd = responce.data.details;
                    $scope.orderData = responce.data.details;
                    $scope.orderItems = responce.data.orderItems;

                    $scope.cancelsAdd.due_date = new Date(responce.data.details.due_date);
                    $scope.cancelsAdd.case_status = _.findWhere($scope.statusArr, {id: responce.data.details.case_status});
                    $scope.cancelsAdd.assignee = _.findWhere($scope.assignArr, {id: $scope.cancelsAdd.assignee});
                    $scope.cancelsAdd.caseCategory = _.findWhere($scope.caseCategoryArr, {id: responce.data.details.case_category});

                });
        }


        $scope.cancelsAdd = {};
        /**
         * save function
         */
        function saveCancel(cancelsAdd, orderid, shippingAdd) {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    cancellationCasesService.editCancelCase(cancelsAdd, compID).then(function success(response) {
                            var res = {};
                            if (response.data.updateList) {
                                res.editCase = response.data;
                                toastr.success('Cancellation has been updated successfully.');
                                $location.path('/customer-service/cancellation-cases');
                                $modalInstance.close(res);
                            }
                            else {
                                toastr.error('ERROR!', 'Cancellation has been updated failed.');
                            }

                        }, function error(error) {

                        }
                    );
                }
                else {
                    var form = $scope.cancelsAdd;
                    var address = shippingAdd;
                    $scope.fillAllAlternate = false;

                    /* if (form.altEmail || form.altMobile || form.altZip ||
                     form.altAddress2 || form.altAddress1 ||
                     form.altCity || form.altState || form.altCountry) {

                     toastr.error('All fields are mandatory in Alternation location', 'ERROR!');
                     $scope.fillAllAlternate = true;
                     $scope.exit();
                     }
                     else {
                     //alert('sww');
                     address = shippingAdd;
                     }*/

                    cancellationCasesService.addCancelCase(cancelsAdd, orderid, shippingAdd)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.newList) {
                                res.newCase = response.data;
                                toastr.success('Cancellation has been create successfully.');
                                $modalInstance.close(res);
                            } else {
                                toastr.error('ERROR!', 'Cancellation has been create failed.');
                            }

                        }, function error() {
                        });

                }
            });

        }


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }

})();



/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").service('cancellationCasesService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global ,authService,multipartForm) {
        return {
            getCancelOrder: getCancelOrder,
            getCountries: getCountries,
            getState: getState,
            getAssignList: getAssignList,
            addCancelCase: addCancelCase,
            getCancellationList:getCancellationList,
            searchCancel:searchCancel,
            getUsers:getUsers,
            getCancellationById:getCancellationById,
            getCancelData: getCancelData,
            editCancelCase: editCancelCase,
            getCaseById:getCaseById,
            updateCancellationStatus:updateCancellationStatus,
            saveAttach      : saveAttach,
             getAttachmentList: getAttachmentList,
             getNotesList    : getNotesList,
             saveNotes       : saveNotes,
            getCancellationListTicket:getCancellationListTicket,
            getStatusList:getStatusList,
        };

        function getCancelOrder(orderData) {
            var returnData = $http.post(
                $global.API_URL + 'api/crm/order/search/',  {
                    orderData:orderData,
                    type:'CANCELLATION'}, { headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });
            return returnData;
        }

        /**
         * get country state and city
         */
        function getCountries() {
            var countryCode = $http.post(
                $global.API_URL + 'api/crm/country/');
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post(
                $global.API_URL + 'api/crm/state/',countryCode);
            return stateCode;
        }

        function getAssignList(order_id) {
            var params = {};
            if (order_id != undefined) {
                params = {order_id: order_id};
            }

            var assignee = $http.post(
                $global.API_URL + 'api/crm/other/assignee/', params);
            return assignee;
        }

        /**
         * save return case
         * edited Abdulla
         */
        function addCancelCase(returnsData, orderid, address) {
            var dateStrToSend = returnsData.due_date.getFullYear() + '-' + (returnsData.due_date.getMonth() + 1) + '-' + returnsData.due_date.getDate();
            returnsData.due_date = dateStrToSend;
            var created_by = authService.getUser();
            var saveCase = $http.post(
                $global.API_URL + 'api/crm/cancel/create/',{
                    data: returnsData,
                    orderId: orderid,
                    address: address,
                    created: created_by.userId
                }, { headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
                });
            return saveCase;
        }

        function getCancelData(id){
            var getData = $http.post($global.API_URL + 'api/crm/cancel/details/', id);
            return getData;
        }

        function editCancelCase(formdata,compID) {
            var dateStrToSend = formdata.due_date.getFullYear() + '-' + (formdata.due_date.getMonth() + 1) + '-' + formdata.due_date.getDate();
            formdata.due_date = dateStrToSend;
            var updateBy = authService.getUser();
            var editData = $http.post(
                $global.API_URL + 'api/crm/cancel/edit/', {
                    caseData: formdata,
                    caseId: compID,
                    updateBy: updateBy.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
            return editData;
        }

        function getCancellationList(type,id,limit,page)
        {
            var allData = $http.post($global.API_URL + 'api/crm/cancel/list/', {
                cancel_type: type,
                order_id : id,
                limit : limit,
                page :page
            });
            return allData;
        }

        function getCancellationById(id){

            var cancelViewData = $http.post($global.API_URL + 'api/crm/cancel/view/', {
                cancelID: id,
            });

            return cancelViewData;
        }



        // cancel search
        function searchCancel(cancelSearchCriteria,cancelStatus,limit,page){

        if(cancelSearchCriteria.createDateFrom != null) { cancelSearchCriteria.createDateFrom = convertDate(cancelSearchCriteria.createDateFrom);}
        if(cancelSearchCriteria.createDateTo != null) { cancelSearchCriteria.createDateTo   = convertDate(cancelSearchCriteria.createDateTo);}
        if(cancelSearchCriteria.dueDateFrom != null) { cancelSearchCriteria.dueDateFrom = convertDate(cancelSearchCriteria.dueDateFrom);}
        if(cancelSearchCriteria.dueDateTo != null) { cancelSearchCriteria.dueDateTo   = convertDate(cancelSearchCriteria.dueDateTo); }


            var cancelSearchData = $http.post($global.API_URL + 'api/crm/cancel/searchCancelList/', {
                data: cancelSearchCriteria,
                status:cancelStatus,
                limit : limit,
                page : page
            });

            return cancelSearchData;
        }

        //search users
        function getUsers(){
            var userData = $http.post($global.API_URL + 'api/crm/replacement/getUserDetails/', {});
            return userData;
        }



        function getCaseById(id){

            var otherSearchData = $http.post($global.API_URL + 'api/crm/cancel/caseView/', {
                id: id
            });

            return otherSearchData;
        }

        function updateCancellationStatus(type, id)
        {
            var Status = $http.post($global.API_URL + 'api/crm/cancel/statusUpdate/', {
                status: type,
                cancel_id: id
            });

            return Status;
        }

        function saveAttach(attachment){
         return multipartForm.post($global.API_URL + 'api/crm/cancel/attachment/', attachment);
         }

         function getAttachmentList(id){
         var attachList = $http.post($global.API_URL + 'api/crm/cancel/attachment/list/',id);
         return attachList;
         }

         function getNotesList(id){
         var notesList = $http.post($global.API_URL + 'api/crm/cancel/notes/list/',id);
         return notesList;
         }

         function saveNotes(notes){
         return multipartForm.post($global.API_URL + 'api/crm/cancel/notes/', notes);
         }


        function getCancellationListTicket(days)
        {
            var allData = $http.post($global.API_URL + 'api/crm/cancel/old/', {
                days: days,
            });
            return allData;
        }

        function getStatusList() {
            var caseStatus = $http.post(
                $global.API_URL + 'api/crm/case/status/');
            return caseStatus;
        }

        function convertDate(str) {
            var date = new Date(str),
                mnth = ("0" + (date.getMonth()+1)).slice(-2),
                day  = ("0" + date.getDate()).slice(-2);
            return [ date.getFullYear(), mnth, day ].join("-");
        }
    }


})();



/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('customerServiceSnapshotController', [
        '$scope', '$http', 'customerServiceSnapshotService', 'toastr', '$state','$window','$rootScope','authService', controller
    ]);

    function controller($scope, $http, customerServiceSnapshotService, toastr, $state,$window,$rootScope,authService) {

           /* $scope.platformDropdown = [
                ["Retailer", ["Costco", "Sears", "Target", "Kohls"]],
                ["Vendors", ["Lifestyle Solutions", "ABC Furniture", "Redline Office Furniture"]],
                ["DA", ["Mike's Delivery Service", "ClearSpace Agents", "Composite Transportation"]],
            ];

            $scope.setPlatform = function (selectedPlatform) {
            $scope.selectedPlatform = selectedPlatform;
            $scope.platformFilter = '';

        }
*/

        $scope.platformDropdown = authService.getPlatFormViews();
        $scope.selectedPlatform = authService.getCompany().name;

        $scope.setPlatform = function (selectedPlatform, type) {
            $scope.selectedPlatform = selectedPlatform.name;

            $scope.id = selectedPlatform.id;
            authService.setCompany($scope.id, $scope.selectedPlatform);
            $scope.platformFilter = '';
            $state.go($state.$current, null, {reload: true});
        };

        $scope.graph1_title = "Number of Open Issues";

        $scope.piechart1_title = "Open Cases";
        $scope.piechart2_title = "Case Statuses";
        $scope.piechart3_title = "Case Types";
        $scope.pie_type = "customer";

        $scope.box1url="#!/customer-service/chart-data/open/1/2015/11";

        $scope.box2url="#!/customer-service/all-cases/30";

        $scope.box3url="#!/customer-service/all-cases/60";

        $scope.box4url="#!/customer-service/all-cases/90";

        var currentTime = new Date();

        // returns the month (from 0 to 11)
        var month = currentTime.getMonth();

        // returns the year (four digits)
        var year = currentTime.getFullYear();



      //  $scope.years = [2015, 2016, 2017];
        $scope.selectedYear = year;

        $scope.years = [$scope.selectedYear-1, $scope.selectedYear, $scope.selectedYear+1];

        $scope.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        $scope.selectedMonth = month;


        var ploatCHARTOption = {
            xaxis: {
                mode: "categories",

                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            yaxis: {
                ticks: 3,
                tickDecimals: 0,
                tickColor: "#f0f0f0",
                font: {
                    lineHeight: 13,
                    style: "normal",
                    weight: "bold",
                    family: "sans-serif",
                    variant: "small-caps",
                    color: "#6F7B8A"
                }
            },
            grid: {
                backgroundColor: {colors: ["#fff", "#fff"]},
                borderWidth: 1, borderColor: "#f0f0f0",
                margin: 0,
                minBorderMargin: 0,
                labelMargin: 20,
                hoverable: true,
                clickable: true,
                mouseActiveRadius: 6
            },
            legend: {show: false}
        };

        $scope.asMonthText = " AS OF " + $scope.months[$scope.selectedMonth - 1];
        $scope.asText = " AS OF " + moment(currentTime).format('MM/DD/YYYY');


        $scope.setYear = function (selectedYear) {
             $scope.selectedYear = selectedYear;
             setChart($scope.selectedYear, $scope.selectedMonth);
        };

        $scope.setMonth = function (selectedMonth) {

            $scope.selectedMonth = selectedMonth;
            //after added
            if($scope.selectedMonth != month) {
                $scope.asText = " AS OF " + $scope.months[$scope.selectedMonth];
            }else{
                $scope.asText = " AS OF " + moment(currentTime).format('MM/DD/YYYY');
            }
            setChart($scope.selectedYear, $scope.selectedMonth);
        };

        function setChart(year, month) {
            $rootScope.spinnerTrax = true;
            customerServiceSnapshotService.getChartData(year, month).then(
                function (snapshotDetails) {
                    $rootScope.spinnerTrax = false;

                    var chart_data = snapshotDetails.data;


                    var ploatCHARTData = [
                        {
                            label: "Revenue",
                            data: chart_data.d1,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#f2be3e']
                        }, {
                            data: chart_data.d1,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d1,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d1,
                            points: {show: true, fill: true, radius: 6, fillColor: "#f2be3e", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];

                    var ploatCHARTData2 = [
                        {
                            label: "Revenue",
                            data: chart_data.d2,
                            lines: {
                                fill: 0.4,
                                lineWidth: 0
                            },
                            color: ['#f2be3e']
                        }, {
                            data: chart_data.d2,
                            animator: {steps: 60, duration: 1000, start: 0},
                            lines: {lineWidth: 2},
                            shadowSize: 0,
                            color: '#F85D2C'
                        }, {
                            label: "Revenue",
                            data: chart_data.d2,
                            points: {show: true, fill: true, radius: 6, fillColor: "#F85D2C", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        },
                        {
                            label: "Cost",
                            data: chart_data.d2,
                            points: {show: true, fill: true, radius: 6, fillColor: "#f2be3e", lineWidth: 3},
                            color: '#fff',
                            shadowSize: 0
                        }
                    ];


                    $scope.pieOptions1 = {
                        series: {
                            pie: {
                                show: true,
                                label: {
                                    show: true,
                                    radius: .5,
                                    formatter: labelFormatter,
                                    background: {
                                        opacity: 0
                                    }
                                },

                            }
                        },
                        grid: {
                            hoverable: true,
                            clickable: true
                        },
                        colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                    }, function (error) {
                        $rootScope.spinnerTrax = false;
                    }

                    $scope.pieOptions2 = {
                        series: {
                            pie: {
                                show: true,
                                label: {
                                    show: true,
                                    radius: .5,
                                    formatter: labelFormatter,
                                    background: {
                                        opacity: 0
                                    }
                                },

                            }
                        },
                        grid: {
                            hoverable: true,
                            clickable: true
                        },
                        colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                    }

                    $scope.pieOptions3 = {
                        series: {
                            pie: {
                                show: true,
                                label: {
                                    show: true,
                                    radius: .5,
                                    formatter: labelFormatter,
                                    background: {
                                        opacity: 0
                                    }
                                },

                            }
                        },
                        grid: {
                            hoverable: true,
                            clickable: true
                        },
                        colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
                    }


                    $scope.boxAval = chart_data.snapshots.openCount.count;
                    $scope.boxAtitle = "NUMBER OF OPEN TICKETS";

                    $scope.boxBval = chart_data.snapshots.tickets30Days.count;
                    $scope.boxBtitle = "NUMBER OF OPEN TICKETS > 30 DAYS";

                    $scope.boxCval = chart_data.snapshots.tickets60Days.count;
                    $scope.boxCtitle = "NUMBER OF OPEN TICKETS > 60 DAYS";

                    $scope.boxDval = chart_data.snapshots.tickets90Days.count;
                    $scope.boxDtitle = "NUMBER OF OPEN TICKETS > 90 DAYS";

                    $scope.myData = ploatCHARTData;
                    $scope.resolved_data = ploatCHARTData2;
                    $scope.myChartOptions = ploatCHARTOption;

                    $scope.ordersShippedData = chart_data.snapshots.ordersShipped;
                    $scope.pieDataset1 = chart_data.snapshots.openOrders;
                    $scope.pieDataset2 = chart_data.snapshots.casestatus;
                    $scope.pieDataset3 = chart_data.snapshots.casestype;

                }
            );

        }

        setChart($scope.selectedYear, $scope.selectedMonth);

    $scope.myChartOptions = ploatCHARTOption;

        $scope.onEventPloatHover = function (event, pos, item) {

            var previousPoint = null;
            if (item) {
                if (previousPoint != item.dataIndex) {

                    previousPoint = item.dataIndex;

                    //$("#tooltip").remove();
                    //angular.element("#tooltip").remove();
                    var x = item.datapoint[0].toFixed(2),
                        y = item.datapoint[1].toFixed(2);


                    var month ="";
                    var m = Math.round(x);

                    switch (m){
                        case 0: { month ="JAN"; break;}
                        case 1: { month ="FEB"; break;}
                        case 2: { month ="MAR"; break;}
                        case 3: { month ="APR"; break;}
                        case 4: { month ="MAY"; break;}
                        case 5: { month ="JUN"; break;}
                        case 6: { month ="JUL"; break;}
                        case 7: { month ="AUG"; break;}
                        case 8: { month ="SEP"; break;}
                        case 9: { month ="OCT"; break;}
                        case 10: { month ="NOV"; break;}
                        case 11: { month ="DEC"; break;}

                    }




                    showTooltip(item.pageX, item.pageY,
                        "<p class='vd_bg-green'><strong class='mgr-10 mgl-10'>" +month+ " "+ $scope.selectedYear +"</strong></p>" +
                        "<div style='padding: 0 10px 10px;'>" +
                        "<div> Count : <strong>" + Math.round(y) + "</strong></div>" +
                        "</div>"
                    );
                }
            } else {
                //$("#tooltip").remove();
                angular.element("#tooltip").remove();
                previousPoint = null;
            }
        }

        function showTooltip(x, y, contents) {
            $('<div id="tooltip">' + contents + '</div>').css({
                position: 'absolute',
                display: 'none',
                top: y + 5,
                left: x + 20,
                size: '10',
                'background-color': '#111111',
                color: "#FFFFFF",
                opacity: 0.5
            }).appendTo("body").fadeIn(200);
        }

        $scope.pieOptions = {
            series: {
                pie: {
                    show: true,
                    label: {
                        show: true,
                        radius: .5,
                        formatter: labelFormatter,
                        background: {
                            opacity: 0
                        }
                    },

                }
            },
            grid: {
                hoverable: true,
                clickable: true
            },
            colors: ["#4572a7", "#aa4643", "#89a54e", "#71588f", "#4198af", "#db843d"]
        }

        $scope.onEventPieHover = function (event, pos, obj) {
            if (!obj) {
                return;
            }
            var percent = parseFloat(obj.series.percent).toFixed(2);
            $("#hover").html("<span style='font-weight:bold; color:" + obj.series.color + "'>" + obj.series.label + " (" + percent + "%)</span>");
        }

        $scope.onEventPieClicked = function (event, pos, obj,pie_type) {

            //
            //if (!obj) {
            //    return;
            //}
            //var percent = parseFloat(obj.series.percent).toFixed(2);
            //var year = currentTime.getFullYear()
            //$scope.selectedMonth = currentTime.getMonth()+1;
            //var month = currentTime.getMonth()+1;
            //     if(pie_type=="customer") {
            //
            //         var cases_array = new Array("Cases Less than 5", "Cases > 5", "Cases > 15", "Cases > 30", "Cases > 60", "Cases > 90");
            //         var casestatus_array = new Array("Open", "In Progress", "Resolved", "Cancelled", "Closed as unresolved");
            //         var casestype_array = new Array("Compensation", "Replacement", "Return", "Cancellation", "Medic", "Other");
            //
            //
            //         if (-1 < cases_array.indexOf(obj.series.label)) {
            //
            //             var chart_type = "open_cases";
            //             var parameter = cases_array.indexOf(obj.series.label);
            //
            //             ///chart-data/:chart_type/:year/:month/:parameter
            //             $window.location.href = '#!/customer-service/chart-data/' + chart_type + '/' + year + '/' + month + '/' + parameter;
            //
            //
            //         } else if (-1 < casestatus_array.indexOf(obj.series.label)) {
            //
            //             var chart_type = "case_status";
            //             var parameter = casestatus_array.indexOf(obj.series.label);
            //
            //             $window.location.href = '#!/customer-service/chart-data/' + chart_type + '/' + year + '/' + month + '/' + parameter;
            //
            //
            //         } else if (-1 < casestype_array.indexOf(obj.series.label)) {
            //
            //             var chart_type = "cases_type";
            //             var parameter = casestype_array.indexOf(obj.series.label);
            //
            //             var parameter = casestype_array[parameter];
            //             var stringparamet = angular.lowercase(parameter);
            //             $window.location.href = '#!/customer-service/' + stringparamet + '-cases';
            //
            //
            //         }
            //
            //     }
            //


        }

/*        function labelFormatter(label, series) {
            return "<div style='font-size:8pt; text-align:center; padding:2px; color:white;'>" + label + "<br/>" + Math.round(series.percent) + "%</div>";
        }*/
        function labelFormatter(label, series) {
            return "<div style='font-size:10pt; text-align:center; padding:2px; color:white;'>" + Math.round(series.percent) + "%</div>"; //+ label + "<br/>"
        }

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };

    }

})();





/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService")
        .service('customerServiceSnapshotService', ['$http', '$q', '$global', service]);

    function service($http, $q, $global) {
        return {
            getChartData: getChartData
        };

        function getChartData(year, month) {
            var snapshotData = [];

            var req = $http.post(
                $global.API_URL + 'api/crm/snapshot/',
                {
                    key: 'xyz123',
                    year: year,
                    month: month+1
                }
            );

            return req.then(handleSuccess, handleError);

            function handleSuccess(response) {
                snapshotData = response.data;

                return snapshotData;
            }

            function handleError(response) {
            }

        }

    }

})();
/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('medicCasesController', [
        '$scope', '$http', '$location', 'toastr', '$state', '$global', '$modal', '$rootScope',
        'medicCasesService', '$window', controller
    ]);

    function controller($scope, $http, $location, toastr, $state, $global, $modal, $rootScope, medicCasesService, $window) {

        $scope.inEditMode = true;
        $scope.addMedicCase = addMedicCase;
        $scope.editMedicCase = editMedicCase;
        $scope.listStatus = 'open';
        $scope.medicStatus = 'open';
        $scope.medic = {};
        $scope.lists = {};
        $scope.medicSearch = {
            "highPriority": null,
            "createDateFrom": null,
            "createDateTo": null,
            "dueDateFrom": null,
            "dueDateTo": null,
            "assignee": null,
            "caseId": null,
            "keyWords": null
        };
        $scope.searchMedicList = searchMedicList;
        $scope.assignSearch = {};
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;
        $scope.openCases = openCases;
        $scope.clearList = clearList;
        openCases('open');

        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };
        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'case_id', fieldName: 'ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'case_title', fieldName: 'Title', fieldSearch: 'searchDescription', checked: true},
            {id: 3, field: 'case_status', fieldName: 'Status', fieldSearch: 'searchSku', checked: true},
            /*{id: 4, field: 'case_category', fieldName: 'Escalation', fieldSearch: 'searchDescription', checked: true},*/
            {id: 4, field: 'case_created_date', fieldName: 'Created Date', fieldSearch: 'searchCity', checked: true},
            {id: 5, field: 'case_due_date', fieldName: 'Due Date', fieldSearch: 'searchCity', checked: true},
            {id: 6, field: 'case_assigned_to', fieldName: 'Assign To', fieldSearch: 'searchAddress2', checked: true},
            {id: 7, field: 'case_customer_name', fieldName: 'Customer Name', fieldSearch: 'searchAddress1', checked: true},
            {id: 8, field: 'case_customer_id', fieldName: 'Customer ID', fieldSearch: 'searchAddress1', checked: true},
            {id: 9, field: 'case_po_id', fieldName: 'PO ID', fieldSearch: 'searchItem', checked: true},
            {id: 10, field: 'case_OrderId', fieldName: 'Sales Order ID', fieldSearch: 'searchItem', checked: true},
            {id: 11, field: 'case_incident_count', fieldName: 'No of Incidents', fieldSearch: 'searchItem', checked: true},
            {id: 12, field: 'case_num_days', fieldName: 'No of Days Open', fieldSearch: 'searchItem', checked: true},
            {id: 13, field: 'case_created_by', fieldName: 'Created By', fieldSearch: 'SearchCusFirstName', checked: true}

        ];
        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;
        $scope.viewCase= function(caseId){
            $location.path('/customer-service/medic-cases/view/' + caseId );

        }




        $scope.pageChanged = function () {
            openCases('open');
        };

        function addMedicCase() {
            formOpenModal()
        }

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };

        function openCases(type) {
            $rootScope.spinnerTrax = true;
            $scope.statusActiveOpen = 'active';
            $scope.medicStatus = type;
            var id = '';
            var ordID = '';
            medicCasesService.getMedicList(type, id, ordID, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.lists = response.data.cases;
                $scope.totalItems = response.data.count;
                //console.log($scope.lists);
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }


        $scope.formatDate = function (date) {
            var date = date.split("-").join("/");
            var dateOut = new Date(date);
            return dateOut;
        };

        function editMedicCase(medicID, editList) {
            $scope.selectUpObj = editList;
            if (medicID) {
                formOpenModal(medicID)
            } else {
                toastr.error('ID!', 'Missing row id...');
            }
        }


        // Search Function
        function searchMedicList() {

            medicCasesService.searchMedicList($scope.medicSearch, $scope.medicStatus, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $scope.lists = response.data.dataArr;
                $scope.totalItems = response.data.count;
            }, function (error) {
            })
        }

        // clear search form inputs
        function clearList() {
            $scope.medicSearch = {
                "highPriority": null,
                "createDateFrom": null,
                "createDateTo": null,
                "dueDateFrom": null,
                "dueDateTo": null,
                "assignee": null,
                "caseId": null,
                "keyWords": null
            };
            $('#assign').html('');
            openCases('open');
        }


        function formOpenModal(medicID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/medic-cases/newMedicModal.html',
                controller: 'formMedicModalController',
                size: 'lg',
                resolve: {
                    medicID: function () {
                        return medicID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newCase) {
                    if ($scope.lists.length > 0) {
                        $scope.lists.unshift(result.newCase.newList);
                    } else {
                        $scope.lists = [];
                        $scope.lists.push(result.newCase.newList);
                    }
                    $scope.totalItems = parseInt($scope.totalItems) + 1;
                }
                if (result.editCase) {
                    var indexA = $scope.lists.indexOf($scope.selectUpObj);
                    $scope.lists[indexA] = result.editCase.updateList;

                    if ($scope.medicStatus != result.editCase.updateList.status) {
                        var id = result.editCase.updateList.case_id;
                        var victim = _.findWhere($scope.lists, {case_id: id});
                        $scope.lists = _.without($scope.lists, victim);
                        if (parseInt($scope.totalItems) > 0) {
                            $scope.totalItems = parseInt($scope.totalItems) - 1;
                        }
                    } else {
                        $scope.lists[indexA] = result.editCase.updateList;
                    }
                }
            });

        }

        medicCasesService.getAssignList().then(
            function success(response) {
                $scope.assignSearch = response.data.assignArr;
            }, function error() {
            });

        $scope.formatDate = function (date) {
            var date = date.split("-").join("/");
            var dateOut = new Date(date);
            return dateOut;
        };

    } // end main controller


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.customerService').controller('formMedicModalController',
        ['$scope', 'authService', '$modalInstance', 'medicID', 'medicCasesService', 'toastr', '$window', '$location', '$rootScope', '$timeout', 'modalService', formMedicModalController]);
    function formMedicModalController($scope, authService, $modalInstance, medicID, medicCasesService, toastr, $window, $location, $rootScope, $timeout, modalService) {

        $scope.caseSearch_info = false;
        $timeout(function () {
            $scope.caseSearch_info = true;
        }, 5000);

        $scope.medicSearch = medicSearch;
        $scope.medicOrder = {};
        $scope.medics = {};
        $scope.inEditMode = true;
        $scope.pageStatus = medicID ? 'EDIT' : 'CREATE';
        $scope.saveMedicCases = saveMedicCases;
        $scope.medicUserList = {};
        $scope.sendMedicMail = sendMedicMail;
        $scope.medicShortList = {};
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.caseCategoryArr = [{id:'RESOLUTION', value: 'Resolution'},{id:'ESCALATION',value:'Escalation'}];

        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Medic Case";
            $scope.buttonLabel = "Update";
            $scope.ro = true;

        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Medic Case";
            $scope.buttonLabel = "Create";
        }

        $scope.createOptGroups = function (item) {
            return item.name;
        };

        /*****Popover Start***********/
        $scope.medicsPopover = {
            templateUrl: 'medicsPopoverTemplate.html',
            title: 'Edit Quote'
        };

        $scope.close_popover = function (id) {
            setTimeout(function () {
                document.getElementById("popover-" + id).click();
            }, 100);
        };

        $scope.expected_time = new Date();

        $scope.hstep = 1;
        $scope.mstep = 15;

        $scope.options = {
            hstep: [1, 2, 3],
            mstep: [1, 5, 10, 15, 25, 30]
        };

        $scope.ismeridian = true;
        $scope.toggleMode = function () {
            $scope.ismeridian = !$scope.ismeridian;
        };

        $scope.update = function () {
            var d = new Date();
            d.setHours(14);
            d.setMinutes(0);
            $scope.expected_time = d;
        };

        /*****Popover End***********/

        function medicSearch() {

            var search_val = $scope.medicOrder;
            if (search_val.searchValue == undefined || search_val.catSearch == undefined) {
                toastr.error('Please search a order correctly.', 'ERROR!');
                $scope.exit();
            }
            $scope.isEmptyReasults = false;
            $scope.isOrderList = false;
            $scope.haveReturnOrders = false;

            medicCasesService.getMedicOrder($scope.medicOrder).
            then(function success(response) {

                    $scope.haveReturnOrders = true;
                    if (response.data.status == 'list') {
                        $scope.isOrderList = true;
                        $scope.orderList = response.data.orderlist;
                        $scope.haveReturnOrders = false;
                        $scope.saveButtonDisabled = false;

                        $scope.getListOrder = function (order_id) {
                            medicCasesService.getMedicOrder(order_id).
                            then(function success(response) {
                                $scope.medics.orderItemSelect = response.data.productIdArr;
                                $scope.orderData = response.data.order_data;
                                $scope.shippingAdd = response.data.shipping_add;
                                $scope.orderItems = response.data.order_items;
                                $scope.isOrderList = false;
                                $scope.haveReturnOrders = true;
                                $scope.haveSearchSuccess = true;
                                $scope.saveButtonDisabled = false;
                                $scope.getAssignList($scope.orderData.order_id);
                            });
                        }
                    }

                    else if (response.data.status == null) {
                        $scope.isEmptyReasults = true;
                        $scope.isOrderList = false;
                        $scope.haveReturnOrders = false;
                    }

                    var itmx = response.data.productIdArr;
                    $scope.medics.orderItemSelect = itmx;
                    $scope.orderData = response.data.order_data;
                    $scope.shippingAdd = response.data.shipping_add;
                    $scope.orderItems = response.data.order_items;
                    $scope.saveButtonDisabled = false;

                    $scope.getAssignList($scope.orderData.order_id);

                }, function error(error) {
                    toastr.error('ERROR!', 'Medic has been Create failed.');
                }
            );

            medicCasesService.getMedicUserList($scope.medicOrder).then(function success(response) {
                $scope.medicUserList = response.data.data;
            }, function error() {
            });
        }

        if ($scope.pageStatus === "EDIT") {
            medicCasesService.getMedicData(medicID)
                .then(function (responce) {
                    $scope.assignArr = responce.data.assignArr;
                    $scope.haveReturnOrders = true;
                    $scope.inEditMode = false;
                    $scope.shippingAdd = responce.data.order;
                    $scope.orderData = responce.data.order;
                    $scope.orderItems = responce.data.orderItems;
                    $scope.medics = responce.data.details;
                    $scope.selectMed = responce.data.selectMed;
                    $scope.medicShortList = responce.data.medicShortList;
                    $scope.medics.due_date = new Date(responce.data.details.due_date);
                    $scope.medics.case_category = _.findWhere($scope.caseCategoryArr, {id: responce.data.details.case_category});
                });
        }

        function saveMedicCases(medics, orderId) {
            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    medicCasesService.editMedicCase(medics, orderId)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.updateList) {
                                res.editCase = response.data;
                                toastr.success('Medic has been update successfully.');
                                $location.path('/customer-service/medic-cases');
                                $modalInstance.close(res);
                            } else {
                                toastr.error('ERROR!', 'Medic has update failed.');
                            }
                        }, function error() {
                        });

                } else {
                    medicCasesService.addMedicCase(medics, orderId)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.newList) {
                                res.newCase = response.data;
                                toastr.success('Medic has been create successfully.');
                                $modalInstance.close(res);
                            } else {
                                toastr.error('ERROR!', 'Medic has been create failed.');
                            }
                        }, function error() {
                        });
                }
            });
        }

        /**
         * country and city load
         */
        medicCasesService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {

        });

        $scope.getCountry = function () {
            medicCasesService.getState($scope.medics.altCountry.code).then(function success(response) {
                $scope.stateArr = response.data.stateArr;
            }, function error() {

            });
        };

        //get the status dropdown
        medicCasesService.getStatusList().then(function success(response) {
                $scope.statusArr = response.data.statusArr;
                /* $scope.comp.case_status = {"id":response.data.statusArr[0].id,
                 "value":response.data.statusArr[0].value};*/
            }, function error() {
            }
        );

        // get the assign user list
        $scope.getAssignList = function (order_id) {
            medicCasesService.getAssignList(order_id).then(
                function success(response) {
                    $scope.logUser = authService.getUser();
                    $scope.logUserId = $scope.logUser.userId;
                    $scope.assignArr = response.data.assignArr;
                    $scope.medics.assignee = _.findWhere($scope.assignArr, {id: $scope.logUserId});

                }, function error() {
                    toastr.error('ERROR!', 'Assignee list retrieval failed.');
                });
        };


        function sendMedicMail(medicList) {
            medicCasesService.shortListed(medicList).then(function success(response) {
                $scope.medicShortList = response.data.data;
                toastr.success ('Email has been sent.');
            }, function error() {
            });
        }

        $scope.addImage = function () {
            if ($scope.imageCount == 0 || !$scope.imageCount) {
                $scope.showimage2 = true;
            } else if ($scope.imageCount == 3) {
                $scope.showimage3 = true;
            }
            if ($scope.showimage2 == false && $scope.showimage3 == false) {
                $scope.imageCount = 0;
            } else {
                $scope.imageCount = 3;
            }
        };

        $scope.removeImage = function (num) {
            if (num == 2) {
                $scope.image_2 = '';
                $scope.showimage2 = false;
            } else if (num == 3) {
                $scope.image_3 = '';
                $scope.showimage3 = false;
            }
            if ($scope.showimage2 == false && $scope.showimage3 == false) {
                $scope.imageCount = 0;
            } else {
                $scope.imageCount = 3;
            }
        };

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };


    }


})();
/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';
    angular.module("module.customerService").service('medicCasesService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {
        return {
            getAssignList: getAssignList,
            getMedicOrder: getMedicOrder,
            addMedicCase: addMedicCase,
            getMedicUserList: getMedicUserList,
            getMedicList:getMedicList,
            getCaseById:getCaseById,
            getAttachmentList:getAttachmentList,
            geNotesList:geNotesList,
            saveAttach:saveAttach,
            saveNotes:saveNotes,
            shortListed: shortListed,
            getMedicData: getMedicData,
            editMedicCase:editMedicCase,
            getStatusList: getStatusList,
            searchMedicList:searchMedicList,
            getCountries:getCountries,
            getState:getState,
        };

        function searchMedicList(medicSearch, medicStatus,limit,page) {

            if(medicSearch.createDateFrom != null) { medicSearch.createDateFrom = convertDate(medicSearch.createDateFrom);}
            if(medicSearch.createDateTo != null) { medicSearch.createDateTo   = convertDate(medicSearch.createDateTo);}
            if(medicSearch.dueDateFrom != null) { medicSearch.dueDateFrom = convertDate(medicSearch.dueDateFrom);}
            if(medicSearch.dueDateTo != null) { medicSearch.dueDateTo   = convertDate(medicSearch.dueDateTo); }


            var data = $http.post($global.API_URL + 'api/crm/medic/list-search/', {
                data   : medicSearch,
                status : medicStatus,
                limit  : limit,
                page   : page
            });

            return data;
        }

        function getMedicOrder(orderData) {
            var returnData = $http.post(
                $global.API_URL + 'api/crm/order/search/',   {
                    orderData:orderData,
                    type:'MEDIC'}, { headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });
            return returnData;
        }

        function getAssignList(order_id) {
            var params = {};
            if (order_id != undefined) {
                params = {order_id: order_id};
            }

            var assignee = $http.post($global.API_URL + 'api/crm/other/assignee/', params);
            return assignee;
        }

        function addMedicCase(medicData, orderId) {
            medicData.selectOrderItems = JSON.stringify(medicData.orderItems);
            medicData.asignId = JSON.stringify(medicData.assignee);
            medicData.dueDate = JSON.stringify(medicData.due_date);
            medicData.quotedHours = JSON.stringify(medicData.quoted_hours);
            medicData.quotedCost = JSON.stringify(medicData.quoted_cost);
            medicData.expectedDate = JSON.stringify(medicData.expected_date);
            medicData.expectedTime = JSON.stringify(medicData.expected_time);
            medicData.caseCategory = JSON.stringify(medicData.case_category);
            medicData.orderId = orderId;
            return  multipartForm.post($global.API_URL + 'api/crm/medic/create/',medicData);
        }

        function editMedicCase(medicData, orderId) {
            medicData.due_date = convertDate(medicData.due_date);
            medicData.selectOrderItems = JSON.stringify(medicData.orderItems);
            medicData.asignId = JSON.stringify(medicData.assignee);
            medicData.dueDate = JSON.stringify(medicData.due_date);
            medicData.caseStatus = JSON.stringify(medicData.caseStatus);
            medicData.caseCategory = JSON.stringify(medicData.case_category);
            medicData.orderId = orderId;
            return  multipartForm.post($global.API_URL + 'api/crm/medic/edit/',medicData);
        }

        function getMedicUserList(order) {
            var assignee = $http.post($global.API_URL + 'api/crm/medic/users/',order);
            return assignee;
        }

        function getMedicList(type, id, ordID, limit, page) {
            var data = $http.post($global.API_URL + 'api/crm/medic/list/', {
                medic_type: type,
                customer_id: id,
                order_id: ordID,
                limit: limit,
                page: page
            });
            return data;
        }

        function shortListed(medicList) {
            var returnData = $http.post(
                $global.API_URL + 'api/crm/medic/shortlist/', medicList);
            return returnData;
        }

        function getCaseById(data) {
            var otherSearchData = $http.post($global.API_URL + 'api/crm/medic/case-view/', {
                caseId: data.caseId,
                userId: data.userId,
                type: data.type,
            });
            return otherSearchData;
        }

        function getAttachmentList(id) {
            var attachList = $http.post($global.API_URL + 'api/crm/medic/attachment/list/', id);
            return attachList;
        }

        function geNotesList(id) {
            var notesList = $http.post($global.API_URL + 'api/crm/medic/notes/list/', id);
            return notesList;
        }

        function saveAttach(attachment) {
            return multipartForm.post($global.API_URL + 'api/crm/medic/attachment/', attachment);
        }

        function saveNotes(notes) {
            return multipartForm.post($global.API_URL + 'api/crm/medic/notes/', notes);
        }

        function getMedicData(medId) {
            var dataList = $http.post($global.API_URL + 'api/crm/medic/details/', medId);
            return dataList;
        }

        function getStatusList() {
            var caseStatus = $http.get(
                $global.API_URL + 'api/crm/case/status/');
            return caseStatus;
        }

        function convertDate(str) {
            var date = new Date(str),
                mnth = ("0" + (date.getMonth()+1)).slice(-2),
                day  = ("0" + date.getDate()).slice(-2);
            return [ date.getFullYear(), mnth, day ].join("-");
        }

        /**
         * get country state and city
         */
        function getCountries() {
            var countryCode = $http.post(
                $global.API_URL + 'api/crm/country/');
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post(
                $global.API_URL + 'api/crm/state/',countryCode);
            return stateCode;
        }

    }

})();
/**
 * Created by ab on 10/19/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('medicCasesViewController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'medicCasesService', 'remindersService', 'modalService', '$window', '$stateParams', '$location', 'authService', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, medicCasesService, remindersService, modalService, $window, $stateParams, $location, authService) {

        $scope.medAttachments = {};
        $scope.medNotes = {};
        $scope.caseId = $stateParams.id;
        $scope.getall = getAll;
        $scope.addAttachment = addAttachment;
        $scope.addNotes = addNotes;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;
        $scope.editMedicCase = editMedicCase;
        $scope.featureNotConnected = featureNotConnected;
        $scope.hideViewAs = true;


        function editMedicCase(compID) {
            if (compID) {
                formeditOpenModal(compID)
            } else {
                toastr.error('ID!', 'Missing row id...');
            }
        }


        function featureNotConnected() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        }


        function formeditOpenModal(medicID) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/medic-cases/newMedicModal.html',
                controller: 'formMedicModalController',
                size: 'lg',
                resolve: {
                    medicID: function () {
                        return medicID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                openCases('open');
            });
        }

        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }


        if ($scope.caseId === '') {
            $location.path("/customer-service/medic-cases");
        }
        else {
            getAll()
        }

        function getAll() {
            medicCasesService.getCaseById({caseId: $scope.caseId,userId: $scope.user.userId, type: 2,}).then(function (response) {
                $scope.view = response.data.data.view;
                $scope.orders = response.data.data.orders;
                $scope.customer = response.data.data.customer;
                $scope.medAttachments = response.data.data.attachments;
                $scope.medNotes = response.data.data.notes;
                $scope.listOpen = response.data.data.reminders.open;
                $scope.listMedicleted = response.data.data.reminders.completed;
                $scope.orderItems = response.data.data.orderItems;

                var phone = $scope.customer[0].phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");

                if (response.data.data.view.length === 0) {
                    $location.path("/customer-service/medic-cases");
                }
                medicCasesService.getMedicData($scope.caseId).then(function success(response) {
                    $scope.orderItems = response.data.orderItems;
                });

            }, function (error) {
            });
        }

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };


        function addAttachment() {
            formAttachModal();
        }

        function formAttachModal(attachId) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/medic-cases/NewAttachmentModal.html',
                controller: 'medicAttachController',
                size: 'md',
                resolve: {
                    attachId: function () {
                        return attachId;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.attachm) {
                    $scope.medAttachments.unshift(result.attachm.data.com_attachment);
                }
            });
        }


        function addNotes() {
            formNoteModal();
        }

        function formNoteModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/medic-cases/NewNotesModal.html',
                controller: 'medicNoteController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newNote) {
                    $scope.medNotes.unshift(result.newNote.data.notes);
                    //  console.log(result.newNote.data.notes);
                }
            });
        }


        // List reminders
        $scope.listOpen = [];
        $scope.listMedicleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsMedicleted = setAsMedicleted;
        $scope.deleteReminder = deleteReminder;

        /*remindersService.listReminders({
            parentId: $scope.caseId,
            userId: $scope.user.userId,
            type: 2,
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listMedicleted = response.completed;
        }, function error(error) {

        });*/

        function addReminder() {
            formOpenModal()
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.caseId;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 2;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listMedicleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listMedicleted = $scope.listMedicleted;
                    listMedicleted = _.without(listMedicleted, _.findWhere(listMedicleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listMedicleted = listMedicleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listMedicleted.push(angular.copy(result.data));
                        listMedicleted = sortByDate(listMedicleted);
                        $scope.listMedicleted = listMedicleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsMedicleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsMedicleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listMedicleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listMedicleted = $scope.listMedicleted;
                        listMedicleted = _.without(listMedicleted, _.findWhere(listMedicleted, {id: response.id}));
                        listMedicleted.push(angular.copy(response));
                        listMedicleted = sortByDate(listMedicleted);

                        $scope.listMedicleted = listMedicleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listMedicleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listMedicleted = $scope.listMedicleted;
                        listMedicleted = _.without(listMedicleted, _.findWhere(listMedicleted, {id: reminderId}));
                        listMedicleted = sortByDate(listMedicleted);

                        $scope.listMedicleted = listMedicleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                })
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }

        $scope.featureNotConnected = function () {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };


        // view product specific page
        $scope.showDetail = function (prodId,type) {
            if(type=='UNIT' || type == 'CONFIGURATION'){

                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };
    } //end main controller


    /**
     * CREATE AND EDIT ATTACHMENT MODAL
     * */
    angular.module('module.customerService').controller('medicAttachController',
        ['modalService','$scope', '$modalInstance', 'attachId', 'medicCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', medicAttachController]);

    function medicAttachController(modalService,$scope, $modalInstance, attachId, medicCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.medicAttach = {};
        $scope.attachmentSave = attachmentSave;

        function attachmentSave(medicAttach) {
            medicAttach.attachId = $stateParams.id;
            medicCasesService.saveAttach(medicAttach).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.attachm = response;
                    $modalInstance.close(res);
                    toastr.success('Attachment has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


    /**
     * CREATE AND EDIT Notes MODAL
     * */
    angular.module('module.customerService').controller('medicNoteController',
        ['modalService','$scope', '$modalInstance', 'medicCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', medicNoteController]);

    function medicNoteController(modalService,$scope, $modalInstance, medicCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.medicNotes = {};
        $scope.saveMedicNotes = saveMedicNotes;
        $scope.medicNotes.compId = $stateParams.id;
        $scope.medicNotes.createdBy = authService.getToken();

        function saveMedicNotes(medicNotes) {

            medicCasesService.saveNotes(medicNotes).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.newNote = response;
                    $modalInstance.close(res);
                    toastr.success('Note has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


    }


})
();
/**
 * Created by Ab
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('otherCasesController', [
        '$location','$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'otherCasesService', '$window', controller
    ]);

    function controller($location,$scope, $http, toastr, $state, $global, $modal, $rootScope, otherCasesService, $window) {

        //pagination
        $scope.totalItems = 60;
        $scope.currentPage = 1;
        $scope.maxSize = 5;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;


        $scope.addOtherCase = addOtherCase;
        $scope.editOtherCase = editOtherCase;
        $scope.allUsers = {};
        $scope.getLoadData = getLoadData;
        $scope.selectUpObj = {};


        $scope.selectStatus = selectStatus;

        $scope.searchOther = searchOther;

        $scope.otherMainSearch = {};
        $scope.otherStatus = {};
        $scope.otherLists = {};

        $scope.search = {};
        $scope.search.assignee = {};
        $scope.assignee = {};
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;

        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };
        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'case_number', fieldName: 'Case ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'title', fieldName: 'Title', fieldSearch: 'searchDescription', checked: true},
            {id: 3, field: 'status', fieldName: 'Status', fieldSearch: 'searchSku', checked: true},
            /*{id: 4, field: 'case_category', fieldName: 'Escalation', fieldSearch: 'searchDescription', checked: true},*/
            {id: 4, field: 'created_at', fieldName: 'Created Date', fieldSearch: 'searchCity', checked: true},
            {id: 5, field: 'due_date', fieldName: 'Due Date', fieldSearch: 'searchCity', checked: true},
            {id: 6, field: 'assign', fieldName: 'Assign To', fieldSearch: 'searchAddress2', checked: true},
            {id: 7, field: 'cus_name', fieldName: 'Customer Name', fieldSearch: 'searchAddress1', checked: true},
            {id: 8, field: 'case_customer_id', fieldName: 'Customer ID', fieldSearch: 'searchAddress1', checked: true},
            {id: 9, field: 'case_po_id', fieldName: 'PO ID', fieldSearch: 'searchItem', checked: true},
            {id: 10, field: 'orderNo', fieldName: 'Sales Order ID', fieldSearch: 'searchItem', checked: true},
            {id: 11, field: 'case_incident_count', fieldName: 'No of Incidents', fieldSearch: 'searchItem', checked: true},
            {id: 12, field: 'case_num_days', fieldName: 'No of Days Open', fieldSearch: 'searchItem', checked: true},
            {id: 13, field: 'create', fieldName: 'Created By', fieldSearch: 'SearchCusFirstName', checked: true}



        ];
        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;
        $scope.viewCase= function(caseId){
            $location.path('/customer-service/other-cases/view/' + caseId );

        };

        $scope.otherStatus = 'open';
        $scope.pageChanged = function () {
            selectStatus('open');
        };

        function selectStatus(type) {
            $scope.otherStatus = type;
            otherCasesService.getCaseList($scope.otherStatus, $scope.pageLimit, $scope.currentPage).then(function (response) {
                    $scope.otherLists = response.data.cases;
                    $scope.totalItems = response.data.count;
                    $scope.allUsers = response.data.users;
                    $scope.userType = response.data.group;
                },
                function (error) {
                }
            );
        }

        selectStatus('open');


        $scope.formatDate = function (date) {
            var dateSplit = date.split("-").join("/");
            var dateOut = new Date(dateSplit);
            return dateOut;
        };

        function getUsers() {
            otherCasesService.getUsers().then(function success(response) {
                //console.log(response.data);
                $scope.allUsers = response.data;
            }, function error(error) {
                //toastr.error('ERROR!', error);
            });
        }

        //  getLoadData();


        $scope.clearAllData = function () {
            $scope.otherMainSearch = {};
            getLoadData();

        }
        function getLoadData() {
            selectStatus('open');
            /*var id = '';
             otherCasesService.selectOpenStatus(id).then(function (response) {
             $scope.otherLists =response.data.data;
             },
             function (error) {
             }
             );*/
        }


        $scope.submitForm = function () {
        };


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };


        function addOtherCase() {
            formOpenModal()
        }

        function editOtherCase(compID, editList) {
            $scope.selectUpObj = editList;
            if (compID) {
                formOpenModal(compID)
            }
            else {
                toastr.error('ID!', 'Missing row id...');
            }
        }

        function formOpenModal(compID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/other-cases/newOtherCaseModal.html',
                controller: 'formOtherModalController',
                size: 'lg',
                resolve: {
                    compID: function () {
                        return compID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newOther) {

                    if ($scope.otherLists.length > 0) {
                        $scope.otherLists.unshift(result.newOther.newCase);
                    } else {
                        $scope.otherLists = [];
                        $scope.otherLists.push(result.newOther.newCase);
                    }
                    $scope.totalItems = parseInt($scope.totalItems) + 1;
                }
                if (result.editCase) {
                    var indexA = $scope.otherLists.indexOf($scope.selectUpObj);
                    $scope.otherLists[indexA] = result.editCase.updateList;

                    if ($scope.otherStatus != result.editCase.updateList.status) {
                        var id = result.editCase.updateList.case_number;
                        var victim = _.findWhere($scope.otherLists, {case_number: id});
                        $scope.otherLists = _.without($scope.otherLists, victim);
                        if (parseInt($scope.totalItems) > 0) {
                            $scope.totalItems = parseInt($scope.totalItems) - 1;
                        }
                    } else {
                        $scope.otherLists[indexA] = result.editCase.updateList;
                    }
                }
            });

        }

        function searchOther() {
            otherCasesService.searchOther($scope.otherMainSearch, $scope.otherStatus, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $scope.otherLists = response.data.data;
                $scope.totalItems = response.data.count;
            }, function (error) {

            });
        }


    }


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.customerService').controller('formOtherModalController',
        ['$scope', 'authService', '$modalInstance', 'compID', 'otherCasesService', 'toastr', '$window', '$location', '$rootScope', '$timeout', 'modalService', formOtherModalController]);
    function formOtherModalController($scope, authService, $modalInstance, compID, otherCasesService, toastr, $window, $location, $rootScope, $timeout, modalService) {

        $scope.caseSearch_info = false;
        $timeout(function () {
            $scope.caseSearch_info = true;
        }, 5000);

        $scope.pageStatus = compID ? 'EDIT' : 'CREATE';
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.saveFormComp = saveOther;
        $scope.compFrom = {};
        $scope.searchDataMaster = searchDataMaster;
        $scope.saveButtonDisabled = true;
        $scope.caseCategoryArr = [{id:'RESOLUTION', value: 'Resolution'},{id:'ESCALATION',value:'Escalation'}];

        if ($scope.pageStatus == "EDIT") {
            $scope.ro = true;
        }
        $scope.createOptGroups = function (item) {
            return item.name;
        };

        function searchDataMaster() {
            /**
             * search validation
             */
            var search_val = $scope.compFrom;

            if (search_val.searchValue == undefined || search_val.catSearch == undefined) {
                toastr.error('Please search a order correctly.', 'ERROR!');
                $scope.exit();
            }


            $scope.isEmptyReasults = false;
            $scope.isOrderList = false;
            $scope.haveReturnOrders = false;

            otherCasesService.getOtherOrder(search_val).then(function success(response) {

                var otherOrderResp = response.data;
                $scope.haveReturnOrders = true;
                if (otherOrderResp.status == 'list') {
                    $scope.isOrderList = true;
                    $scope.orderList = otherOrderResp.orderlist;
                    $scope.haveReturnOrders = false;
                    $scope.saveButtonDisabled = false;

                    $scope.getListOrder = function (order_id) {
                        otherCasesService.getOtherOrder(order_id).
                        then(function success(response) {

                            var otherOderListResp = response.data;
                            //var itmx = response.data.productIdArr;TODO REFAC
                            //$scope.comp = {orderItemSelect:itmx};
                            $scope.comp.orderItemSelect = otherOderListResp.productIdArr;
                            $scope.orderData = otherOderListResp.order_data;
                            $scope.shippingAdd = otherOderListResp.shipping_add;
                            $scope.orderItems = otherOderListResp.order_items;

                            $scope.isOrderList = false;
                            $scope.haveReturnOrders = true;
                            $scope.haveSearchSuccess = true;
                            $scope.saveButtonDisabled = false;

                            $scope.getAssignList($scope.orderData.order_id);
                        });
                    }
                }

                else if (response.data.status == null) {
                    $scope.isEmptyReasults = true;
                    $scope.isOrderList = false;
                    $scope.haveReturnOrders = false;
                }
                //var itmx = getOtherOrderResp.productIdArr;//TODO REFAC
                $scope.comp.orderItemSelect = otherOrderResp.productIdArr;
                //$scope.comp = {orderItemSelect:itmx};
                $scope.orderData = otherOrderResp.order_data;
                $scope.shippingAdd = otherOrderResp.shipping_add;
                $scope.orderItems = otherOrderResp.order_items;
                $scope.saveButtonDisabled = false;

                $scope.getAssignList($scope.orderData.order_id);

            }, function error(error) {
                toastr.error('ERROR!', 'Other Case has been Create failed.');
            });


        }

        /**
         * get the assign user list
         */
        $scope.getAssignList = function (order_id) {
            otherCasesService.getAssignList(order_id).then(
                function success(response) {

                    $scope.logUser = authService.getUser();
                    $scope.logUserId = $scope.logUser.userId;
                    $scope.assignArr = response.data.assignArr;
                    $scope.comp.assignee = _.findWhere($scope.assignArr, {id: $scope.logUserId});

                }, function error() {
                    toastr.error('ERROR!', 'Assignee list retrieval failed.');
                });
        }

        /**
         *
         * get the status dropdown
         */
        otherCasesService.getStatusList().then(
            function success(response) {

                $scope.statusArr = response.data.statusArr;
                //$scope.comp.case_status={"id":response.data.statusArr[0].id,"value":response.data.statusArr[0].value};

            }, function error() {
            });

        $scope.inEditMode = true;
        $scope.comp = {};
        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Other Case";
            $scope.buttonLabel = "Update";
        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Other Case";
            $scope.buttonLabel = "Create";
        }

        /**
         * Load data when retailer id is available (Edit mode)
         * */
        if ($scope.pageStatus === "EDIT") {

            otherCasesService.getOtherData(compID)
                .then(function (responce) {
                    $scope.assignArr = responce.data.assignArr;
                    $scope.comp = responce.data.details[0];
                    $scope.orderData = responce.data.order[0];
                    $scope.comp.duedate = new Date(responce.data.details[0].due_date);

                    $scope.comp.case_status = _.findWhere($scope.statusArr, {id: responce.data.details[0].case_status});
                    $scope.comp.assignee = responce.data.details[0].assignee;
                    $scope.orderItems = responce.data.orderItems;
                    $scope.haveReturnOrders = true;
                    $scope.inEditMode = false;

                    $scope.comp.caseCategory = _.findWhere($scope.caseCategoryArr, {id: responce.data.details.case_category});
                    $scope.comp.assignee = _.findWhere($scope.assignArr, {id: $scope.comp.assignee[0]});
                });
        }

        /**
         * save function
         */
        function saveOther(formdata, orderId, shippingAdd) {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    otherCasesService.editOther(formdata).then(function success(response) {
                            var res = {};
                            if (response.data.updateList) {
                                res.editCase = response.data;
                                toastr.success('Other Case has been updated successfully.');
                                $location.path('/customer-service/other-cases');
                                $modalInstance.close(res);
                            }
                            else {
                                toastr.error('ERROR!', 'Other Case has been updated failed.');
                            }
                        }, function error(error) {

                        }
                    );
                }

                else {
                    otherCasesService.addOtherCase(formdata, orderId, shippingAdd)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.newCase) {
                                res.newOther = response.data;
                                $modalInstance.close(res);
                                toastr.success('Other Case has been Create successfully.');
                            } else {
                                toastr.error('ERROR!', 'Other has been create failed.');
                            }

                        }, function error() {
                            toastr.error('ERROR!', 'Other Case has been Create failed.');
                        });
                }
            });

        }


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }

})();



/**
 * Created by Ab
 */

(function () {
    'use strict';

    angular.module("module.customerService").service('otherCasesService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {
        return {

            getCaseList: getCaseList,

            getOtherOrder: getOtherOrder,
            getOtherData: getOtherData,
            editOther: editOther,
            addOtherCase: addOtherCase,
            getAssignList: getAssignList,
            searchOther: searchOther,
            updateOtherStatus: updateOtherStatus,

            //    View Page
            getCaseById: getCaseById,
            getUsers: getUsers,
            saveAttach: saveAttach,
            getAttachmentList: getAttachmentList,
            getNotesList: getNotesList,
            saveNotes: saveNotes,
            getOtherListTicket:getOtherListTicket,
            getStatusList:getStatusList,
        };

        function getCaseList(type, limit,page) {
            var compData = $http.post($global.API_URL + 'api/crm/other/list/', {
                type : type,
                limit: limit,
                page: page
            });
            return compData;
        }



        function getOtherOrder(orderData) {

            var returnData = $http.post(
                $global.API_URL + 'api/crm/order/search/',  {
                    orderData:orderData,
                    type:'OTHER'}, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                });
            return returnData;
        }

        function getOtherData(id) {
            var getData = $http.post($global.API_URL + 'api/crm/other/details/', {id: id});
            return getData;


        }

        function editOther(formdata) {
            var dateStrToSend = formdata.duedate.getFullYear() + '-' + (formdata.duedate.getMonth() + 1) + '-' + formdata.duedate.getDate();
            formdata.duedate = dateStrToSend;
            var updateBy = authService.getUser();
            var editData = $http.post(
                $global.API_URL + 'api/crm/other/edit/', {
                    caseData: formdata,
                    updateBy: updateBy.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                });
            return editData;
        }

        function addOtherCase(formdata, orderId, shippingAdd) {
            var dateStrToSend = formdata.duedate.getFullYear() + '-' + (formdata.duedate.getMonth() + 1) + '-' + formdata.duedate.getDate();
            formdata.duedate = dateStrToSend;
            var created_by = authService.getUser();
            var saveData = $http.post(
                $global.API_URL + 'api/crm/other/create/', {
                    caseData: formdata,
                    orderId: orderId,
                    address: shippingAdd,
                    created: created_by.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                });
            return saveData;
        }

        function getAssignList(order_id) {
            var params = {};
            if (order_id != undefined) {
                params = {order_id: order_id};
            }

            var assignee = $http.post(
                $global.API_URL + 'api/crm/assignee/list/', params);
            return assignee;
        }

        function searchOther(otherSearchCriteria, otherStatus,limit,page) {

            if(otherSearchCriteria.createDateFrom != null) { otherSearchCriteria.createDateFrom = convertDate(otherSearchCriteria.createDateFrom);}
            if(otherSearchCriteria.createDateTo != null) { otherSearchCriteria.createDateTo   = convertDate(otherSearchCriteria.createDateTo);}
            if(otherSearchCriteria.dueDateFrom != null) { otherSearchCriteria.dueDateFrom = convertDate(otherSearchCriteria.dueDateFrom);}
            if(otherSearchCriteria.dueDateTo != null) { otherSearchCriteria.dueDateTo   = convertDate(otherSearchCriteria.dueDateTo); }

            var otherSearchData = $http.post($global.API_URL + 'api/crm/other/searchOther/', {
                data: otherSearchCriteria,
                status: otherStatus,
                limit : limit,
                page  : page
            });

            return otherSearchData;
        }

        function getCaseById(id) {

            var otherSearchData = $http.post($global.API_URL + 'api/crm/other/caseView/', {
                id: id
            });

            return otherSearchData;
        }

        //search users
        function getUsers() {

            var replacementSearchData = $http.post($global.API_URL + 'api/crm/replacement/getUserDetails/', {});

            return replacementSearchData;
        }

        function saveAttach(attachment) {
            return multipartForm.post($global.API_URL + 'api/crm/other/attachment/', attachment);
        }

        function getAttachmentList(id) {

            var attachList = $http.post($global.API_URL + 'api/crm/other/attachment/list/', id);
            return attachList;
        }

        function getNotesList(id) {
            var notesList = $http.post($global.API_URL + 'api/crm/other/notes/list/', id);
            return notesList;
        }

        function saveNotes(notes) {
            return multipartForm.post($global.API_URL + 'api/crm/other/notes/', notes);
        }

        function updateOtherStatus(type, id) {
            var Status = $http.post($global.API_URL + 'api/crm/other/statusUpdate/', {
                status: type,
                other_id: id
            });

            return Status;
        }

        function getOtherListTicket(days)
        {
            var allData = $http.post($global.API_URL + 'api/crm/other/old/', {
                days: days
            });
            return allData;
        }

        function getStatusList() {
            var caseStatus = $http.post(
                $global.API_URL + 'api/crm/case/status/');
            return caseStatus;
        }

        function convertDate(str) {
            var date = new Date(str),
                mnth = ("0" + (date.getMonth()+1)).slice(-2),
                day  = ("0" + date.getDate()).slice(-2);
            return [ date.getFullYear(), mnth, day ].join("-");
        }

    }


})();
/**
 * Created by ab on 10/19/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('otherCasesViewController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'otherCasesService', 'remindersService', 'modalService', 'authService', '$window', '$stateParams', '$location', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, otherCasesService, remindersService, modalService, authService, $window, $stateParams, $location) {

        $scope.caseId = $stateParams.id;
        $scope.getall = getall;
        $scope.newOtherAttachment = newOtherAttachment;
        $scope.addOtherNotes = addOtherNotes;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;
        $scope.editOtherCase = editOtherCase;
        $scope.hideViewAs = true;

        function editOtherCase(compID) {

            if (compID) {
                formeditOpenModal(compID)
            }
            else {
                toastr.error('ID!', 'Missing row id...');
            }
        }

        function formeditOpenModal(compID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/other-cases/newOtherCaseModal.html',
                controller: 'formOtherModalController',
                size: 'lg',
                resolve: {
                    compID: function () {
                        return compID;
                    }
                }
            });

            modalInstance.result.then(function (result) {

                $scope.view[0].status = result.editCase.updateList.status;
                $scope.view[0].priority = result.editCase.updateList.priority;
                $scope.view[0].due_date = result.editCase.updateList.due_date;
                $scope.view[0].assigned_to = result.editCase.updateList.assigned_to;
                //there is no function name getRl mllm
              //  getRl();
            })

        }

        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }

        if ($scope.caseId === '') {
            $location.path("/customer-service/other-cases");
        }
        else {
            getall()
        }

        function getall() {

            $scope.attachments = {};
            $scope.notes = {};

            otherCasesService.getCaseById($scope.caseId).then(function (response) {

                $scope.view = response.data.data.view;
                $scope.notes = response.data.data.notes;
                $scope.attachments = response.data.data.attachments;
                $scope.orders = response.data.data.orders;
                $scope.customer = response.data.data.customer;

                var phone = $scope.customer[0].phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");

                if (response.data.data.view.length === 0) {
                    $location.path("/customer-service/other-cases");
                }

                otherCasesService.getOtherOrder($scope.view[0].orderNo).
                    then(function success(response) {

                        $scope.orderItems = response.data.order_items;

                    });

            }, function (error) {
            });
        };

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };

        /*Attachment add*/
        listAttachment();

        function listAttachment() {
            var caseId = $stateParams.id;
            otherCasesService.getAttachmentList($scope.caseId).then(function success(response)
            {
                $scope.otherAttachments = response.data.attachments;
            });
        }

        function newOtherAttachment() {
            formAttachModal();
        }

        function formAttachModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/other-cases/NewAttachmentModal.html',
                controller: 'otherAttachController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {


                if (result) {

                    if($scope.otherAttachments.length>0){
                        $scope.otherAttachments.unshift(result);
                    }else{
                        $scope.otherAttachments = [];
                        $scope.otherAttachments.push(result);
                    }

                }
               /* $scope.view[0].status = result.editCase.updateList.case_status;
                $scope.view[0].priority = result.editCase.updateList.case_priority;
                $scope.view[0].due_date = result.editCase.updateList.case_due_date;
                $scope.view[0].assigned_to = result.editCase.updateList.case_assigned_to;*/
            });

   /*         modalInstance.result.then(function (result) {
            listAttachment();

            });*/
        }


        listNotes();

        function listNotes() {

            var caseId = $stateParams.id;
            otherCasesService.getNotesList($scope.caseId).then(function success(response) {

                $scope.otherNotes = response.data.notes;
            });
        }

        function addOtherNotes() {
            formNoteModal();
        }

        function formNoteModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/other-cases/NewNotesModal.html',
                controller: 'otherNoteController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {
                listNotes();
            });
        }

        // List reminders
        $scope.listOpen = [];
        $scope.listCompleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsCompleted = setAsCompleted;
        $scope.deleteReminder = deleteReminder;

        remindersService.listReminders({
            parentId: $scope.caseId,
            userId: $scope.user.userId,
            type: 6
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listCompleted = response.completed;
        }, function error(error) {

        });

        function addReminder() {
            formOpenModal()
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.caseId;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 6;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listCompleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listCompleted = $scope.listCompleted;
                    listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listCompleted = listCompleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listCompleted.push(angular.copy(result.data));
                        listCompleted = sortByDate(listCompleted);
                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsCompleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsCompleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listCompleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: response.id}));
                        listCompleted.push(angular.copy(response));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listCompleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: reminderId}));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                });
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };

        // view product specific page
        $scope.showDetail = function (prodId,type) {
            if(type=='UNIT' || type == 'CONFIGURATION'){

                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };
    }// end main controller


    /**
     * CREATE AND EDIT ATTACHMENT MODAL
     * */
    angular.module('module.customerService').controller('otherAttachController',
        ['modalService','$scope', '$modalInstance', 'otherCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', otherAttachController]);

    function otherAttachController(modalService,$scope, $modalInstance, otherCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.otherAttach = {};
        $scope.attachmentSave = attachmentSave;
        $scope.otherAttach.compId = $stateParams.id;
        $scope.otherAttach.createdBy = authService.getToken();

        function attachmentSave(otherAttach) {
            otherCasesService.saveAttach(otherAttach).then(function success(response) {
                if (response.data.other_attachments) {
                    $modalInstance.close(response.data.other_attachments);
                    toastr.success('Attachment has been created successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


    /**
     * CREATE AND EDIT Notes MODAL
     * */
    angular.module('module.customerService').controller('otherNoteController',
        ['modalService','$scope', '$modalInstance', 'otherCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', otherNoteController]);

    function otherNoteController(modalService,$scope, $modalInstance, otherCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.otherNotes = {};
        $scope.saveOtherNotes = saveOtherNotes;
        $scope.otherNotes.compId = $stateParams.id;
        $scope.otherNotes.createdBy = authService.getToken();

        function saveOtherNotes(otherNotes) {
            otherCasesService.saveNotes(otherNotes).then(function success(response) {
                if (response.data) {
                    $modalInstance.close();
                    toastr.success('Note has been created successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


})();
/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('returnCasesController', [
        '$scope', '$http', '$location', 'toastr', '$state', '$global', '$modal', '$rootScope', 'returnCasesService', '$window', controller
    ]);

    function controller($scope, $http, $location, toastr, $state, $global, $modal, $rootScope, returnCasesService, $window) {

        //pagination
        $scope.totalItems = 60;
        $scope.currentPage = 1;
        $scope.maxSize = 5;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.return = {};
        $scope.addReturn = addReturn;
        $scope.editReturnCase = editReturnCase;
        $scope.allUsers = {};
        $scope.returnOrder = {};
        $scope.returnSearch = {};
        $scope.selectUpObj = {};
        $scope.noSearchValue = true;
        $scope.openclass = 'active';
        $scope.resolveclass = '';
        $scope.cancelclass = '';
        $scope.openCases = openCases;
        $scope.listStatus = 'open';
        $scope.getUsers = getUsers();
        $scope.clearList = clearList;

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;

        // return search
        $scope.searchReturn = searchReturn;

        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };
        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'case_id', fieldName: 'ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'case_title', fieldName: 'Title', fieldSearch: 'searchDescription', checked: true},
            {id: 3, field: 'case_status', fieldName: 'Status', fieldSearch: 'searchSku', checked: true},
            /*{id: 4, field: 'case_category', fieldName: 'Escalation', fieldSearch: 'searchDescription', checked: true},*/
            {id: 4, field: 'case_created_date', fieldName: 'Created Date', fieldSearch: 'searchCity', checked: true},
            {id: 5, field: 'case_due_date', fieldName: 'Due Date', fieldSearch: 'searchCity', checked: true},
            {id: 6, field: 'case_assigned_to', fieldName: 'Assign To', fieldSearch: 'searchAddress2', checked: true},
            {id: 7, field: 'case_customer_name', fieldName: 'Customer Name', fieldSearch: 'searchAddress1', checked: true},
            {id: 8, field: 'case_customer_id', fieldName: 'Customer ID', fieldSearch: 'searchAddress1', checked: true},
            {id: 9, field: 'case_po_id', fieldName: 'PO ID', fieldSearch: 'searchItem', checked: true},
            {id: 10, field: 'case_OrderId', fieldName: 'Sales Order ID', fieldSearch: 'searchItem', checked: true},
            {id: 11, field: 'case_incident_count', fieldName: 'No of Incidents', fieldSearch: 'searchItem', checked: true},
            {id: 12, field: 'case_num_days', fieldName: 'No of Days Open', fieldSearch: 'searchItem', checked: true},

            {
                id: 13,
                field: 'case_created_by',
                fieldName: 'Created By',
                fieldSearch: 'SearchCusFirstName',
                checked: true
            }/*,
             {
             id: 8,
             field: 'case_company',
             fieldName: 'Company',
             fieldSearch: '',
             checked: true
             },


             {id: 11, field: 'case_customer_email', fieldName: 'Email', fieldSearch: 'searchCity', checked: false},*/



        ];
        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;
        $scope.viewCase= function(caseId){
            $location.path('/customer-service/return-cases/view/' + caseId );

        }

        //change status of the cases when click on list status dropdown
        $scope.changeStatus = function (type, id) {

            returnCasesService.updateReturnStatus(type, id).then(function (response) {
                $scope.listStatus = type;

                if (type == 'open') {
                    $scope.statusActiveOpen = 'active';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'resolve') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = 'active';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'cancel') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = 'active';
                }


            }, function (error) {
            });
        };


        $scope.searchCases = function () {
            returnCasesService.searchReplacements($scope.replacementSearch, $scope.listStatus).then(function success(response) {
                $scope.return = response.data;
            }, function error(error) {

            });
        };

        $scope.formatDate = function (date) {
            var date = date.split("-").join("/");
            return new Date(date);
        };

        openCases("open"); // Load data first time.

        $scope.pageChanged = function () {
            openCases('open');
        };

        function openCases(type) {
            $rootScope.spinnerTrax = true;
            $scope.statusActiveOpen = 'active';
            $scope.listStatus = type;

            var orderid = '';
            returnCasesService.getReturnList(type, orderid, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $rootScope.spinnerTrax = false;
                $scope.return = response.data.cases;
                $scope.totalItems = response.data.count;
                $scope.allUsers = response.data.users;
            }, function (error) {
                $rootScope.spinnerTrax = false;
            });
        }

        /**
         * angular date picker
         * @param $event
         * @param opened
         */
        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };

        function addReturn() {
            formOpenModal()
        }

        function editReturnCase(returnID, editList) {
            $scope.selectUpObj = editList;
            if (returnID) {
                formOpenModal(returnID)
            } else {
                toastr.error('Compensation ID!', 'Missing row id...');
            }
        }

        function formOpenModal(returnID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/return-cases/newReturnModal.html',
                controller: 'formReturnModalController',
                size: 'lg',
                resolve: {
                    returnID: function () {
                        return returnID;
                    }
                }
            });

            modalInstance.result.then(function (result) {


                if (result.newCase) {

                    if ($scope.return.length > 0) {
                        $scope.return.unshift(result.newCase.newList);
                    } else {
                        $scope.return = [];
                        $scope.return.push(result.newCase.newList);
                    }
                    $scope.totalItems = parseInt($scope.totalItems) + 1;
                }


                if (result.editCase) {

                    var indexA = $scope.return.indexOf($scope.selectUpObj);
                    $scope.return[indexA] = result.editCase.updateList;

                    //console.log($scope.listStatus);
                    //console.log(result.editCase.updateList.case_status);

                    if ($scope.listStatus != result.editCase.updateList.case_status) {
                        var id = result.editCase.updateList.case_id;
                        var victim = _.findWhere($scope.return, {case_id: id});
                        $scope.return = _.without($scope.return, victim);
                        if (parseInt($scope.totalItems) > 0) {
                            $scope.totalItems = parseInt($scope.totalItems) - 1;
                        }
                    } else {
                        $scope.return[indexA] = result.editCase.updateList;
                    }

                }
            });
        }

        // search case return
        function searchReturn() {
            returnCasesService.searchReturn($scope.returnSearch, $scope.listStatus, $scope.pageLimit, $scope.currentPage).then(function (response) {
                $scope.return = response.data.data;
                $scope.totalItems = response.data.count;
                //console.log(response.data);
            }, function (error) {

            });
        }

        function getUsers() {
            returnCasesService.getUsers().then(function success(response) {
                $scope.allUsers = response.data;
            }, function error(error) {
                //toastr.error('ERROR!', error);
            });
        }

        // clear search form inputs
        function clearList() {
            $scope.returnSearch = "";
            openCases('open');
        }


    }//end of main controller


    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.customerService').controller('formReturnModalController',
        ['$scope', 'authService', '$modalInstance', 'returnID', 'returnCasesService', 'toastr', '$window', '$location', '$rootScope', '$timeout', 'modalService', formReturnModalController]);
    function formReturnModalController($scope, authService, $modalInstance, returnID, returnCasesService, toastr, $window, $location, $rootScope, $timeout, modalService) {

        $scope.caseSearch_info = false;
        $timeout(function () {
            $scope.caseSearch_info = true;
        }, 5000);

        $scope.pageStatus = returnID ? 'EDIT' : 'CREATE';
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.returns = {};
        $scope.item = {};
        $scope.saveReturnCases = saveReturn;
        $scope.returnSearch = returnSearchData;
        $scope.saveButtonDisabled = true;
        $scope.caseCategoryArr = [{id:'RESOLUTION', value: 'Resolution'},{id:'ESCALATION',value:'Escalation'}];

        if ($scope.pageStatus == "EDIT") {
            $scope.ro = true;
        }
        $scope.createOptGroups = function (item) {
            return item.name;
        };

        function returnSearchData() {
            $scope.haveReturnOrders = false;
            $scope.isOrderList = false;
            $scope.isEmptyReasults = false;
            $scope.returnData = {};
            var search_val = $scope.returnOrder;
            if (search_val.searchValue == undefined || search_val.catSearch == undefined) {
                toastr.error('Please search a order correctly.', 'ERROR!');
                $scope.exit();
            }
            returnCasesService.getReturnOrder($scope.returnOrder).
            then(function success(response) {
                $scope.haveReturnOrders = true;
                var returnOrderResp = response.data;
                /**
                 * get order data from the list
                 */
                if (returnOrderResp.status == 'list') {
                    $scope.isOrderList = true;
                    $scope.haveReturnOrders = false;
                    $scope.saveButtonDisabled = false;
                    $scope.orderList = returnOrderResp.orderlist;

                    $scope.getListOrder = function (order_id) {
                        returnCasesService.getReturnOrder(order_id).
                        then(function success(response) {


                            var orderResp = response.data;
                            //var itmx = orderResp.productIdArr;//TODO REFAC
                            //$scope.returns. = {orderItemSelect:itmx};
                            $scope.returns.orderItemSelect = orderResp.productIdArr;
                            $scope.order_data = orderResp.order_data;
                            $scope.shipping_add = orderResp.shipping_add;
                            $scope.order_items = orderResp.order_items;
                            $scope.isOrderList = false;
                            $scope.haveReturnOrders = true;
                            $scope.haveSearchSuccess = true;
                            $scope.saveButtonDisabled = false;

                            $scope.getAssignList($scope.order_data.order_id);
                        });
                    }
                }
                else if (returnOrderResp.status == null) {
                    $scope.haveReturnOrders = false;
                    $scope.isOrderList = false;
                    $scope.isEmptyReasults = true;
                }
                //var itmx = response.data.productIdArr;
                //$scope.returns = {orderItemSelect:itmx};
                $scope.returns.orderItemSelect = returnOrderResp.productIdArr;
                $scope.haveSearchSuccess = true;
                $scope.order_data = returnOrderResp.order_data;
                $scope.shipping_add = returnOrderResp.shipping_add;
                $scope.order_items = returnOrderResp.order_items;
                $scope.saveButtonDisabled = false;

                $scope.getAssignList($scope.order_data.order_id);

            }, function error(error) {
                toastr.error('ERROR!');
                $scope.haveSearchSuccess = false;
            });
        }

        $scope.haveSearchSuccess = false;

        /**
         *goto order link
         */
        $scope.viewOrderLink = function (po_id) {
            //alert($state);
            $window.open($state + '/orders/list/view').search({poid: po_id});
        };


        /**
         * country and city load
         */
        returnCasesService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {

        });

        $scope.getCountry = function () {
            returnCasesService.getState($scope.returns.altCountry.code).then(function success(response) {
                $scope.stateArr = response.data.stateArr;
            }, function error() {

            });
        };


        /**
         * get the assign user list
         */
        $scope.getAssignList = function (order_id) {
            returnCasesService.getAssignList(order_id).then(
                function success(response) {

                    $scope.logUser = authService.getUser();
                    $scope.logUserId = $scope.logUser.userId;
                    $scope.assignArr = response.data.assignArr;
                    $scope.returns.assignee = _.findWhere($scope.assignArr, {id: $scope.logUserId});

                    //$scope.comp.assignee={"id":response.data.assignArr[0].id,"name":response.data.assignArr[0].name};
                    $scope.visibilityAr = [{"id": "PLATFORM", "name": "PLATFORM"}, {
                        "id": "VENDOR",
                        "name": "VENDOR"
                    }, {"id": "RETAILER", "name": "RETAILER"}]
                    $scope.returns.visible = {"id": "PLATFORM", "name": "PLATFORM"};
                }, function error() {
                    toastr.error('ERROR!', 'Assignee list retrieval failed.');
                });
        }

        /**
         *
         * get the status dropdown
         */
        returnCasesService.getStatusList().then(
            function success(response) {

                $scope.statusArr = response.data.statusArr;

            }, function error() {
            });


        $scope.inEditMode = true;
        $scope.comp = {};

        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Return Case";
            $scope.buttonLabel = "Update";
        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Return Case";
            $scope.buttonLabel = "Create";
        }

        if ($scope.pageStatus === "EDIT") {
            $scope.saveButtonDisabled = false;
            returnCasesService.getReturnData(returnID)
                .then(function (responce) {
                    $scope.assignArr = responce.data.assignArr;

                    $scope.returns = responce.data.details;
                    $scope.order_data = responce.data.order_data;
                    $scope.order_items = responce.data.orderItems;

                    $scope.returns.due_date = new Date(responce.data.details.due_date);

                    $scope.returns.case_status = _.findWhere($scope.statusArr, {id: responce.data.details.case_status});
                    $scope.returns.visible = responce.data.order_data.visible;
                    $scope.returns.assignee = responce.data.order_data.assignee.id;
                    $scope.returns.assignee = _.findWhere($scope.assignArr, {id: $scope.returns.assignee});
                    $scope.returns.caseCategory = _.findWhere($scope.caseCategoryArr, {id: responce.data.details.case_category});
                    $scope.haveReturnOrders = true;
                    $scope.inEditMode = false;
                });
        }


        function saveReturn(form, orderid, shippingAdd) {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    returnCasesService.setReturnEdit(form)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.updateList) {
                                res.editCase = response.data;
                                toastr.success('Return has been updated successfully.');
                                $location.path('/customer-service/return-cases');
                                $modalInstance.close(res);
                            }
                            else {
                                toastr.error('ERROR!', 'Return has been updated failed.');
                            }
                        }, function error() {
                            toastr.error('ERROR!', 'Return has been updated failed.');
                        });

                }
                else {
                    var address = {};
                    $scope.fillAllAlternate = false;

                    if ($scope.returns.altCountry) {
                        address = {}
                    }
                    else {
                        address = shippingAdd;
                    }
                    /*
                     if(!$scope.returns.altEmail && !$scope.returns.altMobile && !$scope.returns.altZip  ||
                     !$scope.returns.altAddress2 && !$scope.returns.altAddress1  &&
                     !$scope.returns.altCity  && !$scope.returns.altState && !$scope.returns.altCountry) {

                     address = shippingAdd;
                     alert('xxxx');$scope.exit();
                     }
                     else{
                     if($scope.returns.altEmail && $scope.returns.altMobile && $scope.returns.altZip  &&
                     $scope.returns.altAddress2 && $scope.returns.altAddress1  &&
                     $scope.returns.altCity  && $scope.returns.altState && $scope.returns.altCountry ) {

                     alert('yyyy');$scope.exit();
                     address = shippingAdd;
                     }
                     else {
                     toastr.error('All fields are mandatory in Alternation location', 'ERROR!');
                     $scope.fillAllAlternate = true;
                     $scope.exit();
                     }
                     }*/

                    returnCasesService.addReturnCase(form, orderid, address)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.newList) {
                                res.newCase = response.data;
                                toastr.success('Return has been Create successfully.');
                                $modalInstance.close(res);
                            }
                            else {
                                toastr.error('ERROR!', 'Return has been Create failed.');
                            }
                        }, function error() {
                        });
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope[opened] = true;
        };

    }

})();



/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").service('returnCasesService', [
        '$http', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $global, authService, multipartForm) {

        return {

            getReturnOrder  :   getReturnOrder,
            getCountries    :   getCountries,
            getState        :   getState,
            addReturnCase   :   addReturnCase,
            getAssignList   :   getAssignList,
            getReturnList   :   getReturnList,
            getReturnById   :   getReturnById,
            searchReturns   :   searchReturns,
            searchReturn    :   searchReturn,
            getUsers        :   getUsers,
            getReturnData   : getReturnData,
            setReturnEdit   : setReturnEdit,
            getCaseById     :getCaseById,
            saveAttach      : saveAttach,
            getAttachmentList: getAttachmentList,
            getNotesList    : getNotesList,
            saveNotes       : saveNotes,
            updateReturnStatus : updateReturnStatus,
            getOrderItems:getOrderItems,
            getReturnListTicket:getReturnListTicket,
            getStatusList:getStatusList,

        };


        function getReturnOrder(orderData) {
            var returnData = $http.post(
                $global.API_URL + 'api/crm/order/search/', {
                    orderData:orderData,
                    type:'RETURN'}, { headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });
            return returnData;
        }

        /**
         * get country state and city
         */
        function getCountries() {
            var countryCode = $http.post(
                $global.API_URL + 'api/crm/country/');
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post(
                $global.API_URL + 'api/crm/state/',countryCode);
            return stateCode;
        }

        /**
         * save return case
         */
        function addReturnCase(returnsData, orderid, address) {
            var dateStrToSend = returnsData.due_date.getFullYear() + '-' + (returnsData.due_date.getMonth() + 1) + '-' + returnsData.due_date.getDate();
            returnsData.due_date = dateStrToSend;
            var created_by = authService.getUser();
            var saveCase = $http.post(
                $global.API_URL + 'api/crm/returns/create/',{
                    data: returnsData,
                    orderid: orderid,
                    address: address,
                    created: created_by.userId
                },{ headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });
            return saveCase;
        }

        /**
         * get the case assignee list (reg users list)
         */
        function getAssignList(order_id) {
            var params = {};
            if (order_id != undefined) {
                params = {order_id: order_id};
            }

            var assignee = $http.post(
                $global.API_URL + 'api/crm/assignee/list/', params);
            return assignee;
        }


        function getReturnData(returnId) {
            var getData = $http.post(
                $global.API_URL + 'api/crm/return/details/',returnId
            );
            return getData;
        }

        function setReturnEdit(returnData) {
            var dateStrToSend = returnData.due_date.getFullYear() + '-' + (returnData.due_date.getMonth() + 1) + '-' + returnData.due_date.getDate();
            returnData.due_date = dateStrToSend;
            var updateBy = authService.getUser();
            var setData = $http.post(
                $global.API_URL + 'api/crm/return/edit/', {
                    returnData: returnData,
                    updateBy: updateBy.userId
                }, { headers: {
                'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
            }
            });
            return setData;
        }


        //get return list data
        function getReturnList(type,orderid,limit,page)
        {
            var allData = $http.post($global.API_URL + 'api/crm/return/list/', {
                return_type: type,
                order_id:orderid,
                limit : limit,
                page :page
            });
            return allData;
        }

        function getReturnById(id){

            var returnViewData = $http.post($global.API_URL + 'api/crm/return/view/', {
                returnID: id
            });

            return returnViewData;
        }

        function searchReturns(searchReturn,returnstatus)
        {
            var returnSearchData = $http.post($global.API_URL + 'api/crm/return/searchReturns/', {
                data: returnsearchCriteria,
                status:returnstatus
            });

            return returnSearchData;
        }

        // search return list
        function searchReturn(returnSearchCriteria,returnstatus,limit,page)
        {

            if(returnSearchCriteria.createDateFrom  != null) { returnSearchCriteria.createDateFrom  = convertDate(returnSearchCriteria.createDateFrom);}
            if(returnSearchCriteria.createDateTo    != null) { returnSearchCriteria.createDateTo    = convertDate(returnSearchCriteria.createDateTo);}
            if(returnSearchCriteria.dueDateFrom     != null) { returnSearchCriteria.dueDateFrom     = convertDate(returnSearchCriteria.dueDateFrom);}
            if(returnSearchCriteria.dueDateTo       != null) { returnSearchCriteria.dueDateTo       = convertDate(returnSearchCriteria.dueDateTo); }

            var returnSearchData = $http.post($global.API_URL + 'api/crm/return/searchReturnList/', {
                data: returnSearchCriteria,
                status:returnstatus,
                limit : limit,
                page : page

            });


            return returnSearchData;
        }

        //search users
        function getUsers(){
            var userData = $http.post($global.API_URL + 'api/crm/replacement/getUserDetails/', {});
            return userData;
        }

        function getCaseById(id){

            var otherSearchData = $http.post($global.API_URL + 'api/crm/return/case/', {
                id: id
            });

            return otherSearchData;
        }

        function saveAttach(attachment){
            return multipartForm.post($global.API_URL + 'api/crm/return/attachment/', attachment);
        }

        function getAttachmentList(id){
            var attachList = $http.post($global.API_URL + 'api/crm/return/attachment/list/',id);
            return attachList;
        }

        function getNotesList(id){
            var notesList = $http.post($global.API_URL + 'api/crm/return/notes/list/',id);
            return notesList;
        }

        function saveNotes(notes){
            return multipartForm.post($global.API_URL + 'api/crm/return/notes/', notes);
        }

        function updateReturnStatus(type, id)
        {
            var Status = $http.post($global.API_URL + 'api/crm/return/statusUpdate/', {
                status: type,
                return_id: id
            });

            return Status;
        }

        // get order items

        function getOrderItems(id){

            var Status = $http.post($global.API_URL + 'api/crm/return/getOrderItems/',id);

            return Status;
        }

        function getReturnListTicket(days)
        {
            var allData = $http.post($global.API_URL + 'api/crm/return/old/', {
                days: days
            });
            return allData;
        }

        function getStatusList() {
            var caseStatus = $http.post(
                $global.API_URL + 'api/crm/case/status/');
            return caseStatus;
        }

        function convertDate(str) {
            var date = new Date(str),
                mnth = ("0" + (date.getMonth()+1)).slice(-2),
                day  = ("0" + date.getDate()).slice(-2);
            return [ date.getFullYear(), mnth, day ].join("-");
        }

    }


})();
/**
 * Created by ab on 10/19/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('returnCasesViewController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'returnCasesService', 'remindersService', 'modalService', 'authService', '$window', '$stateParams', '$location', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, returnCasesService, remindersService, modalService, authService, $window, $stateParams, $location) {

        $scope.retAttachments = {};
        $scope.returnNotes = {};
        $scope.caseId = $stateParams.id;
        $scope.getall = getall;
        $scope.addReturnAttachment = addReturnAttachment;
        $scope.addRetNotes = addRetNotes;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;
        $scope.editReturnCase = editReturnCase;
        $scope.hideViewAs = true;

        function editReturnCase(returnID) {
            if (returnID) {
                formeditOpenModal(returnID)
            } else {
                toastr.error('Compensation ID!', 'Missing row id...');
            }
        }

        function formeditOpenModal(returnID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/return-cases/newReturnModal.html',
                controller: 'formReturnModalController',
                size: 'lg',
                resolve: {
                    returnID: function () {
                        return returnID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                //openCases("compopen");
            });
        }

        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }

        if ($scope.caseId === '') {
            $location.path("/customer-service/return-cases");
        } else {
            getall();
        }

        function getall() {
            returnCasesService.getCaseById($scope.caseId).then(function (response) {
                $scope.view = response.data.data.view;
                $scope.orders = response.data.data.orders;
                $scope.customer = response.data.data.customer;

                var phone = $scope.customer[0].phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");


                if (response.data.data.view.length === 0) {
                    $location.path("/customer-service/return-cases");
                }

                returnCasesService.getOrderItems($scope.orders[0].order_id).
                    then(function success(response) {
                        //console.log(response.data);
                        $scope.order_items = response.data
                    });

            }, function (error) {
            });


        }



        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };


        /*add Attachment*/

        listAttachment();

        function listAttachment() {
            var caseId = $stateParams.id;
            returnCasesService.getAttachmentList(caseId).then(function success(response) {
                $scope.retAttachments = response.data.attachments;
            });
        }

        function addReturnAttachment() {
            formAttachModal();
        }

        function formAttachModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/return-cases/NewAttachmentModal.html',
                controller: 'retAttachController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachRId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {
                if (result.attachm) {
                    $scope.retAttachments.unshift(result.attachm.data.ret_attachments);
                }

            });
        }

        /*add Notes*/
        listNotes();

        function listNotes() {
            var caseId = $stateParams.id;
            returnCasesService.getNotesList(caseId).then(function success(response) {
                $scope.returnNotes = response.data.notes;
            });
        }

        function addRetNotes() {
            formNoteModal();
        }

        function formNoteModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/return-cases/NewNotesModal.html',
                controller: 'retNoteController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newNote) {
                    $scope.returnNotes.unshift(result.newNote.data.retNotes);
                }
            });
        }


        // List reminders
        $scope.listOpen = [];
        $scope.listCompleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsCompleted = setAsCompleted;
        $scope.deleteReminder = deleteReminder;

        remindersService.listReminders({
            parentId: $scope.caseId,
            userId: $scope.user.userId,
            type: 4
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listCompleted = response.completed;
        }, function error(error) {

        });

        function addReminder() {
            formOpenModal()
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.caseId;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 4;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listCompleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listCompleted = $scope.listCompleted;
                    listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listCompleted = listCompleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listCompleted.push(angular.copy(result.data));
                        listCompleted = sortByDate(listCompleted);
                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsCompleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsCompleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listCompleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: response.id}));
                        listCompleted.push(angular.copy(response));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listCompleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: reminderId}));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                });
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };

        // view product specific page
        $scope.showDetail = function (prodId,type) {

            if(type=='UNIT' || type == 'CONFIGURATION'){

                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };

    } // end main controller


    /**
     * CREATE AND EDIT ATTACHMENT MODAL
     * */
    angular.module('module.customerService').controller('retAttachController',
        ['modalService','$scope', '$modalInstance', 'returnCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', retAttachController]);

    function retAttachController(modalService,$scope, $modalInstance, returnCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.retAttach = {};
        $scope.attachmentSave = attachmentSave;
        $scope.retAttach.compId = $stateParams.id;
        $scope.retAttach.createdBy = authService.getToken();

        function attachmentSave(retAttach) {
            returnCasesService.saveAttach(retAttach).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.attachm = response;
                    $modalInstance.close(res);
                    toastr.success('Attachment has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


    /**
     * CREATE AND EDIT Notes MODAL
     * */
    angular.module('module.customerService').controller('retNoteController',
        ['modalService','$scope', '$modalInstance', 'returnCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', retNoteController]);

    function retNoteController(modalService,$scope, $modalInstance, returnCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.retNotes = {};
        $scope.saveRetNotes = saveRetNotes;
        $scope.retNotes.compId = $stateParams.id;
        $scope.retNotes.createdBy = authService.getToken();

        function saveRetNotes(retNotes) {
            returnCasesService.saveNotes(retNotes).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.newNote = response;
                    $modalInstance.close(res);
                    toastr.success('Notes has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


})();
/**
 * Created by ab on 10/19/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('repCasesViewController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'replacementCasesService', 'remindersService', 'modalService', 'authService', '$window', '$stateParams', '$location', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, replacementCasesService, remindersService, modalService, authService, $window, $stateParams, $location) {

        $scope.repAttachments = {};
        $scope.repNotes = {};
        $scope.caseId = $stateParams.id;
        $scope.getall = getall;
        $scope.user = authService.getUser();
        $scope.API_URL = $global.API_URL;
        $scope.editRepCase = editRepCase;
        $scope.hideViewAs = true;

        function editRepCase(repID) {

            if (repID) {
                formeditOpenModal(repID)
            } else {
                toastr.error('Replacement ID!', 'Missing row id...');
            }

        }

        function formeditOpenModal(repID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/replacement-cases/newReplacementCaseModal.html',
                controller: 'formRepModalController',
                size: 'lg',
                resolve: {
                    repID: function () {
                        return repID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                $scope.view[0].status = result.editCase.updateList.caseStatus;
                $scope.view[0].priority = result.editCase.updateList.isHighPriority;
                $scope.view[0].due_date = result.editCase.updateList.dueDate;
                $scope.view[0].assigned_to = result.editCase.updateList.assignedTo;
            });

        }


        var mainTab = $stateParams.mainTab;
        var subTab = $stateParams.subTab;

        if (mainTab) {
            $scope.mainTab = {};
            if (mainTab == 1) {
                $scope.mainTab = {
                    Details: true
                };
            } else if (mainTab == 2) {
                $scope.mainTab = {
                    Attachments: true
                };
            } else if (mainTab == 3) {
                $scope.mainTab = {
                    Notes: true
                };
            } else if (mainTab == 4) {
                $scope.mainTab = {
                    Cases: true
                };
            } else if (mainTab == 5) {
                $scope.mainTab = {
                    Reminders: true
                };
            }
        } else {
            $scope.mainTab = {
                Details: true
            };
        }

        if (subTab) {
            $scope.subTab = {};
            if (subTab == 1) {
                $scope.subTab = {
                    open: true
                };
            } else if (subTab == 2) {
                $scope.subTab = {
                    completed: true
                };
            }
        } else {
            $scope.subTab = {
                open: true
            };
        }

        if ($scope.caseId === '') {
            $location.path("/customer-service/replacement-cases");
        }
        else {
            getall()
        }


        function getall() {


            replacementCasesService.getCaseById($scope.caseId).then(function (response) {
                //console.log(response);
                $scope.view = response.data.data.view;
                $scope.orders = response.data.data.orders;
                $scope.customer = response.data.data.customer;

                var phone = $scope.customer[0].phone1;
                $scope.phone1 = phone.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");

                if (response.data.data.view.length === 0) {
                    $location.path("/customer-service/replacement-cases");
                }

                replacementCasesService.getReplacementOrder($scope.view[0].orderNo).
                    then(function success(response) {
                        $scope.orderData = response.data.order_data;

                        //$scope.shippingAdd = response.data.shipping_add;
                        $scope.orderItems = response.data.order_items;
                        //console.log($scope.orderItems);
                        //$scope.isOrderList = false;
                        //$scope.haveReturnOrders = true;
                        //$scope.haveSearchSuccess = true;

                    });

            }, function (error) {
            });
        };

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };

        // List reminders
        $scope.listOpen = [];
        $scope.listCompleted = [];
        $scope.addReminder = addReminder;
        $scope.editReminder = editReminder;
        $scope.setAsCompleted = setAsCompleted;
        $scope.deleteReminder = deleteReminder;

        remindersService.listReminders({
            parentId: $scope.caseId,
            userId: $scope.user.userId,
            type: 3
        }).then(function success(response) {
            $scope.listOpen = response.open;
            $scope.listCompleted = response.completed;
        }, function error(error) {

        });

        function addReminder() {
            formOpenModal()
        }

        function editReminder(reminderId, status) {
            if (reminderId) {
                formOpenModal(reminderId, status)
            } else {
                toastr.error('Invalid reminder');
            }
        }

        function formOpenModal(reminderId, status) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/reminders/reminderModal.html',
                controller: 'formReminderModalController',
                size: 'md',
                resolve: {
                    reminderId: function () {
                        return reminderId;
                    },
                    parentId: function () {
                        return $scope.caseId;
                    },
                    userId: function () {
                        return $scope.user.userId;
                    },
                    status: function () {
                        return status;
                    },
                    type: function () {
                        return 3;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.data.id) {

                    var listOpen;
                    var listCompleted;
                    listOpen = $scope.listOpen;
                    listOpen = _.without(listOpen, _.findWhere(listOpen, {id: result.data.id}));

                    listCompleted = $scope.listCompleted;
                    listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: result.data.id}));

                    if (result.data.status == 0) {
                        listOpen.push(angular.copy(result.data));
                        listOpen = sortByDate(listOpen);
                        $scope.listOpen = listOpen;
                        $scope.listCompleted = listCompleted;
                        $scope.subTab = {}; //reset
                        $scope.subTab['open'] = true;
                    } else {
                        listCompleted.push(angular.copy(result.data));
                        listCompleted = sortByDate(listCompleted);
                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;
                    }
                }
            });

        }

        function setAsCompleted(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Set as completed',
                bodyText: 'Are you sure you want to set this reminder as complete?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.setAsCompleted({id: reminderId}).then(function (response) {

                    if (response.status == 1) {

                        var listOpen;
                        var listCompleted;
                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: response.id}));

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: response.id}));
                        listCompleted.push(angular.copy(response));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;
                        $scope.subTab = {}; //reset
                        $scope.subTab['completed'] = true;

                        toastr.success('Reminder has been updated successfully.');
                    } else {
                        toastr.error('Reminder update failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder update failed.');
                });
            });
        }

        function deleteReminder(reminderId) {
            if (!reminderId) {
                toastr.error('Invalid reminder');
                return;
            }
            var modalOptions = {
                closeButtonText: 'Cancel',
                actionButtonText: 'OK',
                headerText: 'Delete reminder',
                bodyText: 'Are you sure you want to delete this reminder?'
            };

            modalService.showModal({}, modalOptions).then(function () {
                remindersService.deleteReminder({id: reminderId}).then(function (response) {
                    if (response.parentId) {
                        var listOpen;
                        var listCompleted;

                        listOpen = $scope.listOpen;
                        listOpen = _.without(listOpen, _.findWhere(listOpen, {id: reminderId}));
                        listOpen = sortByDate(listOpen);

                        listCompleted = $scope.listCompleted;
                        listCompleted = _.without(listCompleted, _.findWhere(listCompleted, {id: reminderId}));
                        listCompleted = sortByDate(listCompleted);

                        $scope.listCompleted = listCompleted;
                        $scope.listOpen = listOpen;

                        toastr.success('Reminder has been deleted successfully.');
                    } else {
                        toastr.error('Reminder delete failed.');
                    }
                }, function error(error) {
                    toastr.error('Reminder delete failed.');
                });
            });
        }

        /*
         * Sort by timestamp
         * ------------------------------
         * */
        function sortByDate(arr) {
            if (arr.length > 0) {
                //It will always return in a ascending list:
                arr = _.sortBy(arr, function (o) {
                    return o.date.timestamp;
                });
                //But you can use the .reverse method to get it descending:
                //arr.reverse();
                return arr;
            }
        }


        /*attachment*/
        $scope.addRepAttachment = addRepAttachment;

        listAttachment();

        function listAttachment() {
            var caseId = $stateParams.id;
            replacementCasesService.getAttachmentList(caseId).then(function success(response) {
                $scope.repAttachments = response.data.attachments;
            });
        }

        function addRepAttachment() {
            formAttachModal();
        }

        function formAttachModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/replacement-cases/NewAttachmentModal.html',
                controller: 'repAttachController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                        return attachId;
                    }*/
                }
            });

            modalInstance.result.then(function (result) {
                if (result.attarep) {
                    $scope.repAttachments.unshift(result.attarep);
                }
            });
        }

        /*notes*/

        $scope.repAddNotes = repAddNotes;

        listNotes();

        function listNotes() {
            var caseId = $stateParams.id;
            replacementCasesService.geNotesList(caseId).then(function success(response) {
                $scope.repNotes = response.data.notes;
            });
        }

        function repAddNotes() {
            formNoteModal();
        }

        function formNoteModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/replacement-cases/NewNotesModal.html',
                controller: 'repNoteController',
                size: 'md',
                resolve: {
                    /*attachId: function () {
                     return attachId;
                     }*/
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newNote) {
                    $scope.repNotes.unshift(result.newNote.data.retNotes);
                    //  console.log(result.newNote.data.notes);
                }
            });
        }

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };


        // view product specific page
        $scope.showDetail = function (prodId,type) {

            if(type=='UNIT' || type == 'CONFIGURATION'){

                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };



    } //end main controller

    /**
     * CREATE AND EDIT ATTACHMENT MODAL
     * */
    angular.module('module.customerService').controller('repAttachController',
        ['modalService','$scope', '$modalInstance', 'replacementCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', repAttachController]);

    function repAttachController(modalService,$scope, $modalInstance, replacementCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.repAttach = {};
        $scope.attachmentSave = attachmentSave;
        $scope.repAttach.compId = $stateParams.id;
        $scope.repAttach.createdBy = authService.getToken();

        function attachmentSave(repAttach) {
                replacementCasesService.saveAttach(repAttach).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.attarep = response.data.ret_attachments;
                    $modalInstance.close(res);
                    toastr.success('Attachment has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }


    /**
     * CREATE AND EDIT Notes MODAL
     * */
    angular.module('module.customerService').controller('repNoteController',
        ['modalService','$scope', '$modalInstance', 'replacementCasesService', 'toastr', '$window', '$stateParams', 'authService','$rootScope', repNoteController]);

    function repNoteController(modalService,$scope, $modalInstance, replacementCasesService, toastr, $window, $stateParams, authService,$rootScope) {

        $scope.repNotes = {};
        $scope.saveRepNotes = saveRepNotes;
        $scope.repNotes.compId = $stateParams.id;
        $scope.repNotes.createdBy = authService.getToken();

        function saveRepNotes(repNotes) {
            replacementCasesService.saveNotes(repNotes).then(function success(response) {
                var res = {};
                if (response.data) {
                    res.newNote = response;
                    $modalInstance.close(res);
                    toastr.success('Note has been Create successfully.');
                }
            });
        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }




})();
/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';

    angular.module("module.customerService").controller('replacementCasesController', [
        '$location','$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'replacementCasesService', '$window', controller
    ]);

    function controller($location,$scope, $http, toastr, $state, $global, $modal, $rootScope, replacementCasesService, $window) {

        //pagination
        $scope.totalItems = 60;
        $scope.currentPage = 1;
        $scope.maxSize = 5;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;


        $scope.addReplacementCase = addRepCase;
        $scope.editRepCase = editRepCase;
        $scope.addData = {};
        $scope.allUsers = {};
        $scope.replacementSearch = {
            "highPriority": null,
            "createDateFrom": null,
            "createDateTo": null,
            "dueDateFrom": null,
            "dueDateTo": null,
            "assignee": null,
            "caseId": null,
            "keyWords": null
        };

        // Table fields dropdown menu show/hide
        $scope.tableEditor = false;

        $scope.showTableEditor = function () {
            $scope.tableEditor = true;
        };
        //Table fields array
        $scope.displayFields = [

            {id: 1, field: 'id', fieldName: 'Case ID', fieldSearch: 'searchOrderID', checked: true},
            {id: 2, field: 'title', fieldName: 'Title', fieldSearch: 'searchDescription', checked: true},
            {id: 3, field: 'caseStatus', fieldName: 'Status', fieldSearch: 'searchSku', checked: true},
            /*{id: 4, field: 'case_category', fieldName: 'Escalation', fieldSearch: 'searchDescription', checked: true},*/
            {id: 4, field: 'createdAt', fieldName: 'Created Date', fieldSearch: 'searchCity', checked: true},
            {id: 5, field: 'dueDate', fieldName: 'Due Date', fieldSearch: 'searchCity', checked: true},
            {id: 6, field: 'assignedTo', fieldName: 'Assign To', fieldSearch: 'searchAddress2', checked: true},
            {id: 7, field: 'customerName', fieldName: 'Customer Name', fieldSearch: 'searchAddress1', checked: true},
            {id: 8, field: 'customer_id', fieldName: 'Customer ID', fieldSearch: 'searchAddress1', checked: true},
            {id: 9, field: 'case_po_id', fieldName: 'PO ID', fieldSearch: 'searchItem', checked: true},
            {id: 10, field: 'orderNumber', fieldName: 'Sales Order ID', fieldSearch: 'searchItem', checked: true},
            {id: 11, field: 'case_incident_count', fieldName: 'No of Incidents', fieldSearch: 'searchItem', checked: true},
            {id: 12, field: 'case_num_days', fieldName: 'No of Days Open', fieldSearch: 'searchItem', checked: true},
            {id: 13, field: 'createdBy', fieldName: 'Created By', fieldSearch: 'SearchCusFirstName', checked: true}

        ];
        $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
            return displayField.checked;
        });

        $scope.doneTableEditor = function () {
            $scope.checkedFields = $scope.displayFields.filter(function (displayField) {
                return displayField.checked;
            });
            $scope.tableEditor = false;
        };

        $scope.sort = function (field) {
            $scope.sort.field = field;
            $scope.sort.order = !$scope.sort.order;
        };

        $scope.sort.field = $scope.displayFields[0].field;

        $scope.sort.order = false;
        $scope.viewCase= function(caseId){
            $location.path('/customer-service/replacement-cases/view/' + caseId );

        }


        $scope.listData = {};
        $scope.listReplacementStatus = "open";
        $scope.selectUpObj = {};
        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 5;
        $scope.maxSize = 5;

        // List Replacements
        $scope.openReplacement = openReplacement;
        $scope.resolvedReplacement = resolvedReplacement;
        $scope.cancelReplacement = cancelReplacement;

        $scope.openReplacementDetails = true;
        $scope.resolvedReplacementDetails = false;
        $scope.cancelReplacementDetails = false;

        $rootScope.openRep = openReplacement('open');
        $scope.searchReplacement = searchReplacement;
        $scope.clearList = clearList;
        //$scope.getUsers = getUsers();TODO REMOVE


        //change status of the cases when click on list status dropdown
        $scope.changeStatus = function (type, id) {

            replacementCasesService.updateReplacementStatus(type, id).then(function (response) {
                $scope.listReplacementStatus = type;

                if (type == 'open') {
                    $scope.statusActiveOpen = 'active';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'resolve') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = 'active';
                    $scope.statusActiveCancel = '';
                }
                if (type == 'cancel') {
                    $scope.statusActiveOpen = '';
                    $scope.statusActiveResolve = '';
                    $scope.statusActiveCancel = 'active';
                }


            }, function (error) {
            });
        };

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };

        function clearList() {
            $scope.replacementSearch = null;
            listReplacements();
        }


        function addRepCase() {
            formOpenModal()
        }


        function editRepCase(repID, editList) {
            $scope.selectUpObj = editList;
            if (repID) {
                formOpenModal(repID)
            } else {
                toastr.error('Replacement ID!', 'Missing row id...');
            }

        }

        function formOpenModal(repID) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/customer-service/replacement-cases/newReplacementCaseModal.html',
                controller: 'formRepModalController',
                size: 'lg',
                resolve: {
                    repID: function () {
                        return repID;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if (result.newRep) {//replacements

                    if ($scope.listData.length > 0) {
                        $scope.listData.unshift(result.newRep.newCase);
                    } else {
                        $scope.listData = [];
                        $scope.listData.push(result.newRep.newCase);
                    }
                    $scope.totalItems = parseInt($scope.totalItems) + 1;
                }
                if (result.editCase) {
                    var indexA = $scope.listData.indexOf($scope.selectUpObj);


                    if ($scope.listReplacementStatus != result.editCase.updateList.caseStatus) {
                        var id = result.editCase.updateList.id;
                        var victim = _.findWhere($scope.listData, {id: id});
                        $scope.listData = _.without($scope.listData, victim);
                        if (parseInt($scope.totalItems) > 0) {
                            $scope.totalItems = parseInt($scope.totalItems) - 1;
                        }
                    } else {
                        $scope.listData[indexA] = result.editCase.updateList;

                    }

                }
            });

        }


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };


        // function to load open Replacements
        function openReplacement(caseStatus) {
            $scope.statusActiveOpen = 'active';
            $scope.listReplacementStatus = caseStatus;
            listReplacements();
            $scope.openReplacementDetails = true;
            $scope.resolvedReplacementDetails = false;
            $scope.cancelReplacementDetails = false;

        }

        // function to load open Replacements
        function resolvedReplacement() {
            listReplacements();
            $scope.openReplacementDetails = false;
            $scope.resolvedReplacementDetails = true;
            $scope.cancelReplacementDetails = false;
        }

        // function to load open Replacements
        function cancelReplacement() {
            listReplacements();
            $scope.openReplacementDetails = false;
            $scope.resolvedReplacementDetails = false;
            $scope.cancelReplacementDetails = true;
        }

        $scope.pageChanged = function () {
            searchReplacement();
        };

        // function to load the list of Replacements
        function listReplacements() {
            $rootScope.spinnerTrax = true;
            $scope.listData = "";
            var ordID = '';
            replacementCasesService.listReplacements($scope.listReplacementStatus, ordID, $scope.pageLimit, $scope.currentPage)
                .then(function success(response) {
                    $rootScope.spinnerTrax = false;
                    $scope.listData = response.data.cases;
                    $scope.allUsers = response.data.users;
                    $scope.totalItems = response.data.count;
                }, function (error) {
                    $rootScope.spinnerTrax = false;
                });
        }

        // search Replacement
        function searchReplacement() {
            $scope.listData = [];
            replacementCasesService.searchReplacements($scope.replacementSearch, $scope.listReplacementStatus, $scope.pageLimit, $scope.currentPage).then(function success(response) {

                $scope.listData = response.data.cases;
                $scope.totalItems = response.data.count;

            }, function error(error) {
                // toastr.error('ERROR!', 'Replacement has been Create failed.');
            });
        }

        // search
        function getUsers() {
            replacementCasesService.getUsers().then(function success(response) {
                $scope.allUsers = response.data;
            }, function error(error) {
                toastr.error('ERROR!', 'Replacement has been Create failed.');
            });
        }

        $scope.greaterThan = function (prop, val) {
            return function (item) {
                return item[prop] > '2015-11-10';
            }
        }

    }


    // end of main controller
    /**
     * CREATE AND EDIT MODAL
     * */

    angular.module('module.customerService').controller('formRepModalController',
        ['$scope', 'authService', '$modalInstance', 'repID', 'replacementCasesService', 'compensationCasesService', 'toastr', '$window', '$location', '$rootScope', '$timeout', 'modalService', formRepModalController]);
    function formRepModalController($scope, authService, $modalInstance, repID, replacementCasesService, compensationCasesService, toastr, $window, $location, $rootScope, $timeout, modalService) {

        $scope.caseSearch_info = false;
        $timeout(function () {
            $scope.caseSearch_info = true;
        }, 5000);

        $scope.pageStatus = repID ? 'EDIT' : 'CREATE';
        $scope.minDate = $scope.minDate ? null : new Date();
        $scope.saveReplacement = saveReplacement
        $scope.replacementForm = {};
        $scope.replacementSearchFrom = {};
        $scope.orderItems = {};
        $scope.orderItemQty = {};
        $scope.cBox = {};
        $scope.repFrom = {};
        $scope.replacementPOData = {}
        $scope.saveButtonDisabled = true;
        $scope.caseCategoryArr = [{id:'RESOLUTION', value: 'Resolution'},{id:'ESCALATION',value:'Escalation'}];

        if ($scope.pageStatus == "EDIT") {
            $scope.ro = true;
        }

        $scope.confirmReplacementOrder = confirmReplacementOrder;

        $scope.changeMe = function (id) {
            //alert(id);
        }

        $scope.createOptGroups = function (item) {
            return item.name;
        };


        $scope.searchData1 = false;
        $scope.searchData2 = false;

        $scope.endUserLocation = endUserLocation;
        $scope.daLocation = daLocation;
        $scope.alternateLocation = alternateLocation;

        $scope.endUserLocationDetails = true;
        $scope.daLocationDetails = false;
        $scope.alternateLocationDetails = false;


        $scope.searchCriteria = [
            {id: 0, name: "Order ID"},
            {id: 1, name: "Confirmation ID"},
            {id: 2, name: "Tracking ID"},
            {id: 3, name: "Customer Name"},
            {id: 4, name: "Product Name"}
        ];

        $scope.replacementSearchFrom.category = $scope.searchCriteria[0]; // this code is to avoid "undefined" option when load the option in select box
        $scope.searchDataMaster = searchDataMaster;
        $scope.imChanged = imChanged;

        $scope.imChanged = function (data) {
            //console.log($scope.replacementForm.orderItems);
        };


        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


        $scope.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;
        };


        // function to search data
        function searchDataMaster() {
            /**
             * search validation
             */
            var search_val = $scope.repFrom;


            if (search_val.searchValue == undefined || search_val.catSearch == undefined) {
                toastr.error('Please search a order correctly.', 'ERROR!');
                $scope.exit();
            }

            $scope.isEmptyReasults = false;
            $scope.isOrderList = false;
            $scope.haveReturnOrders = false;

            replacementCasesService.getReplacementOrder(search_val)
                .then(function success(response) {

                    $scope.shippingAdd = response.data.shipping_add;

                    $scope.haveReturnOrders = true;

                    if (response.data.status == 'list') {
                        $scope.isOrderList = true;
                        $scope.orderList = response.data.orderlist;
                        $scope.haveReturnOrders = false;
                        $scope.saveButtonDisabled = true;
                        var itmx = [];
                        $scope.getListOrder = function (order_id) {
                            replacementCasesService.getReplacementOrder(order_id).
                            then(function success(response) {
                                itmx = response.data.productIdArr;
                                //$scope.replacementForm = {orderItemSelect:itmx};
                                $scope.replacementForm.orderItemSelect = itmx;
                                $scope.orderData = response.data.order_data;
                                $scope.shippingAdd = response.data.shipping_add;
                                $scope.orderItems = response.data.order_items;
                                $scope.isOrderList = false;
                                $scope.haveReturnOrders = true;
                                $scope.haveSearchSuccess = true;
                                $scope.saveButtonDisabled = false;

                                $scope.getAssignList($scope.orderData.order_id);

                            });
                        }
                    } else if (response.data.status == null) {
                        $scope.saveButtonDisabled = true;
                        $scope.isEmptyReasults = true;
                        $scope.isOrderList = false;
                        $scope.haveReturnOrders = false;
                    }
                    itmx = response.data.productIdArr;
                    if (itmx) {
                        //$scope.replacementForm = {orderItemSelect:itmx};
                        $scope.replacementForm.orderItemSelect = itmx;
                    }
                    $scope.orderData = response.data.order_data;
                    $scope.shippingAdd = response.data.shipping_add;
                    $scope.orderItems = response.data.order_items;
                    $scope.saveButtonDisabled = false;

                    $scope.getAssignList($scope.orderData.order_id);

                }, function error(error) {
                    toastr.error('ERROR!', 'Replcement has been Create failed.');
                });

        }

        // save replacement data

        /**
         * country and city load
         */
        replacementCasesService.getCountries().then(function success(response) {
            $scope.countryArr = response.data.countryArr;
        }, function error() {

        });

        $scope.getCountry = function () {
            replacementCasesService.getState($scope.replacementForm.altCountry.code).then(function success(response) {
                $scope.stateArr = response.data.stateArr;
            }, function error() {

            });
        };


        /**
         * save function
         */
        function saveReplacement(formdata, orderId, shippingAdd) {

            modalService.showModal({}, common.getSaveMsgOptions()).then(function () {
                if ($scope.pageStatus === "EDIT") {
                    replacementCasesService.setReplacementEdit($scope.replacementForm).then(function success(response) {
                            var res = {};
                            if (response.data.updateList) {
                                res.editCase = response.data;
                                toastr.success('Replacement has been updated successfully.');
                                $location.path('/customer-service/replacement-cases');
                                $modalInstance.close(res);

                            }
                            else {
                                toastr.error('ERROR!', 'Replacement has been updated failed.');
                            }
                        }, function error(error) {

                        }
                    );
                } else {
                    replacementCasesService.addReplacementCase($scope.replacementForm, orderId, $scope.shippingAdd)
                        .then(function success(response) {
                            var res = {};
                            if (response.data.newCase) {
                                res.newRep = response.data;
                                toastr.success('Replacement has been create successfully.');
                                $modalInstance.close(res);
                            } else {
                                toastr.error('ERROR!', 'Replacement has been create failed.');
                            }

                        }, function error() {
                            toastr.error('ERROR!', 'Replacement has been Create failed.');
                        });
                }
            });

        }


        // function to load end user location
        function endUserLocation() {
            $scope.endUserLocationDetails = true;
        }

        // function to load DA location
        function daLocation() {
            $scope.daLocationDetails = true;
        }

        // function to load Alternative location
        function alternateLocation() {
            $scope.alternateLocationDetails = true;
        }

        function imChanged() {
            //alert(replacementSearchFrom.orderItemQty);
        }

        /**
         * get the assign user list
         */
        $scope.getAssignList = function (order_id) {
            replacementCasesService.getAssignList(order_id).then(
                function success(response) {

                    $scope.logUser = authService.getUser();
                    $scope.logUserId = $scope.logUser.userId;
                    $scope.assignArr = response.data.assignArr;
                    $scope.replacementForm.assignee = _.findWhere($scope.assignArr, {id: $scope.logUserId});

                }, function error() {
                    toastr.error('ERROR!', 'Assignee list retrieval failed.');
                });
        }

        /**
         *
         * get the status dropdown
         */
        compensationCasesService.getStatusList().then(
            function success(response) {

                $scope.statusArr = response.data.statusArr;
                $scope.replacementForm.case_status = {
                    "id": response.data.statusArr[0].id,
                    "value": response.data.statusArr[0].value
                };

            }, function error() {
            });


        $scope.inEditMode = true;
        $scope.comp = {};

        if ($scope.pageStatus == "EDIT") {
            $scope.modalTitle = "Edit Replacement Case";
            $scope.buttonLabel = "Update";
        }
        else if ($scope.pageStatus == "CREATE") {
            $scope.modalTitle = "Create Replacement Case";
            $scope.buttonLabel = "Create";
        }

        if ($scope.pageStatus === "EDIT") {
            replacementCasesService.getReplacementData(repID)
                .then(function (responce) {
                    //console.log(responce.data.details);
                    $scope.assignArr = responce.data.assignArr;

                    $scope.replacementForm = responce.data.details;
                    $scope.replacementForm.dueDate = new Date(responce.data.details.dueDate);


                    $scope.orderData = responce.data.order_data;
                    $scope.orderItems = responce.data.orderItems;
                    $scope.replacementPOData = responce.data.purchaseOrders;
                    $scope.replacementForm.visible = responce.data.order_data.visible;
                    $scope.replacementForm.assignee = responce.data.order_data.assignee.id;
                    $scope.replacementForm.assignee = _.findWhere($scope.assignArr, {id: $scope.replacementForm.assignee});
                    $scope.replacementForm.case_status = _.findWhere($scope.statusArr, {id: $scope.replacementForm.status});
                    $scope.replacementForm.caseCategory = _.findWhere($scope.caseCategoryArr, {id: responce.data.order_data.case_category});
                    $scope.haveReturnOrders = true;
                    $scope.inEditMode = false;
                });
        }


        function confirmReplacementOrder() {
            replacementCasesService.confirmReplacementCase($scope.replacementForm.repPOId, $scope.replacementForm.id)
                .then(function success(responce) {

                    $modalInstance.dismiss('cancel');
                    toastr.success('Replacement has been Confirmed successfully.');

                }, function error() {
                    toastr.error('ERROR!', 'Replacement has been Confirm failed.');
                });
        }

        $scope.formatDate = function (date) {
            if (date) {
                var date = date.split("-").join("/");
                var dateOut = new Date(date);
                return dateOut;
            }
        };
    }

})();


/**
 * Created by maduka on 9/28/15.
 */

(function () {
    'use strict';
    angular.module("module.customerService").service('replacementCasesService', [
        '$http', '$global', 'authService', 'multipartForm', service
    ]).filter('dateRange', function () {
        return function (records, from, to) {
            return records.filter(function (record) {
                return record.Date >= from && record.Date <= to;
            });
        }
    });

    function service($http, $global, authService, multipartForm) {

        return {
            createReplacement: createReplacement,
            getSingleDataFromService: getSingleDataFromService,
            getMultipleDataFromService: getMultipleDataFromService,
            listReplacements: listReplacements,
            searchReplacements: searchReplacements,
            getUsers: getUsers,
            getReplacementById: getReplacementById,
            getReplacementOrder: getReplacementOrder,
            addReplacementCase: addReplacementCase,
            getAssignList: getAssignList,
            setReplacementEdit: setReplacementEdit,
            getReplacementData: getReplacementData,
            getCaseById: getCaseById,
            updateReplacementStatus: updateReplacementStatus,
            saveAttach: saveAttach,
            getAttachmentList: getAttachmentList,
            saveNotes: saveNotes,
            geNotesList: geNotesList,
            getCountries: getCountries,
            getState: getState,
            getReplacementListTicket: getReplacementListTicket,
            confirmReplacementCase: confirmReplacementCase

        };

        function createReplacement(replacementData, searchData) {

            var replacementInsertData = $http.post($global.API_URL + 'api/crm/replacement/create/', {
                data: replacementData,
                searchData: searchData,
                userID: authService.getToken()
            });

            return replacementInsertData;
        }

        function getSingleDataFromService(searchCriteria) {

            var replacementSearchData = $http.post($global.API_URL + 'api/crm/replacement/getSingleData/', {
                data: searchCriteria
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return replacementSearchData;
        }

        function getMultipleDataFromService(searchCriteria) {

            var replacementSearchData = $http.post($global.API_URL + 'api/crm/replacement/getMultipleData/', {
                data: searchCriteria
            });

            return replacementSearchData;
        }

        // list the replacement Data
        function listReplacements(replacementStatus, ID, limit, page) {
            if (replacementStatus == null) {
                replacementStatus = "open";
            }
            var replacementListData = $http.post($global.API_URL + 'api/crm/replacement/listReplacements/', {
                data: replacementStatus,
                order_id: ID,
                limit: limit,
                page: page
            });
            return replacementListData;
        }

        //search replacement list
        function searchReplacements(replacementSearchCriteria, replacementStatus , limit ,page) {

            if(replacementSearchCriteria.createDateFrom != null) { replacementSearchCriteria.createDateFrom = convertDate(replacementSearchCriteria.createDateFrom);}
            if(replacementSearchCriteria.createDateTo != null) { replacementSearchCriteria.createDateTo   = convertDate(replacementSearchCriteria.createDateTo);}
            if(replacementSearchCriteria.dueDateFrom != null) { replacementSearchCriteria.dueDateFrom = convertDate(replacementSearchCriteria.dueDateFrom);}
            if(replacementSearchCriteria.dueDateTo != null) { replacementSearchCriteria.dueDateTo   = convertDate(replacementSearchCriteria.dueDateTo); }

            var replacementSearchData = $http.post($global.API_URL + 'api/crm/replacement/searchReplacements/', {
                data: replacementSearchCriteria,
                status: replacementStatus,
                limit : limit,
                page : page
            });

            return replacementSearchData;
        }

        //search users
        function getUsers() {

            var replacementSearchData = $http.post($global.API_URL + 'api/crm/replacement/getUserDetails/', {});

            return replacementSearchData;
        }

        function getReplacementById(ID) {

            var replacementViewData = $http.post($global.API_URL + 'api/crm/replacement/view/', {
                replacementID: ID,
            });

            return replacementViewData;
        }


        // search for create replacement

        function getReplacementOrder(orderData) {

            var returnData = $http.post(
                $global.API_URL + 'api/crm/order/search/',  {
                    orderData:orderData,
                    type:'REPLACEMENT'}, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                }
            );

            return returnData;

        }


        function addReplacementCase(formdata, orderId, shippingAdd) {
            var dateStrToSend = formdata.dueDate.getFullYear() + '-' + (formdata.dueDate.getMonth() + 1) + '-' + formdata.dueDate.getDate();
            formdata.dueDate = dateStrToSend;
            var created_by = authService.getUser();
            var saveData = $http.post(
                $global.API_URL + 'api/crm/replacement/create/', {
                    caseData: formdata,
                    orderId: orderId,
                    address: shippingAdd,
                    created: created_by.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
            return saveData;
        }

        /**
         * get the case assignee list (reg users list)
         */
        function getAssignList(order_id) {
            var params = {};
            if (order_id != undefined) {
                params = {order_id: order_id};
            }

            var assignee = $http.post(
                $global.API_URL + 'api/crm/assignee/list/', params);
            return assignee;
        }


        function setReplacementEdit(returnData) {
            var dateStrToSend = returnData.dueDate.getFullYear() + '-' + (returnData.dueDate.getMonth() + 1) + '-' + returnData.dueDate.getDate();
            returnData.dueDate = dateStrToSend;
            var updateBy = authService.getUser();
            var setData = $http.post(
                $global.API_URL + 'api/crm/replacement/edit/', {
                    returnData: returnData,
                    updateBy: updateBy.userId
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
            return setData;
        }

        function getReplacementData(returnId) {
            var getData = $http.post(
                $global.API_URL + 'api/crm/replacement/details/', returnId
            );
            return getData;
        }


        function getCaseById(id) {

            var otherSearchData = $http.post($global.API_URL + 'api/crm/replacement/caseView/', {
                id: id
            });

            return otherSearchData;
        }


        function updateReplacementStatus(type, id) {
            var Status = $http.post($global.API_URL + 'api/crm/replacement/statusUpdate/', {
                status: type,
                rep_id: id
            });

            return Status;
        }

        function getAttachmentList(id) {
            var attachList = $http.post($global.API_URL + 'api/crm/replacement/attachment/list/', id);
            return attachList;
        }

        function geNotesList(id) {
            var notesList = $http.post($global.API_URL + 'api/crm/replacement/notes/list/', id);
            return notesList;
        }

        function saveAttach(attachment) {
            return multipartForm.post($global.API_URL + 'api/crm/replacement/attachment/', attachment);
        }

        function saveNotes(notes) {
            return multipartForm.post($global.API_URL + 'api/crm/replacement/notes/', notes);
        }

        /**
         * get country state and city
         */
        function getCountries() {
            var countryCode = $http.post(
                $global.API_URL + 'api/crm/country/');
            return countryCode;
        }

        function getState(countryCode) {
            var stateCode = $http.post(
                $global.API_URL + 'api/crm/state/', countryCode);
            return stateCode;
        }


        function getReplacementListTicket(days) {
            var allData = $http.post($global.API_URL + 'api/crm/replacement/old/', {
                days: days,
            });
            return allData;
        }

        function confirmReplacementCase(orderId, repId) {
            //console.log(repId);
            var allData = $http.post($global.API_URL + 'api/crm/replacement/confirm/', {
                orderId: orderId,
                repId: repId
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });
            return allData;
        }

        function convertDate(str) {
            var date = new Date(str),
                mnth = ("0" + (date.getMonth()+1)).slice(-2),
                day  = ("0" + date.getDate()).slice(-2);
            return [ date.getFullYear(), mnth, day ].join("-");
        }

    }

})();
/**
 * Created by thamira on 10/17/15.
 */
(function () {
    'use strict';

    var mainApp = angular.module("module.productsCatalogue");


    mainApp.controller('productCategoryController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'productCategoryService', '$window', controller
    ]);


    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, productCategoryService, $window) {


        $scope.addProductCategory = addProductCategory;
        $scope.listCategories = listCategories;
        $scope.editProductCategory = editProductCategory;
        $scope.searchProductCategory = searchProductCategory;
        $scope.productCategorySearch = {};
        $scope.addProductCategory = addProductCategory;
        $scope.uploadCSV = uploadCSV;
        $scope.selectUpObj = {};

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 10;
        $scope.maxSize = 10;

        listCategories();

        $scope.pageChanged = function () {
            searchProductCategory();
        };

        $scope.clearData = function(){
            $scope.productCategorySearch = {};
            listCategories();
        }

        $scope.open = function ($event, opened) {

            $event.preventDefault();
            $event.stopPropagation();
            $scope[opened] = true;

        };


        function addProductCategory() {

            formOpenModal();

        }

        function uploadCSV() {
            uploadCSVModel()
        }

        //

        function editProductCategory(catId, data) {

            $scope.selectUpObj = data;

            if (catId) {

                formOpenModal(catId);

            } else {

                toastr.error('Replacement ID!', 'Missing row id...');

            }

        }

        function formOpenModal(catId) {


            var modalInstance = $modal.open({

                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/products-catalogue/product-category/newCategoryModal.html',
                controller: 'formProductCategoryController',
                size: 'md',
                resolve: {
                    repID: function () {
                        return catId;
                    }
                }

            });

            modalInstance.result.then(function (result) {
                
                if (result.NewObject.FStatus == 'insert') {

                    $scope.catCount = result.count;
                    $scope.categoryLists.unshift(result.NewObject);

                } else if (result.NewObject.FStatus == 'edit') {

                    var indexA = $scope.categoryLists.indexOf($scope.selectUpObj);
                    $scope.categoryLists[indexA] = result.NewObject;

                }

            });
        }

        //UploadCSV Model
        function uploadCSVModel(UploadCSVId) {

            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/products-catalogue/product-category/newCategoryUploadCSVModel.html',
                controller: 'formProductCategoryController',
                size: 'md',
                resolve: {
                    repID: function () {
                        return UploadCSVId;

                    }

                }
            });

            modalInstance.result.then(function () {
                listCategories();
            });

        }


        // list product categories
        function listCategories() {
            $rootScope.spinnerTrax = true;
            productCategoryService.listCategories({

                limit: $scope.pageLimit,
                page: $scope.currentPage

            }).then(function success(response) {

                $rootScope.spinnerTrax = false;
                $scope.categoryLists = response.data.data;
                $scope.totalItems = response.data.count;
                $scope.catCount = response.data.count;

            }, function error() {

                $rootScope.spinnerTrax = false;
                toastr.error('ERROR!', 'Product Category has been Create failed.');


            });
        }

        // set categories for search
        productCategoryService.setParentCategories()

            .then(function success(response) {

                $scope.searchCats = response.data.data;

            }, function error() {

                toastr.error('ERROR!', 'Product Category has been Create failed.');

            });

        // set levels for search
        productCategoryService.setLevels()

            .then(function success(response) {

                $scope.levels = response.data;

            }, function error() {

                toastr.error('ERROR!', 'Product Category has been Create failed.');

            });

        // search product category data
        function searchProductCategory() {

            productCategoryService.searchProductCategory($scope.productCategorySearch, $scope.pageLimit, $scope.currentPage)
                .then(function success(response) {

                    $scope.categoryLists = response.data.data;
                    $scope.totalItems = response.data.dataCount;
                    $scope.catCount = response.data.dataCount;

                }, function error(error) {
                    toastr.error('ERROR!', 'Replacement has been Create failed.');
                });
        }


// sorting
        $scope.predicate = 'age';
        $scope.reverse = true;
        $scope.order = function (predicate) {

            $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
            $scope.predicate = predicate;

        };


    }

    // end of main controller


    /**
     * CREATE AND EDIT MODAL
     * */

    mainApp.controller('formProductCategoryController',
        ['modalService','$scope', '$modalInstance', 'repID', 'productCategoryService', 'toastr', '$window', '$rootScope', formProductCategoryModalController]);

    function formProductCategoryModalController(modalService,$scope, $modalInstance, catID, productCategoryService, toastr, $window, $rootScope) {

        $scope.pageStatus = catID ? 'EDIT' : 'CREATE';
        $scope.formTitle = catID ? "Edit Category" : "Create Category";

        $scope.saveProductCategory = saveProductCategory;
        $scope.productCategoryForm = {};
        $scope.productCategoryCSV = {};
        $scope.productCategoryForm.status = 0;


        $scope.uploadCSVFile = uploadCSVFile;


        // for close button
        $scope.cancel = function () {

            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };


        // set parent categories

        productCategoryService.setParentCategories()

            .then(function success(response) {

                $scope.catParents = response.data.data;

                if ($scope.pageStatus != "EDIT") {
                    $scope.productCategoryForm.parent = $scope.catParents[0];
                }

            }, function error() {

                toastr.error('ERROR!', 'Product Category has been Create failed.');

            });


        // load data for edit

        if ($scope.pageStatus === "EDIT") {

            productCategoryService.getProductCategoryData(catID)
                .then(function (responce) {

                    $scope.productCategoryForm = responce.data.data;
                    $scope.productCategoryForm.parent = responce.data.data.parent;

                });
        }


        // save and edit product categories

        function saveProductCategory() {

            if ($scope.pageStatus === "EDIT") {

                productCategoryService.updateProductCategory($scope.productCategoryForm).then(function success(response) {
                        if (response.data.status_message) {

                            toastr.success('Product Category  has been updated successfully.');
                            $modalInstance.close(response.data);

                        } else {
                            toastr.error('ERROR!', 'Product Category  has been updated failed.');
                        }
                    }, function error(error) {

                    }
                );

            } else {

                productCategoryService.addProductCategory($scope.productCategoryForm)
                    .then(function success(responce) {

                        if(responce.data.status){

                            $modalInstance.close(responce.data);
                            toastr.success('Product Category has been created successfully.');

                        }else{
                            toastr.error('ERROR!', 'Product Category has been Created failed.');
                        }


                    }, function error() {

                        toastr.error('ERROR!', 'Product Category has been Created failed.');

                    });
            }
        }


        function uploadCSVFile() {

            var fileType = $scope.productCategoryCSV.file.type;

            if (fileType == "text/csv" || fileType == "application/vnd.ms-excel") {

                productCategoryService.uploadProductCategoryCSV($scope.productCategoryCSV)
                    .then(function success(responce) {

                        if (responce.data.status == 1) {

                            toastr.success(responce.data.messageNewRecords);

                            if(responce.data.messageFailedRecords) {
                                toastr.error(responce.data.messageFailedRecords);
                            }

                        } else {

                            toastr.error(responce.data.messageNewRecords);

                        }

                        $modalInstance.close();


                    }, function error() {

                        toastr.error('ERROR!', 'Product Category has been Create failed.');

                    });

            } else {

                toastr.error('ERROR!', 'Unsupported File Format ! Please Upload  Only .CSV Files');

            }

        }

    }


})();


/**
 * Created by thamira on 10/17/15.
 */
(function () {
    'use strict';
    angular.module("module.productsCatalogue").service('productCategoryService', [
        '$http','$global','authService','multipartForm', service
    ]).filter('dateRange', function() {
        return function(records, from, to) {
            return records.filter(function(record) {
                return record.Date >= from && record.Date <= to;
            });
        }
    });

    function service($http, $global,authService,multipartForm) {

        return {

            addProductCategory: addProductCategory,
            setParentCategories:setParentCategories,
            listCategories:listCategories,
            getProductCategoryData:getProductCategoryData,
            updateProductCategory:updateProductCategory,
            searchProductCategory:searchProductCategory,
            uploadProductCategoryCSV:uploadProductCategoryCSV,
            setLevels:setLevels

        };

        function addProductCategory(productCategoryData){

            var productCategoryData = $http.post($global.API_URL + 'api/catalog/category/create/', {
                data: productCategoryData
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return productCategoryData;
        }

        function setParentCategories(){

            var productCategoryData = $http.post($global.API_URL + 'api/catalog/category/getParents/', {
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return productCategoryData;
        }

        // list categories

        function listCategories(req){

            var productCategoryData = $http.post($global.API_URL + 'api/catalog/category/list/', {
                limit: req.limit,
                page: req.page
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return productCategoryData;
        }

        // get category data for edit

        function getProductCategoryData(catId){
            var productCategoryData = $http.post($global.API_URL + 'api/catalog/category/getData/', {
                data: catId
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return productCategoryData;
        }

        // update product category

        function updateProductCategory(productCategoryData){

            var productCategoryData = $http.post($global.API_URL + 'api/catalog/category/update/', {
                data: productCategoryData
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return productCategoryData;

        }

        // search product category

        function searchProductCategory(productCategoryData , limit , page){

            var productCategoryData = $http.post($global.API_URL + 'api/catalog/category/search/', {
                data: productCategoryData,
                limit : limit,
                page : page

            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
            });

            return productCategoryData;

        }

        // upload product category csv
        function uploadProductCategoryCSV(productCategoryData){
            //console.log(productCategoryData);
            return multipartForm.post($global.API_URL + 'api/catalog/category/uploadCSV/',productCategoryData);

        }

        // set levels
        function setLevels(){
            return $http.post($global.API_URL + 'api/catalog/category/getLevels/',{});

        }

    }

})();

/**
 * Created by yasith on 11/11/15.
 */


(function () {
    'use strict';

    angular.module("module.productsCatalogue").controller('forecastsController', [
        '$scope', '$http', 'toastr', '$state', '$global', '$modal', '$rootScope', 'forecastsService', '$window', controller
    ]);

    function controller($scope, $http, toastr, $state, $global, $modal, $rootScope, forecastsService, $window) {

        $scope.forecasts = {};
        $scope.uploadCSV=uploadCSV;

        listForecasts();

        function listForecasts() {
            $rootScope.spinnerTrax = true;
            forecastsService.getForecasts().then(function success(response) {
                    $rootScope.spinnerTrax = false;
                    $scope.forecasts = response.data.data;
                },
                function error(error) {
                    $rootScope.spinnerTrax = false;
                }
            );
        }

        function uploadCSV(){
            uploadCSVModel()
        }

        // Upload CSV Modal
        function uploadCSVModel(UploadCSVId){
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/products-catalogue/forecasts/uploadForecastsModal.html',
                controller: 'formForecastsController',
                size: 'md',
                resolve: {
                    /*repID: function () {
                        return UploadCSVId;

                    }*/

                }
            });

            modalInstance.result.then(function (result) {
                if(result) {
                    listForecasts();
                }
            });
        }

    }

    /**
     * CREATE AND EDIT MODAL
     * */

    angular.module('module.productsCatalogue').controller('formForecastsController',
        ['modalService','$scope','$modalInstance','forecastsService', 'toastr', '$window', '$rootScope', formForecastsController]);

    function formForecastsController(modalService,$scope, $modalInstance, forecastsService, toastr, $window, $rootScope) {

        $scope.uploadCSVFile = uploadCSVFile;
        $scope.productForecastCsv = {};
        $scope.csvCheckError = '';

        function uploadCSVFile() {
            var fileType = $scope.productForecastCsv.file.type;
            if(fileType == "text/csv" || fileType=="application/vnd.ms-excel"){
                forecastsService.uploadCsvForecast($scope.productForecastCsv)
                    .then(function success(responce) {
                        if(responce.data.states == 'error') {
                            $scope.csvCheckError = responce.data.type;
                            toastr.error($scope.csvCheckError);
                        }
                        else if(responce.data.states == 'ok') {
                            $modalInstance.dismiss(responce);
                            toastr.success( 'Forecast has been Create successfully.');
                        }

                    }
                );
            }
            else {
                toastr.error('ERROR!', 'Unsupported File Format ! Please Upload  Only .CSV Files');
            }

        }

        // for close button
        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }



})();
/**
 * Created by ab on 11/11/15.
 */


(function () {
    'use strict';

    angular.module("module.productsCatalogue").service('forecastsService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {
        return {
            getForecasts: getForecasts,
            uploadCsvForecast:uploadCsvForecast
        };

        function getForecasts() {
            var count = $http.get($global.API_URL + 'api/catalogue/forecast/list/');
            return count;
        }

        function uploadCsvForecast(productForecastData) {
            return multipartForm.post($global.API_URL + 'api/catalogue/forecast/add/',productForecastData);
        }





    }
})();
/**
 * Created by yasith on 10/17/15.
 */

(function () {
    'use strict';

    angular.module("module.productsCatalogue").controller('productController', [
        '$scope', '$http', '$location', 'toastr', '$state', '$global', '$modal', '$rootScope', 'productService','$window', 'Upload','productCategoryService', controller
    ]);

    function controller($scope, $http, $location, toastr, $state, $global, $modal, $rootScope, productService, $window, Upload, productCategoryService) {

        // pagination
        $scope.totalItems = 64;
        $scope.currentPage = 4;
        $scope.maxSize = 10;
        $scope.setPage = function (pageNo) {
            $scope.currentPage = pageNo;
        };
        $scope.bigTotalItems = 175;
        $scope.bigCurrentPage = 1;

        $scope.addProduct = addProduct;
        $scope.editProduct = editProduct;
        $scope.productSearch = productSearch;
        $scope.refreshSearch = refreshSearch;
        $scope.productList = [];
        $scope.selectUpObj={};
        $scope.orderFilter = {"keyword":null,"catSearch":null,"active":false,"collection":false,"inactive":false,"unit":false};

        $scope.currentPage = 1;
        $scope.totalItems = 0;
        $scope.pageLimit = 10;
        $scope.maxSize = 10;

        $rootScope.showConfigUnitDetail = function (prodId,typeId) {
            $location.path('/products-catalog/products/view/' + prodId +'/1');
        };

        /**
         * get categories
         */
        productService.productCategories().then(function success(response) {
            $rootScope.productCats = response.data.catArr;
        });

        /**
         * get colours
         */
        productService.productColours().then(function success(response) {
            $rootScope.colours = response.data.colours;
        });

        /**
         * get materials
         */
        productService.productMaterials().then(function success(response) {
            $rootScope.materials = response.data.materials;
        });

        /**
         * country
         */
        productService.getCountries().then(function success(response) {
            $rootScope.countryArr = response.data.countryArr;
        }, function error() {
        });

        function addProduct() {
            formOpenModal()
        }

        $scope.openProductCSVModal = function() {
            productCSVModal()
        }

        function editProduct(productID, editList) {
            $scope.selectUpObj = editList;
            if (productID) {
                formOpenModal(productID,editList.type)
            } else {
                toastr.error('Compensation ID!', 'Missing row id...');
            }
        }

        function productSearch(orderFilter){
            $rootScope.spinnerTrax = true;
            productService.listSearch({
                orderFilter: orderFilter,
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response) {
                    $rootScope.spinnerTrax = false;
                    $scope.productList = response.data.products;
                    $scope.totalItems = response.data.count;
                }, function error() {
                    $rootScope.spinnerTrax = false;
                    toastr.error('ERROR!', 'Product list has been Create failed.');
                }
            );

        }

        productList();

        $scope.pageChanged = function () {
            productList();
        };

        function productList() {
            $rootScope.spinnerTrax = true;
            productService.listProduct({
                limit: $scope.pageLimit,
                page: $scope.currentPage
            }).then(function success(response){
                    $rootScope.spinnerTrax = false;
                $scope.productList = response.data.products;
                $scope.totalItems = response.data.count;
            },
                function error() {
                    $rootScope.spinnerTrax = false;
                    toastr.error('ERROR!', 'Product list has been Create failed.');
            });
        }

        function productCSVModal() {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/products-catalogue/products/productCSVModal.html',
                controller: 'productCSVController',
                size: 'md'
            });

            modalInstance.result.then(function (result) {
                //TO-DO
            });
        }

        function formOpenModal(productID, productType) {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: 'static',
                keyboard: false,
                templateUrl: 'app/products-catalogue/products/newProductModal.html',
                controller: 'formProductController',
                size: 'lg',
                resolve: {
                    compID: function () {
                        return productID;
                    },
                    productType: function () {
                        return productType;
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if(result.newproduct) {
                    $scope.productList.unshift(result.newproduct.data.returnProduct[0]);
                }
                if(result.editproduct) {
                    var indexA = $scope.productList.indexOf($scope.selectUpObj);
                    $scope.productList[indexA]=result.editproduct.data.returnProduct[0];
                }
            });
        }

        $scope.showDetail = function (prodId,type) {
            if(type=='UNIT'){
                $location.path('/products-catalog/products/view/' + prodId +'/1');
            } else {
                $location.path('/products-catalog/products/view/' + prodId +'/2');
            }
        };

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        };


        // set categories for search
        productCategoryService.setParentCategories()
            .then(function success(response) {
                $scope.searchCats  =  response.data.data;
            }, function error() {
                toastr.error('ERROR!', 'Product Category has been Create failed.');
            });


        function refreshSearch() {
            $scope.orderFilter = {"keyword":null,"catSearch":null,"active":false,"collection":false,"inactive":false,"unit":false};
            productList();
        }

    } //end mail controller

    /**
     * UPLOAD CSV MODAL
     * */
    angular.module('module.productsCatalogue').controller('productCSVController',
        ['modalService','$scope', '$modalInstance', 'productService', 'toastr', '$window', 'Upload','$timeout','$rootScope', productCSVController]);

    function productCSVController(modalService,$scope, $modalInstance, productService, toastr, $window, Upload, $timeout,$rootScope) {

        $scope.productCSV={unitProductsCSVFile:null, collecionsCSVFile:null, imagesZip:null};

        $scope.uploadProductCSVFiles =  function (){

            var hasError = false;
            var csvFormats = ['application/vnd.ms-excel', 'text/csv'];
            var zipFormats = ['application/x-zip-compressed', 'application/zip'];

            if($scope.productCSV.unitProductsCSVFile != null && $scope.productCSV.unitProductsCSVFile != ''){

                var unitProductsCSVFileFileType = $scope.productCSV.unitProductsCSVFile.type;
                console.log(unitProductsCSVFileFileType);
                console.log(($scope.productCSV.unitProductsCSVFile.name).split('.').pop());

                if(($scope.productCSV.unitProductsCSVFile.name).split('.').pop()!='csv') {
                    toastr.error('ERROR!', 'Unsupported File Format - Unit Products CSV ! Please Upload  Only .CSV Files');
                    hasError = true;
                } else if(!($scope.productCSV.unitProductsCSVFile.name).match(/Unit/g)){
                    toastr.error('ERROR!', 'File name should start with the word "Unit"');
                    hasError = true;
                }

            }

            if($scope.productCSV.collecionsCSVFile != null && $scope.productCSV.collecionsCSVFile != ''){

                var collecionsCSVFileType = $scope.productCSV.collecionsCSVFile.type;
                console.log(collecionsCSVFileType);
                console.log(($scope.productCSV.collecionsCSVFile.name).split('.').pop());

                if(($scope.productCSV.collecionsCSVFile.name).split('.').pop()!='csv') {
                    toastr.error('ERROR!', 'Unsupported File Format - Collections CSV ! Please Upload  Only .CSV Files');
                    hasError = true;
                } else if(!($scope.productCSV.collecionsCSVFile.name).match(/Collection/g)){
                    toastr.error('ERROR!', 'File name should start with the word "Collection"');
                    hasError = true;
                }

            }

            if($scope.productCSV.imagesZip != null && $scope.productCSV.imagesZip != ''){

                var imagesZipType = $scope.productCSV.imagesZip.type;
                console.log(imagesZipType);
                console.log(($scope.productCSV.imagesZip.name).split('.').pop());

                if(($scope.productCSV.imagesZip.name).split('.').pop()!='zip') {
                    toastr.error('ERROR!', 'Unsupported File Format - Images Zip File ! Please Upload  Only .ZIP Files');
                    hasError = true;
                }
            }

            if(!hasError){
                productService.uploadProductCSV($scope.productCSV)
                    .then(function success(response) {

                        if(response.data.csv_validation == false) {
                            toastr.error('ERROR!', ''+response.data.csv_validation_message);
                        } else {
                            $modalInstance.dismiss('cancel');
                            toastr.success( 'Products has been Created successfully.');
                             $window.location.reload();
                        }

                    }, function error() {
                        toastr.error('ERROR!', 'Products has been Create failed.');
                    });
            }else{
                toastr.error('ERROR!', 'Unsupported File Format ! Please Upload  Only .CSV Files');
            }

        }

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };
    }

    /**
     * CREATE AND EDIT MODAL
     * */
    angular.module('module.productsCatalogue').controller('formProductController',
        ['modalService','$scope', '$rootScope', '$global', '$modalInstance', 'compID', 'productType', 'productService', 'toastr', '$window', 'Upload','$timeout', formProductController]);

    function formProductController(modalService,$scope, $rootScope, $global, $modalInstance, productID, productType, productService, toastr, $window, Upload, $timeout) {

        $scope.productSave = productSave;
        $scope.products = {'id':null,'collectionId':null,'imageFiles':[],'type':'UNIT'};
        $scope.imageFiles = [];
        $scope.pageStatus = productID ? 'EDIT' : 'CREATE';
        $scope.title = 'Create';
        $scope.isSkuExist = false;
        $scope.API_URL = $global.API_URL;

        $scope.productCats = $rootScope.productCats;
        $scope.colours = $rootScope.colours;
        $scope.materials = $rootScope.materials;
        $scope.countryArr = $rootScope.countryArr;

        $scope.$watch('products.height', calculateVolume);
        $scope.$watch('products.width', calculateVolume);
        $scope.$watch('products.depth', calculateVolume);

        function calculateVolume() {
            $scope.products.volume = $scope.products.height*$scope.products.width*$scope.products.depth
        }


        $scope.addNewConfigUnit = function($configurationProduct) {
            $configurationProduct.configUnits.push({'id':null,unit:{product:{sku:null,name:null,price:null},quantity:null}});
        };

        $scope.products.configurationProducts = [{"id":null,"Title": null,"sku": null,"configUnits": [{'id':null,unit:{product:{sku:null,name:null,price:null},quantity:null}}]}];

        $scope.addConfiguration = function () {
            var $singleConfiguration = {"id":null,"Title": null,"sku": null,"configUnits": [{'id':null,unit:{product:{sku:null,name:null,price:null},quantity:null}}]};
            $scope.products.configurationProducts.push($singleConfiguration);
        };

        /**
         *load unit products
         */
        $scope.unitProducts = [];
        productService.getUnitProducts().then(function success(responce){
            $scope.unitProducts = responce.data.units;
        });

        $scope.uploadFiles = function(files) {
            $scope.files = files;

                if(files) {
                    productService.saveProductImages($scope.files).then(function success(response) {
                       // $scope.products.imageFiles = response.data.imageData;

                        angular.forEach(response.data.imageData, function(newImage) {
                            newImage.id = null;
                            newImage.isDeleted = 0;
                            $scope.products.imageFiles.push(newImage);
                        });

                    });
                }

        };

        $scope.removeProductImage = function(imageFile){
            imageFile.isDeleted = 1;
        }

        $scope.removeConfigUnits = function(configurationProduct, configIndex, unitIndex) {
            configurationProduct.configUnits.splice(unitIndex, 1);
        };

        if($scope.pageStatus === "EDIT") {
            $scope.title = 'Edit';
            productService.getEditDetails(productID,productType).then(function success(responce){
                $scope.products = responce.data.productArr;

            }, function error() {

            });
        }

        function productSave(products) {

            if($scope.pageStatus === "EDIT") {

                productService.editProduct(products, productID).then(function success(response) {
                        var res = {};
                    if (response.data) {
                        res.editproduct = response;
                        $modalInstance.close(res);
                        toastr.success('Product has been updated successfully.');
                    } else {
                        toastr.error('ERROR!', 'Product has been updated failed.');
                    }
                },
                function error() {

                });

            } else {

                productService.saveProduct(products).then(function success(response) {

                    if(response.data.product_validate == false) {
                       // $scope.isSkuExist = true;
                        toastr.error('ERROR!', response.data.product_validate_message);
                    }
                    else {
                        var res ={};
                        if (response.data) {
                            res.newproduct = response;
                            toastr.success('Product has been created successfully.');
                            $modalInstance.close(res);
                        } else {
                            toastr.error('ERROR!', 'Product has been created failed.');
                        }
                    }
                }, function error() {

                });

            }

        }

        /**
         * image upload
         */
        $scope.productIMGs = [
            {id: 1}
        ];

        $scope.addimg_btn = function (num) {
            var imgNo = $scope.productIMGs.length+1;
            $scope.productIMGs.push({'id':imgNo});
                /*$scope.productIMGs.concat({
                id: 0,
                img: ''
            });*/
            angular.element('.proimg_row').addClass('rmicon_show');
        };

        $scope.rmimg_btn = function (rmimg) {
            $scope.productIMGs.splice(rmimg, 1);
        };




        $scope.showPanel = function($event, className){
            //console.log(angular.element($event.currentTarget).parent().addClass('showPanel'));
            var elem = angular.element($event.currentTarget).parent();
            className = className || 'is-open';
            $(elem).toggleClass(className);
        };
//aje

        $scope.cancel = function () {
            modalService.showModal({}, common.getCloseMsgOptions()).then(function () {
                $modalInstance.dismiss('cancel');

            });
        };

    }

    })
();


/**
 * Created by yasith on 10/17/15.
 */
(function () {
    'use strict';

    angular.module("module.productsCatalogue").service('productService', [
        '$http', '$q', '$global', 'authService', 'multipartForm', service
    ]);

    function service($http, $q, $global, authService, multipartForm) {

        return {
            saveProduct: saveProduct,
            listProduct: listProduct,
            productCategories: productCategories,
            productColours: productColours,
            productMaterials: productMaterials,
            getEditDetails: getEditDetails,
            editProduct: editProduct,
            getUnitProducts: getUnitProducts,
            listSearch: listSearch,
            getProductData: getProductData,
            getCountries: getCountries,
            saveProductImages: saveProductImages,
            uploadProductCSV: uploadProductCSV
        };

        function saveProduct(products) {
            var saveProduct = $http.post(
                $global.API_URL + 'api/catalogue/product/create/',{
                    products : products
                } ,{ headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });
            return saveProduct;

        }

        function listProduct(req) {
            var listProducts = $http.post(
                $global.API_URL + 'api/catalogue/product/list/',{
                    limit: req.limit,
                    page: req.page
                }
            );
            return listProducts;
        }

        function productCategories(){
            var categories = $http.post(
                $global.API_URL + 'api/catalogue/product/categories/'
            );
            return categories;
        }

        function productColours(){
            var colours = $http.post(
                $global.API_URL + 'api/catalogue/product/colours/'
            );
            return colours;
        }

        function productMaterials(){
            var materials = $http.post(
                $global.API_URL + 'api/catalogue/product/materials/'
            );
            return materials;
        }

        function getEditDetails(productId,productType) {
            if(productType=='UNIT') {
                var editData = $http.post(
                    $global.API_URL + 'api/catalogue/product/details/', productId, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                        }
                    });
                return editData;
            } else {
                var editData = $http.post(
                    $global.API_URL + 'api/catalogue/product/collection-details/', productId, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                        }
                    });
                return editData;
            }
        }

        function editProduct(products) {
            var saveProduct = $http.post(
                $global.API_URL + 'api/catalogue/product/create/',{
                    products : products
                } ,{ headers: {
                    'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                }
                });
            return saveProduct;
           // return multipartForm.post($global.API_URL + 'api/catalogue/product/edit/', products);
        }

        function getUnitProducts() {
            var unitProducts = $http.post(
                $global.API_URL + 'api/catalogue/product/units/'
            );
            return unitProducts;
        }

        function listSearch(filter){
            var deferred =
            $http.post($global.API_URL + 'api/catalogue/product/search/', {
                orderFilter: filter.orderFilter,
                limit: filter.limit,
                page: filter.page
            });
            return deferred
        }

        function getProductData(pid,typeId) {
            if(typeId==1){
                var productData = $http.post($global.API_URL + 'api/catalogue/product/view/',pid, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
                return productData;
            } else {
                var productData = $http.post($global.API_URL + 'api/catalogue/product/view-collection/',pid, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded' //Fix for Symfony
                    }
                });
                return productData;
            }

        }

        function getCountries() {
            var countryCode = $http.post(
                $global.API_URL + 'api/crm/country/');
            return countryCode;
        }

        function saveProductImages(images) {
            return multipartForm.post($global.API_URL + 'api/catalogue/product/images/', images);
        }

        function uploadProductCSV(productCSVData){
            return multipartForm.post($global.API_URL + 'api/catalogue/product/upload-csv/',productCSVData);
        }

    }

})();
/**
 * Created by thamira on 10/19/15.
 */
(function () {
    'use strict';

    angular.module("module.productsCatalogue").controller('productSpecificController', [
        '$scope', '$http', 'productService', 'toastr', '$state','$location', '$global', '$stateParams','$rootScope', controller
    ]);

    function controller($scope, $http, productService, toastr, $state,$location, $global, $stateParams,$rootScope) {

        $scope.productData={};

        var pid = 0;
        var typeId = 1;
        if($stateParams.productId) {
            pid = $stateParams.productId;
            typeId = $stateParams.typeId;
            productService.getProductData(pid, typeId).then(function success(response) {
                $scope.productData = response.data;
            }, function error(error) {
                toastr.error('ERROR!', 'Error with product view.');
            });
        }

        $scope.featureNotConnected = function() {
            toastr.clear();
            toastr.warning('WARNING!', 'This feature is coming soon!');
        }
    }

})();